// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	einterfaces "github.com/mattermost/mattermost-server/v5/einterfaces"
	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost-server/v5/model"
)

// LdapInterface is an autogenerated mock type for the LdapInterface type
type LdapInterface struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: _a0, _a1
func (_m *LdapInterface) CheckPassword(_a0 string, _a1 string) *model.AppError {
	ret := _m.Called(_a0, _a1)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) *model.AppError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// CheckPasswordAuthData provides a mock function with given fields: _a0, _a1
func (_m *LdapInterface) CheckPasswordAuthData(_a0 string, _a1 string) *model.AppError {
	ret := _m.Called(_a0, _a1)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) *model.AppError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// CheckProviderAttributes provides a mock function with given fields: _a0, _a1, _a2
func (_m *LdapInterface) CheckProviderAttributes(_a0 *model.LdapSettings, _a1 *model.User, _a2 *model.UserPatch) string {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.LdapSettings, *model.User, *model.UserPatch) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DoLogin provides a mock function with given fields: _a0, _a1, _a2
func (_m *LdapInterface) DoLogin(_a0 einterfaces.LdapAppInterface, _a1 string, _a2 string) (*model.User, *model.AppError) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(einterfaces.LdapAppInterface, string, string) *model.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(einterfaces.LdapAppInterface, string, string) *model.AppError); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// FirstLoginSync provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *LdapInterface) FirstLoginSync(_a0 einterfaces.LdapAppInterface, _a1 *model.User, _a2 string, _a3 string, _a4 string) *model.AppError {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(einterfaces.LdapAppInterface, *model.User, string, string, string) *model.AppError); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// GetADLdapIdFromSAMLId provides a mock function with given fields: _a0
func (_m *LdapInterface) GetADLdapIdFromSAMLId(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAllGroupsPage provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LdapInterface) GetAllGroupsPage(_a0 einterfaces.LdapAppInterface, _a1 int, _a2 int, _a3 model.LdapGroupSearchOpts) ([]*model.Group, int, *model.AppError) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 []*model.Group
	if rf, ok := ret.Get(0).(func(einterfaces.LdapAppInterface, int, int, model.LdapGroupSearchOpts) []*model.Group); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Group)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(einterfaces.LdapAppInterface, int, int, model.LdapGroupSearchOpts) int); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 *model.AppError
	if rf, ok := ret.Get(2).(func(einterfaces.LdapAppInterface, int, int, model.LdapGroupSearchOpts) *model.AppError); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*model.AppError)
		}
	}

	return r0, r1, r2
}

// GetAllLdapUsers provides a mock function with given fields:
func (_m *LdapInterface) GetAllLdapUsers() ([]*model.User, *model.AppError) {
	ret := _m.Called()

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func() []*model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: _a0
func (_m *LdapInterface) GetGroup(_a0 string) (*model.Group, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.Group
	if rf, ok := ret.Get(0).(func(string) *model.Group); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetSAMLIdFromADLdapId provides a mock function with given fields: _a0
func (_m *LdapInterface) GetSAMLIdFromADLdapId(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUser provides a mock function with given fields: _a0
func (_m *LdapInterface) GetUser(_a0 string) (*model.User, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetUserAttributes provides a mock function with given fields: _a0, _a1
func (_m *LdapInterface) GetUserAttributes(_a0 string, _a1 []string) (map[string]string, *model.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, []string) map[string]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, []string) *model.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetVendorNameAndVendorVersion provides a mock function with given fields:
func (_m *LdapInterface) GetVendorNameAndVendorVersion() (string, string) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MigrateIDAttribute provides a mock function with given fields: _a0, _a1
func (_m *LdapInterface) MigrateIDAttribute(_a0 einterfaces.LdapAppInterface, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(einterfaces.LdapAppInterface, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTest provides a mock function with given fields:
func (_m *LdapInterface) RunTest() *model.AppError {
	ret := _m.Called()

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func() *model.AppError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// StartSynchronizeJob provides a mock function with given fields: _a0
func (_m *LdapInterface) StartSynchronizeJob(_a0 bool) (*model.Job, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.Job
	if rf, ok := ret.Get(0).(func(bool) *model.Job); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(bool) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// SwitchToLdap provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LdapInterface) SwitchToLdap(_a0 einterfaces.LdapAppInterface, _a1 string, _a2 string, _a3 string) *model.AppError {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(einterfaces.LdapAppInterface, string, string, string) *model.AppError); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// UpdateProfilePictureIfNecessary provides a mock function with given fields: _a0, _a1, _a2
func (_m *LdapInterface) UpdateProfilePictureIfNecessary(_a0 einterfaces.LdapAppInterface, _a1 model.User, _a2 model.Session) {
	_m.Called(_a0, _a1, _a2)
}
