// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	bytes "bytes"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost-server/v5/model"
)

// LdapAppInterface is an autogenerated mock type for the LdapAppInterface type
type LdapAppInterface struct {
	mock.Mock
}

// AdjustImage provides a mock function with given fields: file
func (_m *LdapAppInterface) AdjustImage(file io.Reader) (*bytes.Buffer, *model.AppError) {
	ret := _m.Called(file)

	var r0 *bytes.Buffer
	if rf, ok := ret.Get(0).(func(io.Reader) *bytes.Buffer); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(io.Reader) *model.AppError); ok {
		r1 = rf(file)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// ClearChannelMembersCache provides a mock function with given fields: _a0
func (_m *LdapAppInterface) ClearChannelMembersCache(_a0 string) {
	_m.Called(_a0)
}

// ClearTeamMembersCache provides a mock function with given fields: _a0
func (_m *LdapAppInterface) ClearTeamMembersCache(_a0 string) {
	_m.Called(_a0)
}

// CreateDefaultMemberships provides a mock function with given fields: _a0
func (_m *LdapAppInterface) CreateDefaultMemberships(_a0 int64) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGuest provides a mock function with given fields: _a0
func (_m *LdapAppInterface) CreateGuest(_a0 *model.User) (*model.User, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: _a0
func (_m *LdapAppInterface) CreateUser(_a0 *model.User) (*model.User, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: groupID
func (_m *LdapAppInterface) DeleteGroup(groupID string) (*model.Group, *model.AppError) {
	ret := _m.Called(groupID)

	var r0 *model.Group
	if rf, ok := ret.Get(0).(func(string) *model.Group); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// DeleteGroupConstrainedMemberships provides a mock function with given fields:
func (_m *LdapAppInterface) DeleteGroupConstrainedMemberships() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupMember provides a mock function with given fields: groupID, userID
func (_m *LdapAppInterface) DeleteGroupMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	ret := _m.Called(groupID, userID)

	var r0 *model.GroupMember
	if rf, ok := ret.Get(0).(func(string, string) *model.GroupMember); ok {
		r0 = rf(groupID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GroupMember)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(groupID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// DemoteUserToGuest provides a mock function with given fields: _a0
func (_m *LdapAppInterface) DemoteUserToGuest(_a0 *model.User) *model.AppError {
	ret := _m.Called(_a0)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User) *model.AppError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// GetAllChannels provides a mock function with given fields: page, perPage, opts
func (_m *LdapAppInterface) GetAllChannels(page int, perPage int, opts model.ChannelSearchOpts) (*model.ChannelListWithTeamData, *model.AppError) {
	ret := _m.Called(page, perPage, opts)

	var r0 *model.ChannelListWithTeamData
	if rf, ok := ret.Get(0).(func(int, int, model.ChannelSearchOpts) *model.ChannelListWithTeamData); ok {
		r0 = rf(page, perPage, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelListWithTeamData)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(int, int, model.ChannelSearchOpts) *model.AppError); ok {
		r1 = rf(page, perPage, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetAllTeamsPage provides a mock function with given fields: offset, limit
func (_m *LdapAppInterface) GetAllTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	ret := _m.Called(offset, limit)

	var r0 []*model.Team
	if rf, ok := ret.Get(0).(func(int, int) []*model.Team); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Team)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(int, int) *model.AppError); ok {
		r1 = rf(offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetGroupByRemoteID provides a mock function with given fields: _a0, _a1
func (_m *LdapAppInterface) GetGroupByRemoteID(_a0 string, _a1 model.GroupSource) (*model.Group, *model.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Group
	if rf, ok := ret.Get(0).(func(string, model.GroupSource) *model.Group); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, model.GroupSource) *model.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetGroupMemberUsers provides a mock function with given fields: groupID
func (_m *LdapAppInterface) GetGroupMemberUsers(groupID string) ([]*model.User, *model.AppError) {
	ret := _m.Called(groupID)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(string) []*model.User); ok {
		r0 = rf(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetGroupSyncables provides a mock function with given fields: _a0, _a1
func (_m *LdapAppInterface) GetGroupSyncables(_a0 string, _a1 model.GroupSyncableType) ([]*model.GroupSyncable, *model.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 []*model.GroupSyncable
	if rf, ok := ret.Get(0).(func(string, model.GroupSyncableType) []*model.GroupSyncable); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GroupSyncable)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, model.GroupSyncableType) *model.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetProfileImage provides a mock function with given fields: _a0
func (_m *LdapAppInterface) GetProfileImage(_a0 *model.User) ([]byte, bool, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*model.User) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*model.User) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 *model.AppError
	if rf, ok := ret.Get(2).(func(*model.User) *model.AppError); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*model.AppError)
		}
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: _a0
func (_m *LdapAppInterface) GetUser(_a0 string) (*model.User, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// InvalidateCacheForUser provides a mock function with given fields: userID
func (_m *LdapAppInterface) InvalidateCacheForUser(userID string) {
	_m.Called(userID)
}

// PromoteGuestToUser provides a mock function with given fields: _a0, _a1
func (_m *LdapAppInterface) PromoteGuestToUser(_a0 *model.User, _a1 string) *model.AppError {
	ret := _m.Called(_a0, _a1)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, string) *model.AppError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// SessionIsRegistered provides a mock function with given fields: _a0
func (_m *LdapAppInterface) SessionIsRegistered(_a0 model.Session) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.Session) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetProfileImageFromFile provides a mock function with given fields: _a0, _a1
func (_m *LdapAppInterface) SetProfileImageFromFile(_a0 string, _a1 io.Reader) *model.AppError {
	ret := _m.Called(_a0, _a1)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, io.Reader) *model.AppError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// SyncSyncableRoles provides a mock function with given fields: syncableID, syncableType
func (_m *LdapAppInterface) SyncSyncableRoles(syncableID string, syncableType model.GroupSyncableType) *model.AppError {
	ret := _m.Called(syncableID, syncableType)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, model.GroupSyncableType) *model.AppError); ok {
		r0 = rf(syncableID, syncableType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// UpdateActive provides a mock function with given fields: _a0, _a1
func (_m *LdapAppInterface) UpdateActive(_a0 *model.User, _a1 bool) (*model.User, *model.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*model.User, bool) *model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.User, bool) *model.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: group
func (_m *LdapAppInterface) UpdateGroup(group *model.Group) (*model.Group, *model.AppError) {
	ret := _m.Called(group)

	var r0 *model.Group
	if rf, ok := ret.Get(0).(func(*model.Group) *model.Group); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Group) *model.AppError); ok {
		r1 = rf(group)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateUserRoles provides a mock function with given fields: _a0, _a1, _a2
func (_m *LdapAppInterface) UpdateUserRoles(_a0 string, _a1 string, _a2 bool) (*model.User, *model.AppError) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string, bool) *model.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, bool) *model.AppError); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpsertGroupMember provides a mock function with given fields: _a0, _a1
func (_m *LdapAppInterface) UpsertGroupMember(_a0 string, _a1 string) (*model.GroupMember, *model.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.GroupMember
	if rf, ok := ret.Get(0).(func(string, string) *model.GroupMember); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GroupMember)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}
