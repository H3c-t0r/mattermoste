// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// RemoteClusterStore is an autogenerated mock type for the RemoteClusterStore type
type RemoteClusterStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: remoteClusterId
func (_m *RemoteClusterStore) Delete(remoteClusterId string) (bool, error) {
	ret := _m.Called(remoteClusterId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(remoteClusterId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(remoteClusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: remoteClusterId
func (_m *RemoteClusterStore) Get(remoteClusterId string) (*model.RemoteCluster, error) {
	ret := _m.Called(remoteClusterId)

	var r0 *model.RemoteCluster
	if rf, ok := ret.Get(0).(func(string) *model.RemoteCluster); ok {
		r0 = rf(remoteClusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(remoteClusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: inclOffline
func (_m *RemoteClusterStore) GetAll(inclOffline bool) ([]*model.RemoteCluster, error) {
	ret := _m.Called(inclOffline)

	var r0 []*model.RemoteCluster
	if rf, ok := ret.Get(0).(func(bool) []*model.RemoteCluster); ok {
		r0 = rf(inclOffline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(inclOffline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNotInChannel provides a mock function with given fields: channelId, inclOffline
func (_m *RemoteClusterStore) GetAllNotInChannel(channelId string, inclOffline bool) ([]*model.RemoteCluster, error) {
	ret := _m.Called(channelId, inclOffline)

	var r0 []*model.RemoteCluster
	if rf, ok := ret.Get(0).(func(string, bool) []*model.RemoteCluster); ok {
		r0 = rf(channelId, inclOffline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(channelId, inclOffline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTopic provides a mock function with given fields: topic
func (_m *RemoteClusterStore) GetByTopic(topic string) ([]*model.RemoteCluster, error) {
	ret := _m.Called(topic)

	var r0 []*model.RemoteCluster
	if rf, ok := ret.Get(0).(func(string) []*model.RemoteCluster); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: rc
func (_m *RemoteClusterStore) Save(rc *model.RemoteCluster) (*model.RemoteCluster, error) {
	ret := _m.Called(rc)

	var r0 *model.RemoteCluster
	if rf, ok := ret.Get(0).(func(*model.RemoteCluster) *model.RemoteCluster); ok {
		r0 = rf(rc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.RemoteCluster) error); ok {
		r1 = rf(rc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLastPingAt provides a mock function with given fields: remoteClusterId
func (_m *RemoteClusterStore) SetLastPingAt(remoteClusterId string) error {
	ret := _m.Called(remoteClusterId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(remoteClusterId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: rc
func (_m *RemoteClusterStore) Update(rc *model.RemoteCluster) (*model.RemoteCluster, error) {
	ret := _m.Called(rc)

	var r0 *model.RemoteCluster
	if rf, ok := ret.Get(0).(func(*model.RemoteCluster) *model.RemoteCluster); ok {
		r0 = rf(rc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.RemoteCluster) error); ok {
		r1 = rf(rc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopics provides a mock function with given fields: remoteClusterid, topics
func (_m *RemoteClusterStore) UpdateTopics(remoteClusterid string, topics string) (*model.RemoteCluster, error) {
	ret := _m.Called(remoteClusterid, topics)

	var r0 *model.RemoteCluster
	if rf, ok := ret.Get(0).(func(string, string) *model.RemoteCluster); ok {
		r0 = rf(remoteClusterid, topics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RemoteCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(remoteClusterid, topics)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
