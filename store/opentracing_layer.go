// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make store-layers"
// DO NOT EDIT

package store

import (
	"context"
	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-server/v5/services/tracing"
)

type OpenTracingLayer struct {
	Store
	Context                   context.Context
	AuditStore                AuditStore
	BotStore                  BotStore
	ChannelStore              ChannelStore
	ChannelMemberHistoryStore ChannelMemberHistoryStore
	ClusterDiscoveryStore     ClusterDiscoveryStore
	CommandStore              CommandStore
	CommandWebhookStore       CommandWebhookStore
	ComplianceStore           ComplianceStore
	EmojiStore                EmojiStore
	FileInfoStore             FileInfoStore
	GroupStore                GroupStore
	JobStore                  JobStore
	LicenseStore              LicenseStore
	LinkMetadataStore         LinkMetadataStore
	OAuthStore                OAuthStore
	PluginStore               PluginStore
	PostStore                 PostStore
	PreferenceStore           PreferenceStore
	ReactionStore             ReactionStore
	RoleStore                 RoleStore
	SchemeStore               SchemeStore
	SessionStore              SessionStore
	StatusStore               StatusStore
	SystemStore               SystemStore
	TeamStore                 TeamStore
	TermsOfServiceStore       TermsOfServiceStore
	TokenStore                TokenStore
	UserStore                 UserStore
	UserAccessTokenStore      UserAccessTokenStore
	UserTermsOfServiceStore   UserTermsOfServiceStore
	WebhookStore              WebhookStore
}

func (s *OpenTracingLayer) Audit() AuditStore {
	return s.AuditStore
}

func (s *OpenTracingLayer) Bot() BotStore {
	return s.BotStore
}

func (s *OpenTracingLayer) Channel() ChannelStore {
	return s.ChannelStore
}

func (s *OpenTracingLayer) ChannelMemberHistory() ChannelMemberHistoryStore {
	return s.ChannelMemberHistoryStore
}

func (s *OpenTracingLayer) ClusterDiscovery() ClusterDiscoveryStore {
	return s.ClusterDiscoveryStore
}

func (s *OpenTracingLayer) Command() CommandStore {
	return s.CommandStore
}

func (s *OpenTracingLayer) CommandWebhook() CommandWebhookStore {
	return s.CommandWebhookStore
}

func (s *OpenTracingLayer) Compliance() ComplianceStore {
	return s.ComplianceStore
}

func (s *OpenTracingLayer) Emoji() EmojiStore {
	return s.EmojiStore
}

func (s *OpenTracingLayer) FileInfo() FileInfoStore {
	return s.FileInfoStore
}

func (s *OpenTracingLayer) Group() GroupStore {
	return s.GroupStore
}

func (s *OpenTracingLayer) Job() JobStore {
	return s.JobStore
}

func (s *OpenTracingLayer) License() LicenseStore {
	return s.LicenseStore
}

func (s *OpenTracingLayer) LinkMetadata() LinkMetadataStore {
	return s.LinkMetadataStore
}

func (s *OpenTracingLayer) OAuth() OAuthStore {
	return s.OAuthStore
}

func (s *OpenTracingLayer) Plugin() PluginStore {
	return s.PluginStore
}

func (s *OpenTracingLayer) Post() PostStore {
	return s.PostStore
}

func (s *OpenTracingLayer) Preference() PreferenceStore {
	return s.PreferenceStore
}

func (s *OpenTracingLayer) Reaction() ReactionStore {
	return s.ReactionStore
}

func (s *OpenTracingLayer) Role() RoleStore {
	return s.RoleStore
}

func (s *OpenTracingLayer) Scheme() SchemeStore {
	return s.SchemeStore
}

func (s *OpenTracingLayer) Session() SessionStore {
	return s.SessionStore
}

func (s *OpenTracingLayer) Status() StatusStore {
	return s.StatusStore
}

func (s *OpenTracingLayer) System() SystemStore {
	return s.SystemStore
}

func (s *OpenTracingLayer) Team() TeamStore {
	return s.TeamStore
}

func (s *OpenTracingLayer) TermsOfService() TermsOfServiceStore {
	return s.TermsOfServiceStore
}

func (s *OpenTracingLayer) Token() TokenStore {
	return s.TokenStore
}

func (s *OpenTracingLayer) User() UserStore {
	return s.UserStore
}

func (s *OpenTracingLayer) UserAccessToken() UserAccessTokenStore {
	return s.UserAccessTokenStore
}

func (s *OpenTracingLayer) UserTermsOfService() UserTermsOfServiceStore {
	return s.UserTermsOfServiceStore
}

func (s *OpenTracingLayer) Webhook() WebhookStore {
	return s.WebhookStore
}

type OpenTracingLayerAuditStore struct {
	AuditStore
	Root *OpenTracingLayer
}

type OpenTracingLayerBotStore struct {
	BotStore
	Root *OpenTracingLayer
}

type OpenTracingLayerChannelStore struct {
	ChannelStore
	Root *OpenTracingLayer
}

type OpenTracingLayerChannelMemberHistoryStore struct {
	ChannelMemberHistoryStore
	Root *OpenTracingLayer
}

type OpenTracingLayerClusterDiscoveryStore struct {
	ClusterDiscoveryStore
	Root *OpenTracingLayer
}

type OpenTracingLayerCommandStore struct {
	CommandStore
	Root *OpenTracingLayer
}

type OpenTracingLayerCommandWebhookStore struct {
	CommandWebhookStore
	Root *OpenTracingLayer
}

type OpenTracingLayerComplianceStore struct {
	ComplianceStore
	Root *OpenTracingLayer
}

type OpenTracingLayerEmojiStore struct {
	EmojiStore
	Root *OpenTracingLayer
}

type OpenTracingLayerFileInfoStore struct {
	FileInfoStore
	Root *OpenTracingLayer
}

type OpenTracingLayerGroupStore struct {
	GroupStore
	Root *OpenTracingLayer
}

type OpenTracingLayerJobStore struct {
	JobStore
	Root *OpenTracingLayer
}

type OpenTracingLayerLicenseStore struct {
	LicenseStore
	Root *OpenTracingLayer
}

type OpenTracingLayerLinkMetadataStore struct {
	LinkMetadataStore
	Root *OpenTracingLayer
}

type OpenTracingLayerOAuthStore struct {
	OAuthStore
	Root *OpenTracingLayer
}

type OpenTracingLayerPluginStore struct {
	PluginStore
	Root *OpenTracingLayer
}

type OpenTracingLayerPostStore struct {
	PostStore
	Root *OpenTracingLayer
}

type OpenTracingLayerPreferenceStore struct {
	PreferenceStore
	Root *OpenTracingLayer
}

type OpenTracingLayerReactionStore struct {
	ReactionStore
	Root *OpenTracingLayer
}

type OpenTracingLayerRoleStore struct {
	RoleStore
	Root *OpenTracingLayer
}

type OpenTracingLayerSchemeStore struct {
	SchemeStore
	Root *OpenTracingLayer
}

type OpenTracingLayerSessionStore struct {
	SessionStore
	Root *OpenTracingLayer
}

type OpenTracingLayerStatusStore struct {
	StatusStore
	Root *OpenTracingLayer
}

type OpenTracingLayerSystemStore struct {
	SystemStore
	Root *OpenTracingLayer
}

type OpenTracingLayerTeamStore struct {
	TeamStore
	Root *OpenTracingLayer
}

type OpenTracingLayerTermsOfServiceStore struct {
	TermsOfServiceStore
	Root *OpenTracingLayer
}

type OpenTracingLayerTokenStore struct {
	TokenStore
	Root *OpenTracingLayer
}

type OpenTracingLayerUserStore struct {
	UserStore
	Root *OpenTracingLayer
}

type OpenTracingLayerUserAccessTokenStore struct {
	UserAccessTokenStore
	Root *OpenTracingLayer
}

type OpenTracingLayerUserTermsOfServiceStore struct {
	UserTermsOfServiceStore
	Root *OpenTracingLayer
}

type OpenTracingLayerWebhookStore struct {
	WebhookStore
	Root *OpenTracingLayer
}

func (s *OpenTracingLayerAuditStore) Get(user_id string, offset int, limit int) (model.Audits, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "AuditStore.Get")

	span.SetTag("user_id", user_id)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.AuditStore.Get(user_id, offset, limit)

}

func (s *OpenTracingLayerAuditStore) PermanentDeleteByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "AuditStore.PermanentDeleteByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.AuditStore.PermanentDeleteByUser(userId)

}

func (s *OpenTracingLayerAuditStore) Save(audit *model.Audit) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "AuditStore.Save")

	span.SetTag("audit", audit)

	defer span.Finish()

	return s.AuditStore.Save(audit)

}

func (s *OpenTracingLayerBotStore) Get(userId string, includeDeleted bool) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "BotStore.Get")

	span.SetTag("userId", userId)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.BotStore.Get(userId, includeDeleted)

}

func (s *OpenTracingLayerBotStore) GetAll(options *model.BotGetOptions) ([]*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "BotStore.GetAll")

	span.SetTag("options", options)

	defer span.Finish()

	return s.BotStore.GetAll(options)

}

func (s *OpenTracingLayerBotStore) PermanentDelete(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "BotStore.PermanentDelete")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.BotStore.PermanentDelete(userId)

}

func (s *OpenTracingLayerBotStore) Save(bot *model.Bot) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "BotStore.Save")

	span.SetTag("bot", bot)

	defer span.Finish()

	return s.BotStore.Save(bot)

}

func (s *OpenTracingLayerBotStore) Update(bot *model.Bot) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "BotStore.Update")

	span.SetTag("bot", bot)

	defer span.Finish()

	return s.BotStore.Update(bot)

}

func (s *OpenTracingLayerChannelStore) AnalyticsDeletedTypeCount(teamId string, channelType string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.AnalyticsDeletedTypeCount")

	span.SetTag("teamId", teamId)

	span.SetTag("channelType", channelType)

	defer span.Finish()

	return s.ChannelStore.AnalyticsDeletedTypeCount(teamId, channelType)

}

func (s *OpenTracingLayerChannelStore) AnalyticsTypeCount(teamId string, channelType string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.AnalyticsTypeCount")

	span.SetTag("teamId", teamId)

	span.SetTag("channelType", channelType)

	defer span.Finish()

	return s.ChannelStore.AnalyticsTypeCount(teamId, channelType)

}

func (s *OpenTracingLayerChannelStore) AutocompleteInTeam(teamId string, term string, includeDeleted bool) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.AutocompleteInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.ChannelStore.AutocompleteInTeam(teamId, term, includeDeleted)

}

func (s *OpenTracingLayerChannelStore) AutocompleteInTeamForSearch(teamId string, userId string, term string, includeDeleted bool) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.AutocompleteInTeamForSearch")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("term", term)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.ChannelStore.AutocompleteInTeamForSearch(teamId, userId, term, includeDeleted)

}

func (s *OpenTracingLayerChannelStore) ClearAllCustomRoleAssignments() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.ClearAllCustomRoleAssignments")

	defer span.Finish()

	return s.ChannelStore.ClearAllCustomRoleAssignments()

}

func (s *OpenTracingLayerChannelStore) ClearCaches() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.ClearCaches")

	defer span.Finish()

	s.ChannelStore.ClearCaches()

}

func (s *OpenTracingLayerChannelStore) CountPostsAfter(channelId string, timestamp int64, userId string) (int, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.CountPostsAfter")

	span.SetTag("channelId", channelId)

	span.SetTag("timestamp", timestamp)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.CountPostsAfter(channelId, timestamp, userId)

}

func (s *OpenTracingLayerChannelStore) CreateDirectChannel(userId *model.User, otherUserId *model.User) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.CreateDirectChannel")

	span.SetTag("userId", userId)

	span.SetTag("otherUserId", otherUserId)

	defer span.Finish()

	return s.ChannelStore.CreateDirectChannel(userId, otherUserId)

}

func (s *OpenTracingLayerChannelStore) Delete(channelId string, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.Delete")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.ChannelStore.Delete(channelId, time)

}

func (s *OpenTracingLayerChannelStore) Get(id string, allowFromCache bool) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.Get")

	span.SetTag("id", id)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.Get(id, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetAll(teamId string) ([]*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAll")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.ChannelStore.GetAll(teamId)

}

func (s *OpenTracingLayerChannelStore) GetAllChannelMembersForUser(userId string, allowFromCache bool, includeDeleted bool) (map[string]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAllChannelMembersForUser")

	span.SetTag("userId", userId)

	span.SetTag("allowFromCache", allowFromCache)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.ChannelStore.GetAllChannelMembersForUser(userId, allowFromCache, includeDeleted)

}

func (s *OpenTracingLayerChannelStore) GetAllChannelMembersNotifyPropsForChannel(channelId string, allowFromCache bool) (map[string]model.StringMap, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAllChannelMembersNotifyPropsForChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetAllChannelMembersNotifyPropsForChannel(channelId, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetAllChannels(page int, perPage int, opts ChannelSearchOpts) (*model.ChannelListWithTeamData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAllChannels")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.ChannelStore.GetAllChannels(page, perPage, opts)

}

func (s *OpenTracingLayerChannelStore) GetAllChannelsCount(opts ChannelSearchOpts) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAllChannelsCount")

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.ChannelStore.GetAllChannelsCount(opts)

}

func (s *OpenTracingLayerChannelStore) GetAllChannelsForExportAfter(limit int, afterId string) ([]*model.ChannelForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAllChannelsForExportAfter")

	span.SetTag("limit", limit)

	span.SetTag("afterId", afterId)

	defer span.Finish()

	return s.ChannelStore.GetAllChannelsForExportAfter(limit, afterId)

}

func (s *OpenTracingLayerChannelStore) GetAllDirectChannelsForExportAfter(limit int, afterId string) ([]*model.DirectChannelForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetAllDirectChannelsForExportAfter")

	span.SetTag("limit", limit)

	span.SetTag("afterId", afterId)

	defer span.Finish()

	return s.ChannelStore.GetAllDirectChannelsForExportAfter(limit, afterId)

}

func (s *OpenTracingLayerChannelStore) GetByName(team_id string, name string, allowFromCache bool) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetByName")

	span.SetTag("team_id", team_id)

	span.SetTag("name", name)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetByName(team_id, name, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetByNameIncludeDeleted(team_id string, name string, allowFromCache bool) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetByNameIncludeDeleted")

	span.SetTag("team_id", team_id)

	span.SetTag("name", name)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetByNameIncludeDeleted(team_id, name, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetByNames(team_id string, names []string, allowFromCache bool) ([]*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetByNames")

	span.SetTag("team_id", team_id)

	span.SetTag("names", names)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetByNames(team_id, names, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetChannelCounts(teamId string, userId string) (*model.ChannelCounts, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelCounts")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.GetChannelCounts(teamId, userId)

}

func (s *OpenTracingLayerChannelStore) GetChannelMembersForExport(userId string, teamId string) ([]*model.ChannelMemberForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelMembersForExport")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.ChannelStore.GetChannelMembersForExport(userId, teamId)

}

func (s *OpenTracingLayerChannelStore) GetChannelMembersTimezones(channelId string) ([]model.StringMap, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelMembersTimezones")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.GetChannelMembersTimezones(channelId)

}

func (s *OpenTracingLayerChannelStore) GetChannelUnread(channelId string, userId string) (*model.ChannelUnread, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelUnread")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.GetChannelUnread(channelId, userId)

}

func (s *OpenTracingLayerChannelStore) GetChannels(teamId string, userId string, includeDeleted bool) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.ChannelStore.GetChannels(teamId, userId, includeDeleted)

}

func (s *OpenTracingLayerChannelStore) GetChannelsBatchForIndexing(startTime int64, endTime int64, limit int) ([]*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelsBatchForIndexing")

	span.SetTag("startTime", startTime)

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ChannelStore.GetChannelsBatchForIndexing(startTime, endTime, limit)

}

func (s *OpenTracingLayerChannelStore) GetChannelsByIds(channelIds []string) ([]*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelsByIds")

	span.SetTag("channelIds", channelIds)

	defer span.Finish()

	return s.ChannelStore.GetChannelsByIds(channelIds)

}

func (s *OpenTracingLayerChannelStore) GetChannelsByScheme(schemeId string, offset int, limit int) (model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetChannelsByScheme")

	span.SetTag("schemeId", schemeId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ChannelStore.GetChannelsByScheme(schemeId, offset, limit)

}

func (s *OpenTracingLayerChannelStore) GetDeleted(team_id string, offset int, limit int, userId string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetDeleted")

	span.SetTag("team_id", team_id)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.GetDeleted(team_id, offset, limit, userId)

}

func (s *OpenTracingLayerChannelStore) GetDeletedByName(team_id string, name string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetDeletedByName")

	span.SetTag("team_id", team_id)

	span.SetTag("name", name)

	defer span.Finish()

	return s.ChannelStore.GetDeletedByName(team_id, name)

}

func (s *OpenTracingLayerChannelStore) GetForPost(postId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetForPost")

	span.SetTag("postId", postId)

	defer span.Finish()

	return s.ChannelStore.GetForPost(postId)

}

func (s *OpenTracingLayerChannelStore) GetFromMaster(id string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetFromMaster")

	span.SetTag("id", id)

	defer span.Finish()

	return s.ChannelStore.GetFromMaster(id)

}

func (s *OpenTracingLayerChannelStore) GetGuestCount(channelId string, allowFromCache bool) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetGuestCount")

	span.SetTag("channelId", channelId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetGuestCount(channelId, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetMember(channelId string, userId string) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMember")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.GetMember(channelId, userId)

}

func (s *OpenTracingLayerChannelStore) GetMemberCount(channelId string, allowFromCache bool) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMemberCount")

	span.SetTag("channelId", channelId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetMemberCount(channelId, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetMemberCountFromCache(channelId string) int64 {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMemberCountFromCache")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.GetMemberCountFromCache(channelId)

}

func (s *OpenTracingLayerChannelStore) GetMemberForPost(postId string, userId string) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMemberForPost")

	span.SetTag("postId", postId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.GetMemberForPost(postId, userId)

}

func (s *OpenTracingLayerChannelStore) GetMembers(channelId string, offset int, limit int) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMembers")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ChannelStore.GetMembers(channelId, offset, limit)

}

func (s *OpenTracingLayerChannelStore) GetMembersByIds(channelId string, userIds []string) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMembersByIds")

	span.SetTag("channelId", channelId)

	span.SetTag("userIds", userIds)

	defer span.Finish()

	return s.ChannelStore.GetMembersByIds(channelId, userIds)

}

func (s *OpenTracingLayerChannelStore) GetMembersForUser(teamId string, userId string) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMembersForUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.GetMembersForUser(teamId, userId)

}

func (s *OpenTracingLayerChannelStore) GetMembersForUserWithPagination(teamId string, userId string, page int, perPage int) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMembersForUserWithPagination")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.ChannelStore.GetMembersForUserWithPagination(teamId, userId, page, perPage)

}

func (s *OpenTracingLayerChannelStore) GetMoreChannels(teamId string, userId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetMoreChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ChannelStore.GetMoreChannels(teamId, userId, offset, limit)

}

func (s *OpenTracingLayerChannelStore) GetPinnedPostCount(channelId string, allowFromCache bool) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetPinnedPostCount")

	span.SetTag("channelId", channelId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ChannelStore.GetPinnedPostCount(channelId, allowFromCache)

}

func (s *OpenTracingLayerChannelStore) GetPinnedPosts(channelId string) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetPinnedPosts")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.GetPinnedPosts(channelId)

}

func (s *OpenTracingLayerChannelStore) GetPublicChannelsByIdsForTeam(teamId string, channelIds []string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetPublicChannelsByIdsForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("channelIds", channelIds)

	defer span.Finish()

	return s.ChannelStore.GetPublicChannelsByIdsForTeam(teamId, channelIds)

}

func (s *OpenTracingLayerChannelStore) GetPublicChannelsForTeam(teamId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetPublicChannelsForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ChannelStore.GetPublicChannelsForTeam(teamId, offset, limit)

}

func (s *OpenTracingLayerChannelStore) GetTeamChannels(teamId string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.GetTeamChannels")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.ChannelStore.GetTeamChannels(teamId)

}

func (s *OpenTracingLayerChannelStore) IncrementMentionCount(channelId string, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.IncrementMentionCount")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.IncrementMentionCount(channelId, userId)

}

func (s *OpenTracingLayerChannelStore) InvalidateAllChannelMembersForUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidateAllChannelMembersForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.ChannelStore.InvalidateAllChannelMembersForUser(userId)

}

func (s *OpenTracingLayerChannelStore) InvalidateCacheForChannelMembersNotifyProps(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidateCacheForChannelMembersNotifyProps")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.ChannelStore.InvalidateCacheForChannelMembersNotifyProps(channelId)

}

func (s *OpenTracingLayerChannelStore) InvalidateChannel(id string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidateChannel")

	span.SetTag("id", id)

	defer span.Finish()

	s.ChannelStore.InvalidateChannel(id)

}

func (s *OpenTracingLayerChannelStore) InvalidateChannelByName(teamId string, name string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidateChannelByName")

	span.SetTag("teamId", teamId)

	span.SetTag("name", name)

	defer span.Finish()

	s.ChannelStore.InvalidateChannelByName(teamId, name)

}

func (s *OpenTracingLayerChannelStore) InvalidateGuestCount(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidateGuestCount")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.ChannelStore.InvalidateGuestCount(channelId)

}

func (s *OpenTracingLayerChannelStore) InvalidateMemberCount(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidateMemberCount")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.ChannelStore.InvalidateMemberCount(channelId)

}

func (s *OpenTracingLayerChannelStore) InvalidatePinnedPostCount(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.InvalidatePinnedPostCount")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.ChannelStore.InvalidatePinnedPostCount(channelId)

}

func (s *OpenTracingLayerChannelStore) IsUserInChannelUseCache(userId string, channelId string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.IsUserInChannelUseCache")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.IsUserInChannelUseCache(userId, channelId)

}

func (s *OpenTracingLayerChannelStore) MigrateChannelMembers(fromChannelId string, fromUserId string) (map[string]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.MigrateChannelMembers")

	span.SetTag("fromChannelId", fromChannelId)

	span.SetTag("fromUserId", fromUserId)

	defer span.Finish()

	return s.ChannelStore.MigrateChannelMembers(fromChannelId, fromUserId)

}

func (s *OpenTracingLayerChannelStore) MigratePublicChannels() error {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.MigratePublicChannels")

	defer span.Finish()

	return s.ChannelStore.MigratePublicChannels()

}

func (s *OpenTracingLayerChannelStore) PermanentDelete(channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.PermanentDelete")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.PermanentDelete(channelId)

}

func (s *OpenTracingLayerChannelStore) PermanentDeleteByTeam(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.PermanentDeleteByTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.ChannelStore.PermanentDeleteByTeam(teamId)

}

func (s *OpenTracingLayerChannelStore) PermanentDeleteMembersByChannel(channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.PermanentDeleteMembersByChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.PermanentDeleteMembersByChannel(channelId)

}

func (s *OpenTracingLayerChannelStore) PermanentDeleteMembersByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.PermanentDeleteMembersByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.PermanentDeleteMembersByUser(userId)

}

func (s *OpenTracingLayerChannelStore) RemoveAllDeactivatedMembers(channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.RemoveAllDeactivatedMembers")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelStore.RemoveAllDeactivatedMembers(channelId)

}

func (s *OpenTracingLayerChannelStore) RemoveMember(channelId string, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.RemoveMember")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.RemoveMember(channelId, userId)

}

func (s *OpenTracingLayerChannelStore) ResetAllChannelSchemes() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.ResetAllChannelSchemes")

	defer span.Finish()

	return s.ChannelStore.ResetAllChannelSchemes()

}

func (s *OpenTracingLayerChannelStore) Restore(channelId string, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.Restore")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.ChannelStore.Restore(channelId, time)

}

func (s *OpenTracingLayerChannelStore) Save(channel *model.Channel, maxChannelsPerTeam int64) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.Save")

	span.SetTag("channel", channel)

	span.SetTag("maxChannelsPerTeam", maxChannelsPerTeam)

	defer span.Finish()

	return s.ChannelStore.Save(channel, maxChannelsPerTeam)

}

func (s *OpenTracingLayerChannelStore) SaveDirectChannel(channel *model.Channel, member1 *model.ChannelMember, member2 *model.ChannelMember) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SaveDirectChannel")

	span.SetTag("channel", channel)

	span.SetTag("member1", member1)

	span.SetTag("member2", member2)

	defer span.Finish()

	return s.ChannelStore.SaveDirectChannel(channel, member1, member2)

}

func (s *OpenTracingLayerChannelStore) SaveMember(member *model.ChannelMember) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SaveMember")

	span.SetTag("member", member)

	defer span.Finish()

	return s.ChannelStore.SaveMember(member)

}

func (s *OpenTracingLayerChannelStore) SearchAllChannels(term string, opts ChannelSearchOpts) (*model.ChannelListWithTeamData, int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SearchAllChannels")

	span.SetTag("term", term)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.ChannelStore.SearchAllChannels(term, opts)

}

func (s *OpenTracingLayerChannelStore) SearchArchivedInTeam(teamId string, term string, userId string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SearchArchivedInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.SearchArchivedInTeam(teamId, term, userId)

}

func (s *OpenTracingLayerChannelStore) SearchForUserInTeam(userId string, teamId string, term string, includeDeleted bool) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SearchForUserInTeam")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.ChannelStore.SearchForUserInTeam(userId, teamId, term, includeDeleted)

}

func (s *OpenTracingLayerChannelStore) SearchGroupChannels(userId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SearchGroupChannels")

	span.SetTag("userId", userId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.ChannelStore.SearchGroupChannels(userId, term)

}

func (s *OpenTracingLayerChannelStore) SearchInTeam(teamId string, term string, includeDeleted bool) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SearchInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.ChannelStore.SearchInTeam(teamId, term, includeDeleted)

}

func (s *OpenTracingLayerChannelStore) SearchMore(userId string, teamId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SearchMore")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.ChannelStore.SearchMore(userId, teamId, term)

}

func (s *OpenTracingLayerChannelStore) SetDeleteAt(channelId string, deleteAt int64, updateAt int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.SetDeleteAt")

	span.SetTag("channelId", channelId)

	span.SetTag("deleteAt", deleteAt)

	span.SetTag("updateAt", updateAt)

	defer span.Finish()

	return s.ChannelStore.SetDeleteAt(channelId, deleteAt, updateAt)

}

func (s *OpenTracingLayerChannelStore) Update(channel *model.Channel) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.Update")

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.ChannelStore.Update(channel)

}

func (s *OpenTracingLayerChannelStore) UpdateLastViewedAt(channelIds []string, userId string) (map[string]int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.UpdateLastViewedAt")

	span.SetTag("channelIds", channelIds)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.ChannelStore.UpdateLastViewedAt(channelIds, userId)

}

func (s *OpenTracingLayerChannelStore) UpdateLastViewedAtPost(unreadPost *model.Post, userID string, mentionCount int) (*model.ChannelUnreadAt, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.UpdateLastViewedAtPost")

	span.SetTag("unreadPost", unreadPost)

	span.SetTag("userID", userID)

	span.SetTag("mentionCount", mentionCount)

	defer span.Finish()

	return s.ChannelStore.UpdateLastViewedAtPost(unreadPost, userID, mentionCount)

}

func (s *OpenTracingLayerChannelStore) UpdateMember(member *model.ChannelMember) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.UpdateMember")

	span.SetTag("member", member)

	defer span.Finish()

	return s.ChannelStore.UpdateMember(member)

}

func (s *OpenTracingLayerChannelStore) UpdateMembersRole(channelID string, userIDs []string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.UpdateMembersRole")

	span.SetTag("channelID", channelID)

	span.SetTag("userIDs", userIDs)

	defer span.Finish()

	return s.ChannelStore.UpdateMembersRole(channelID, userIDs)

}

func (s *OpenTracingLayerChannelStore) UserBelongsToChannels(userId string, channelIds []string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelStore.UserBelongsToChannels")

	span.SetTag("userId", userId)

	span.SetTag("channelIds", channelIds)

	defer span.Finish()

	return s.ChannelStore.UserBelongsToChannels(userId, channelIds)

}

func (s *OpenTracingLayerChannelMemberHistoryStore) GetUsersInChannelDuring(startTime int64, endTime int64, channelId string) ([]*model.ChannelMemberHistoryResult, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelMemberHistoryStore.GetUsersInChannelDuring")

	span.SetTag("startTime", startTime)

	span.SetTag("endTime", endTime)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.ChannelMemberHistoryStore.GetUsersInChannelDuring(startTime, endTime, channelId)

}

func (s *OpenTracingLayerChannelMemberHistoryStore) LogJoinEvent(userId string, channelId string, joinTime int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelMemberHistoryStore.LogJoinEvent")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	span.SetTag("joinTime", joinTime)

	defer span.Finish()

	return s.ChannelMemberHistoryStore.LogJoinEvent(userId, channelId, joinTime)

}

func (s *OpenTracingLayerChannelMemberHistoryStore) LogLeaveEvent(userId string, channelId string, leaveTime int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelMemberHistoryStore.LogLeaveEvent")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	span.SetTag("leaveTime", leaveTime)

	defer span.Finish()

	return s.ChannelMemberHistoryStore.LogLeaveEvent(userId, channelId, leaveTime)

}

func (s *OpenTracingLayerChannelMemberHistoryStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ChannelMemberHistoryStore.PermanentDeleteBatch")

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ChannelMemberHistoryStore.PermanentDeleteBatch(endTime, limit)

}

func (s *OpenTracingLayerClusterDiscoveryStore) Cleanup() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ClusterDiscoveryStore.Cleanup")

	defer span.Finish()

	return s.ClusterDiscoveryStore.Cleanup()

}

func (s *OpenTracingLayerClusterDiscoveryStore) Delete(discovery *model.ClusterDiscovery) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ClusterDiscoveryStore.Delete")

	span.SetTag("discovery", discovery)

	defer span.Finish()

	return s.ClusterDiscoveryStore.Delete(discovery)

}

func (s *OpenTracingLayerClusterDiscoveryStore) Exists(discovery *model.ClusterDiscovery) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ClusterDiscoveryStore.Exists")

	span.SetTag("discovery", discovery)

	defer span.Finish()

	return s.ClusterDiscoveryStore.Exists(discovery)

}

func (s *OpenTracingLayerClusterDiscoveryStore) GetAll(discoveryType string, clusterName string) ([]*model.ClusterDiscovery, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ClusterDiscoveryStore.GetAll")

	span.SetTag("discoveryType", discoveryType)

	span.SetTag("clusterName", clusterName)

	defer span.Finish()

	return s.ClusterDiscoveryStore.GetAll(discoveryType, clusterName)

}

func (s *OpenTracingLayerClusterDiscoveryStore) Save(discovery *model.ClusterDiscovery) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ClusterDiscoveryStore.Save")

	span.SetTag("discovery", discovery)

	defer span.Finish()

	return s.ClusterDiscoveryStore.Save(discovery)

}

func (s *OpenTracingLayerClusterDiscoveryStore) SetLastPingAt(discovery *model.ClusterDiscovery) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ClusterDiscoveryStore.SetLastPingAt")

	span.SetTag("discovery", discovery)

	defer span.Finish()

	return s.ClusterDiscoveryStore.SetLastPingAt(discovery)

}

func (s *OpenTracingLayerCommandStore) AnalyticsCommandCount(teamId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.AnalyticsCommandCount")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.CommandStore.AnalyticsCommandCount(teamId)

}

func (s *OpenTracingLayerCommandStore) Delete(commandId string, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.Delete")

	span.SetTag("commandId", commandId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.CommandStore.Delete(commandId, time)

}

func (s *OpenTracingLayerCommandStore) Get(id string) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.CommandStore.Get(id)

}

func (s *OpenTracingLayerCommandStore) GetByTeam(teamId string) ([]*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.GetByTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.CommandStore.GetByTeam(teamId)

}

func (s *OpenTracingLayerCommandStore) GetByTrigger(teamId string, trigger string) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.GetByTrigger")

	span.SetTag("teamId", teamId)

	span.SetTag("trigger", trigger)

	defer span.Finish()

	return s.CommandStore.GetByTrigger(teamId, trigger)

}

func (s *OpenTracingLayerCommandStore) PermanentDeleteByTeam(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.PermanentDeleteByTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.CommandStore.PermanentDeleteByTeam(teamId)

}

func (s *OpenTracingLayerCommandStore) PermanentDeleteByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.PermanentDeleteByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.CommandStore.PermanentDeleteByUser(userId)

}

func (s *OpenTracingLayerCommandStore) Save(webhook *model.Command) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.Save")

	span.SetTag("webhook", webhook)

	defer span.Finish()

	return s.CommandStore.Save(webhook)

}

func (s *OpenTracingLayerCommandStore) Update(hook *model.Command) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandStore.Update")

	span.SetTag("hook", hook)

	defer span.Finish()

	return s.CommandStore.Update(hook)

}

func (s *OpenTracingLayerCommandWebhookStore) Cleanup() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandWebhookStore.Cleanup")

	defer span.Finish()

	s.CommandWebhookStore.Cleanup()

}

func (s *OpenTracingLayerCommandWebhookStore) Get(id string) (*model.CommandWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandWebhookStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.CommandWebhookStore.Get(id)

}

func (s *OpenTracingLayerCommandWebhookStore) Save(webhook *model.CommandWebhook) (*model.CommandWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandWebhookStore.Save")

	span.SetTag("webhook", webhook)

	defer span.Finish()

	return s.CommandWebhookStore.Save(webhook)

}

func (s *OpenTracingLayerCommandWebhookStore) TryUse(id string, limit int) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "CommandWebhookStore.TryUse")

	span.SetTag("id", id)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.CommandWebhookStore.TryUse(id, limit)

}

func (s *OpenTracingLayerComplianceStore) ComplianceExport(compliance *model.Compliance) ([]*model.CompliancePost, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ComplianceStore.ComplianceExport")

	span.SetTag("compliance", compliance)

	defer span.Finish()

	return s.ComplianceStore.ComplianceExport(compliance)

}

func (s *OpenTracingLayerComplianceStore) Get(id string) (*model.Compliance, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ComplianceStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.ComplianceStore.Get(id)

}

func (s *OpenTracingLayerComplianceStore) GetAll(offset int, limit int) (model.Compliances, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ComplianceStore.GetAll")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ComplianceStore.GetAll(offset, limit)

}

func (s *OpenTracingLayerComplianceStore) MessageExport(after int64, limit int) ([]*model.MessageExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ComplianceStore.MessageExport")

	span.SetTag("after", after)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ComplianceStore.MessageExport(after, limit)

}

func (s *OpenTracingLayerComplianceStore) Save(compliance *model.Compliance) (*model.Compliance, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ComplianceStore.Save")

	span.SetTag("compliance", compliance)

	defer span.Finish()

	return s.ComplianceStore.Save(compliance)

}

func (s *OpenTracingLayerComplianceStore) Update(compliance *model.Compliance) (*model.Compliance, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ComplianceStore.Update")

	span.SetTag("compliance", compliance)

	defer span.Finish()

	return s.ComplianceStore.Update(compliance)

}

func (s *OpenTracingLayerEmojiStore) Delete(emoji *model.Emoji, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.Delete")

	span.SetTag("emoji", emoji)

	span.SetTag("time", time)

	defer span.Finish()

	return s.EmojiStore.Delete(emoji, time)

}

func (s *OpenTracingLayerEmojiStore) Get(id string, allowFromCache bool) (*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.Get")

	span.SetTag("id", id)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.EmojiStore.Get(id, allowFromCache)

}

func (s *OpenTracingLayerEmojiStore) GetByName(name string, allowFromCache bool) (*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.GetByName")

	span.SetTag("name", name)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.EmojiStore.GetByName(name, allowFromCache)

}

func (s *OpenTracingLayerEmojiStore) GetList(offset int, limit int, sort string) ([]*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.GetList")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("sort", sort)

	defer span.Finish()

	return s.EmojiStore.GetList(offset, limit, sort)

}

func (s *OpenTracingLayerEmojiStore) GetMultipleByName(names []string) ([]*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.GetMultipleByName")

	span.SetTag("names", names)

	defer span.Finish()

	return s.EmojiStore.GetMultipleByName(names)

}

func (s *OpenTracingLayerEmojiStore) Save(emoji *model.Emoji) (*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.Save")

	span.SetTag("emoji", emoji)

	defer span.Finish()

	return s.EmojiStore.Save(emoji)

}

func (s *OpenTracingLayerEmojiStore) Search(name string, prefixOnly bool, limit int) ([]*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "EmojiStore.Search")

	span.SetTag("name", name)

	span.SetTag("prefixOnly", prefixOnly)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.EmojiStore.Search(name, prefixOnly, limit)

}

func (s *OpenTracingLayerFileInfoStore) AttachToPost(fileId string, postId string, creatorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.AttachToPost")

	span.SetTag("fileId", fileId)

	span.SetTag("postId", postId)

	span.SetTag("creatorId", creatorId)

	defer span.Finish()

	return s.FileInfoStore.AttachToPost(fileId, postId, creatorId)

}

func (s *OpenTracingLayerFileInfoStore) ClearCaches() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.ClearCaches")

	defer span.Finish()

	s.FileInfoStore.ClearCaches()

}

func (s *OpenTracingLayerFileInfoStore) DeleteForPost(postId string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.DeleteForPost")

	span.SetTag("postId", postId)

	defer span.Finish()

	return s.FileInfoStore.DeleteForPost(postId)

}

func (s *OpenTracingLayerFileInfoStore) Get(id string) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.FileInfoStore.Get(id)

}

func (s *OpenTracingLayerFileInfoStore) GetByPath(path string) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.GetByPath")

	span.SetTag("path", path)

	defer span.Finish()

	return s.FileInfoStore.GetByPath(path)

}

func (s *OpenTracingLayerFileInfoStore) GetForPost(postId string, readFromMaster bool, includeDeleted bool, allowFromCache bool) ([]*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.GetForPost")

	span.SetTag("postId", postId)

	span.SetTag("readFromMaster", readFromMaster)

	span.SetTag("includeDeleted", includeDeleted)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.FileInfoStore.GetForPost(postId, readFromMaster, includeDeleted, allowFromCache)

}

func (s *OpenTracingLayerFileInfoStore) GetForUser(userId string) ([]*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.GetForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.FileInfoStore.GetForUser(userId)

}

func (s *OpenTracingLayerFileInfoStore) InvalidateFileInfosForPostCache(postId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.InvalidateFileInfosForPostCache")

	span.SetTag("postId", postId)

	defer span.Finish()

	s.FileInfoStore.InvalidateFileInfosForPostCache(postId)

}

func (s *OpenTracingLayerFileInfoStore) PermanentDelete(fileId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.PermanentDelete")

	span.SetTag("fileId", fileId)

	defer span.Finish()

	return s.FileInfoStore.PermanentDelete(fileId)

}

func (s *OpenTracingLayerFileInfoStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.PermanentDeleteBatch")

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.FileInfoStore.PermanentDeleteBatch(endTime, limit)

}

func (s *OpenTracingLayerFileInfoStore) PermanentDeleteByUser(userId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.PermanentDeleteByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.FileInfoStore.PermanentDeleteByUser(userId)

}

func (s *OpenTracingLayerFileInfoStore) Save(info *model.FileInfo) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "FileInfoStore.Save")

	span.SetTag("info", info)

	defer span.Finish()

	return s.FileInfoStore.Save(info)

}

func (s *OpenTracingLayerGroupStore) AdminRoleGroupsForSyncableMember(userID string, syncableID string, syncableType model.GroupSyncableType) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.AdminRoleGroupsForSyncableMember")

	span.SetTag("userID", userID)

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.GroupStore.AdminRoleGroupsForSyncableMember(userID, syncableID, syncableType)

}

func (s *OpenTracingLayerGroupStore) ChannelMembersMinusGroupMembers(channelID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.ChannelMembersMinusGroupMembers")

	span.SetTag("channelID", channelID)

	span.SetTag("groupIDs", groupIDs)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.GroupStore.ChannelMembersMinusGroupMembers(channelID, groupIDs, page, perPage)

}

func (s *OpenTracingLayerGroupStore) ChannelMembersToAdd(since int64, channelID *string) ([]*model.UserChannelIDPair, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.ChannelMembersToAdd")

	span.SetTag("since", since)

	span.SetTag("channelID", channelID)

	defer span.Finish()

	return s.GroupStore.ChannelMembersToAdd(since, channelID)

}

func (s *OpenTracingLayerGroupStore) ChannelMembersToRemove(channelID *string) ([]*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.ChannelMembersToRemove")

	span.SetTag("channelID", channelID)

	defer span.Finish()

	return s.GroupStore.ChannelMembersToRemove(channelID)

}

func (s *OpenTracingLayerGroupStore) CountChannelMembersMinusGroupMembers(channelID string, groupIDs []string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.CountChannelMembersMinusGroupMembers")

	span.SetTag("channelID", channelID)

	span.SetTag("groupIDs", groupIDs)

	defer span.Finish()

	return s.GroupStore.CountChannelMembersMinusGroupMembers(channelID, groupIDs)

}

func (s *OpenTracingLayerGroupStore) CountGroupsByChannel(channelId string, opts model.GroupSearchOpts) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.CountGroupsByChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.GroupStore.CountGroupsByChannel(channelId, opts)

}

func (s *OpenTracingLayerGroupStore) CountGroupsByTeam(teamId string, opts model.GroupSearchOpts) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.CountGroupsByTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.GroupStore.CountGroupsByTeam(teamId, opts)

}

func (s *OpenTracingLayerGroupStore) CountTeamMembersMinusGroupMembers(teamID string, groupIDs []string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.CountTeamMembersMinusGroupMembers")

	span.SetTag("teamID", teamID)

	span.SetTag("groupIDs", groupIDs)

	defer span.Finish()

	return s.GroupStore.CountTeamMembersMinusGroupMembers(teamID, groupIDs)

}

func (s *OpenTracingLayerGroupStore) Create(group *model.Group) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.Create")

	span.SetTag("group", group)

	defer span.Finish()

	return s.GroupStore.Create(group)

}

func (s *OpenTracingLayerGroupStore) CreateGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.CreateGroupSyncable")

	span.SetTag("groupSyncable", groupSyncable)

	defer span.Finish()

	return s.GroupStore.CreateGroupSyncable(groupSyncable)

}

func (s *OpenTracingLayerGroupStore) Delete(groupID string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.Delete")

	span.SetTag("groupID", groupID)

	defer span.Finish()

	return s.GroupStore.Delete(groupID)

}

func (s *OpenTracingLayerGroupStore) DeleteGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.DeleteGroupSyncable")

	span.SetTag("groupID", groupID)

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.GroupStore.DeleteGroupSyncable(groupID, syncableID, syncableType)

}

func (s *OpenTracingLayerGroupStore) DeleteMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.DeleteMember")

	span.SetTag("groupID", groupID)

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.GroupStore.DeleteMember(groupID, userID)

}

func (s *OpenTracingLayerGroupStore) Get(groupID string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.Get")

	span.SetTag("groupID", groupID)

	defer span.Finish()

	return s.GroupStore.Get(groupID)

}

func (s *OpenTracingLayerGroupStore) GetAllBySource(groupSource model.GroupSource) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetAllBySource")

	span.SetTag("groupSource", groupSource)

	defer span.Finish()

	return s.GroupStore.GetAllBySource(groupSource)

}

func (s *OpenTracingLayerGroupStore) GetAllGroupSyncablesByGroupId(groupID string, syncableType model.GroupSyncableType) ([]*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetAllGroupSyncablesByGroupId")

	span.SetTag("groupID", groupID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.GroupStore.GetAllGroupSyncablesByGroupId(groupID, syncableType)

}

func (s *OpenTracingLayerGroupStore) GetByIDs(groupIDs []string) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetByIDs")

	span.SetTag("groupIDs", groupIDs)

	defer span.Finish()

	return s.GroupStore.GetByIDs(groupIDs)

}

func (s *OpenTracingLayerGroupStore) GetByName(name string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.GroupStore.GetByName(name)

}

func (s *OpenTracingLayerGroupStore) GetByRemoteID(remoteID string, groupSource model.GroupSource) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetByRemoteID")

	span.SetTag("remoteID", remoteID)

	span.SetTag("groupSource", groupSource)

	defer span.Finish()

	return s.GroupStore.GetByRemoteID(remoteID, groupSource)

}

func (s *OpenTracingLayerGroupStore) GetByUser(userId string) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.GroupStore.GetByUser(userId)

}

func (s *OpenTracingLayerGroupStore) GetGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetGroupSyncable")

	span.SetTag("groupID", groupID)

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.GroupStore.GetGroupSyncable(groupID, syncableID, syncableType)

}

func (s *OpenTracingLayerGroupStore) GetGroups(page int, perPage int, opts model.GroupSearchOpts) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetGroups")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.GroupStore.GetGroups(page, perPage, opts)

}

func (s *OpenTracingLayerGroupStore) GetGroupsByChannel(channelId string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetGroupsByChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.GroupStore.GetGroupsByChannel(channelId, opts)

}

func (s *OpenTracingLayerGroupStore) GetGroupsByTeam(teamId string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetGroupsByTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.GroupStore.GetGroupsByTeam(teamId, opts)

}

func (s *OpenTracingLayerGroupStore) GetMemberCount(groupID string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetMemberCount")

	span.SetTag("groupID", groupID)

	defer span.Finish()

	return s.GroupStore.GetMemberCount(groupID)

}

func (s *OpenTracingLayerGroupStore) GetMemberUsers(groupID string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetMemberUsers")

	span.SetTag("groupID", groupID)

	defer span.Finish()

	return s.GroupStore.GetMemberUsers(groupID)

}

func (s *OpenTracingLayerGroupStore) GetMemberUsersPage(groupID string, page int, perPage int) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.GetMemberUsersPage")

	span.SetTag("groupID", groupID)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.GroupStore.GetMemberUsersPage(groupID, page, perPage)

}

func (s *OpenTracingLayerGroupStore) PermanentDeleteMembersByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.PermanentDeleteMembersByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.GroupStore.PermanentDeleteMembersByUser(userId)

}

func (s *OpenTracingLayerGroupStore) PermittedSyncableAdmins(syncableID string, syncableType model.GroupSyncableType) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.PermittedSyncableAdmins")

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.GroupStore.PermittedSyncableAdmins(syncableID, syncableType)

}

func (s *OpenTracingLayerGroupStore) TeamMembersMinusGroupMembers(teamID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.TeamMembersMinusGroupMembers")

	span.SetTag("teamID", teamID)

	span.SetTag("groupIDs", groupIDs)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.GroupStore.TeamMembersMinusGroupMembers(teamID, groupIDs, page, perPage)

}

func (s *OpenTracingLayerGroupStore) TeamMembersToAdd(since int64, teamID *string) ([]*model.UserTeamIDPair, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.TeamMembersToAdd")

	span.SetTag("since", since)

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.GroupStore.TeamMembersToAdd(since, teamID)

}

func (s *OpenTracingLayerGroupStore) TeamMembersToRemove(teamID *string) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.TeamMembersToRemove")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.GroupStore.TeamMembersToRemove(teamID)

}

func (s *OpenTracingLayerGroupStore) Update(group *model.Group) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.Update")

	span.SetTag("group", group)

	defer span.Finish()

	return s.GroupStore.Update(group)

}

func (s *OpenTracingLayerGroupStore) UpdateGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.UpdateGroupSyncable")

	span.SetTag("groupSyncable", groupSyncable)

	defer span.Finish()

	return s.GroupStore.UpdateGroupSyncable(groupSyncable)

}

func (s *OpenTracingLayerGroupStore) UpsertMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "GroupStore.UpsertMember")

	span.SetTag("groupID", groupID)

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.GroupStore.UpsertMember(groupID, userID)

}

func (s *OpenTracingLayerJobStore) Delete(id string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.Delete")

	span.SetTag("id", id)

	defer span.Finish()

	return s.JobStore.Delete(id)

}

func (s *OpenTracingLayerJobStore) Get(id string) (*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.JobStore.Get(id)

}

func (s *OpenTracingLayerJobStore) GetAllByStatus(status string) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.GetAllByStatus")

	span.SetTag("status", status)

	defer span.Finish()

	return s.JobStore.GetAllByStatus(status)

}

func (s *OpenTracingLayerJobStore) GetAllByType(jobType string) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.GetAllByType")

	span.SetTag("jobType", jobType)

	defer span.Finish()

	return s.JobStore.GetAllByType(jobType)

}

func (s *OpenTracingLayerJobStore) GetAllByTypePage(jobType string, offset int, limit int) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.GetAllByTypePage")

	span.SetTag("jobType", jobType)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.JobStore.GetAllByTypePage(jobType, offset, limit)

}

func (s *OpenTracingLayerJobStore) GetAllPage(offset int, limit int) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.GetAllPage")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.JobStore.GetAllPage(offset, limit)

}

func (s *OpenTracingLayerJobStore) GetCountByStatusAndType(status string, jobType string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.GetCountByStatusAndType")

	span.SetTag("status", status)

	span.SetTag("jobType", jobType)

	defer span.Finish()

	return s.JobStore.GetCountByStatusAndType(status, jobType)

}

func (s *OpenTracingLayerJobStore) GetNewestJobByStatusAndType(status string, jobType string) (*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.GetNewestJobByStatusAndType")

	span.SetTag("status", status)

	span.SetTag("jobType", jobType)

	defer span.Finish()

	return s.JobStore.GetNewestJobByStatusAndType(status, jobType)

}

func (s *OpenTracingLayerJobStore) Save(job *model.Job) (*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.Save")

	span.SetTag("job", job)

	defer span.Finish()

	return s.JobStore.Save(job)

}

func (s *OpenTracingLayerJobStore) UpdateOptimistically(job *model.Job, currentStatus string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.UpdateOptimistically")

	span.SetTag("job", job)

	span.SetTag("currentStatus", currentStatus)

	defer span.Finish()

	return s.JobStore.UpdateOptimistically(job, currentStatus)

}

func (s *OpenTracingLayerJobStore) UpdateStatus(id string, status string) (*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.UpdateStatus")

	span.SetTag("id", id)

	span.SetTag("status", status)

	defer span.Finish()

	return s.JobStore.UpdateStatus(id, status)

}

func (s *OpenTracingLayerJobStore) UpdateStatusOptimistically(id string, currentStatus string, newStatus string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "JobStore.UpdateStatusOptimistically")

	span.SetTag("id", id)

	span.SetTag("currentStatus", currentStatus)

	span.SetTag("newStatus", newStatus)

	defer span.Finish()

	return s.JobStore.UpdateStatusOptimistically(id, currentStatus, newStatus)

}

func (s *OpenTracingLayerLicenseStore) Get(id string) (*model.LicenseRecord, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "LicenseStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.LicenseStore.Get(id)

}

func (s *OpenTracingLayerLicenseStore) Save(license *model.LicenseRecord) (*model.LicenseRecord, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "LicenseStore.Save")

	span.SetTag("license", license)

	defer span.Finish()

	return s.LicenseStore.Save(license)

}

func (s *OpenTracingLayerLinkMetadataStore) Get(url string, timestamp int64) (*model.LinkMetadata, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "LinkMetadataStore.Get")

	span.SetTag("url", url)

	span.SetTag("timestamp", timestamp)

	defer span.Finish()

	return s.LinkMetadataStore.Get(url, timestamp)

}

func (s *OpenTracingLayerLinkMetadataStore) Save(linkMetadata *model.LinkMetadata) (*model.LinkMetadata, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "LinkMetadataStore.Save")

	span.SetTag("linkMetadata", linkMetadata)

	defer span.Finish()

	return s.LinkMetadataStore.Save(linkMetadata)

}

func (s *OpenTracingLayerOAuthStore) DeleteApp(id string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.DeleteApp")

	span.SetTag("id", id)

	defer span.Finish()

	return s.OAuthStore.DeleteApp(id)

}

func (s *OpenTracingLayerOAuthStore) GetAccessData(token string) (*model.AccessData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetAccessData")

	span.SetTag("token", token)

	defer span.Finish()

	return s.OAuthStore.GetAccessData(token)

}

func (s *OpenTracingLayerOAuthStore) GetAccessDataByRefreshToken(token string) (*model.AccessData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetAccessDataByRefreshToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.OAuthStore.GetAccessDataByRefreshToken(token)

}

func (s *OpenTracingLayerOAuthStore) GetAccessDataByUserForApp(userId string, clientId string) ([]*model.AccessData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetAccessDataByUserForApp")

	span.SetTag("userId", userId)

	span.SetTag("clientId", clientId)

	defer span.Finish()

	return s.OAuthStore.GetAccessDataByUserForApp(userId, clientId)

}

func (s *OpenTracingLayerOAuthStore) GetApp(id string) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetApp")

	span.SetTag("id", id)

	defer span.Finish()

	return s.OAuthStore.GetApp(id)

}

func (s *OpenTracingLayerOAuthStore) GetAppByUser(userId string, offset int, limit int) ([]*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetAppByUser")

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.OAuthStore.GetAppByUser(userId, offset, limit)

}

func (s *OpenTracingLayerOAuthStore) GetApps(offset int, limit int) ([]*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetApps")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.OAuthStore.GetApps(offset, limit)

}

func (s *OpenTracingLayerOAuthStore) GetAuthData(code string) (*model.AuthData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetAuthData")

	span.SetTag("code", code)

	defer span.Finish()

	return s.OAuthStore.GetAuthData(code)

}

func (s *OpenTracingLayerOAuthStore) GetAuthorizedApps(userId string, offset int, limit int) ([]*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetAuthorizedApps")

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.OAuthStore.GetAuthorizedApps(userId, offset, limit)

}

func (s *OpenTracingLayerOAuthStore) GetPreviousAccessData(userId string, clientId string) (*model.AccessData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.GetPreviousAccessData")

	span.SetTag("userId", userId)

	span.SetTag("clientId", clientId)

	defer span.Finish()

	return s.OAuthStore.GetPreviousAccessData(userId, clientId)

}

func (s *OpenTracingLayerOAuthStore) PermanentDeleteAuthDataByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.PermanentDeleteAuthDataByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.OAuthStore.PermanentDeleteAuthDataByUser(userId)

}

func (s *OpenTracingLayerOAuthStore) RemoveAccessData(token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.RemoveAccessData")

	span.SetTag("token", token)

	defer span.Finish()

	return s.OAuthStore.RemoveAccessData(token)

}

func (s *OpenTracingLayerOAuthStore) RemoveAllAccessData() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.RemoveAllAccessData")

	defer span.Finish()

	return s.OAuthStore.RemoveAllAccessData()

}

func (s *OpenTracingLayerOAuthStore) RemoveAuthData(code string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.RemoveAuthData")

	span.SetTag("code", code)

	defer span.Finish()

	return s.OAuthStore.RemoveAuthData(code)

}

func (s *OpenTracingLayerOAuthStore) SaveAccessData(accessData *model.AccessData) (*model.AccessData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.SaveAccessData")

	span.SetTag("accessData", accessData)

	defer span.Finish()

	return s.OAuthStore.SaveAccessData(accessData)

}

func (s *OpenTracingLayerOAuthStore) SaveApp(app *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.SaveApp")

	span.SetTag("app", app)

	defer span.Finish()

	return s.OAuthStore.SaveApp(app)

}

func (s *OpenTracingLayerOAuthStore) SaveAuthData(authData *model.AuthData) (*model.AuthData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.SaveAuthData")

	span.SetTag("authData", authData)

	defer span.Finish()

	return s.OAuthStore.SaveAuthData(authData)

}

func (s *OpenTracingLayerOAuthStore) UpdateAccessData(accessData *model.AccessData) (*model.AccessData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.UpdateAccessData")

	span.SetTag("accessData", accessData)

	defer span.Finish()

	return s.OAuthStore.UpdateAccessData(accessData)

}

func (s *OpenTracingLayerOAuthStore) UpdateApp(app *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "OAuthStore.UpdateApp")

	span.SetTag("app", app)

	defer span.Finish()

	return s.OAuthStore.UpdateApp(app)

}

func (s *OpenTracingLayerPluginStore) CompareAndDelete(keyVal *model.PluginKeyValue, oldValue []byte) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.CompareAndDelete")

	span.SetTag("keyVal", keyVal)

	span.SetTag("oldValue", oldValue)

	defer span.Finish()

	return s.PluginStore.CompareAndDelete(keyVal, oldValue)

}

func (s *OpenTracingLayerPluginStore) CompareAndSet(keyVal *model.PluginKeyValue, oldValue []byte) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.CompareAndSet")

	span.SetTag("keyVal", keyVal)

	span.SetTag("oldValue", oldValue)

	defer span.Finish()

	return s.PluginStore.CompareAndSet(keyVal, oldValue)

}

func (s *OpenTracingLayerPluginStore) Delete(pluginId string, key string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.Delete")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	defer span.Finish()

	return s.PluginStore.Delete(pluginId, key)

}

func (s *OpenTracingLayerPluginStore) DeleteAllExpired() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.DeleteAllExpired")

	defer span.Finish()

	return s.PluginStore.DeleteAllExpired()

}

func (s *OpenTracingLayerPluginStore) DeleteAllForPlugin(PluginId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.DeleteAllForPlugin")

	span.SetTag("PluginId", PluginId)

	defer span.Finish()

	return s.PluginStore.DeleteAllForPlugin(PluginId)

}

func (s *OpenTracingLayerPluginStore) Get(pluginId string, key string) (*model.PluginKeyValue, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.Get")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	defer span.Finish()

	return s.PluginStore.Get(pluginId, key)

}

func (s *OpenTracingLayerPluginStore) List(pluginId string, page int, perPage int) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.List")

	span.SetTag("pluginId", pluginId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.PluginStore.List(pluginId, page, perPage)

}

func (s *OpenTracingLayerPluginStore) SaveOrUpdate(keyVal *model.PluginKeyValue) (*model.PluginKeyValue, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.SaveOrUpdate")

	span.SetTag("keyVal", keyVal)

	defer span.Finish()

	return s.PluginStore.SaveOrUpdate(keyVal)

}

func (s *OpenTracingLayerPluginStore) SetWithOptions(pluginId string, key string, value []byte, options model.PluginKVSetOptions) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PluginStore.SetWithOptions")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	span.SetTag("value", value)

	span.SetTag("options", options)

	defer span.Finish()

	return s.PluginStore.SetWithOptions(pluginId, key, value, options)

}

func (s *OpenTracingLayerPostStore) AnalyticsPostCount(teamId string, mustHaveFile bool, mustHaveHashtag bool) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.AnalyticsPostCount")

	span.SetTag("teamId", teamId)

	span.SetTag("mustHaveFile", mustHaveFile)

	span.SetTag("mustHaveHashtag", mustHaveHashtag)

	defer span.Finish()

	return s.PostStore.AnalyticsPostCount(teamId, mustHaveFile, mustHaveHashtag)

}

func (s *OpenTracingLayerPostStore) AnalyticsPostCountsByDay(options *model.AnalyticsPostCountsOptions) (model.AnalyticsRows, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.AnalyticsPostCountsByDay")

	span.SetTag("options", options)

	defer span.Finish()

	return s.PostStore.AnalyticsPostCountsByDay(options)

}

func (s *OpenTracingLayerPostStore) AnalyticsUserCountsWithPostsByDay(teamId string) (model.AnalyticsRows, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.AnalyticsUserCountsWithPostsByDay")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.PostStore.AnalyticsUserCountsWithPostsByDay(teamId)

}

func (s *OpenTracingLayerPostStore) ClearCaches() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.ClearCaches")

	defer span.Finish()

	s.PostStore.ClearCaches()

}

func (s *OpenTracingLayerPostStore) Delete(postId string, time int64, deleteByID string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.Delete")

	span.SetTag("postId", postId)

	span.SetTag("time", time)

	span.SetTag("deleteByID", deleteByID)

	defer span.Finish()

	return s.PostStore.Delete(postId, time, deleteByID)

}

func (s *OpenTracingLayerPostStore) Get(id string) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.PostStore.Get(id)

}

func (s *OpenTracingLayerPostStore) GetDirectPostParentsForExportAfter(limit int, afterId string) ([]*model.DirectPostForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetDirectPostParentsForExportAfter")

	span.SetTag("limit", limit)

	span.SetTag("afterId", afterId)

	defer span.Finish()

	return s.PostStore.GetDirectPostParentsForExportAfter(limit, afterId)

}

func (s *OpenTracingLayerPostStore) GetEtag(channelId string, allowFromCache bool) string {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetEtag")

	span.SetTag("channelId", channelId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.PostStore.GetEtag(channelId, allowFromCache)

}

func (s *OpenTracingLayerPostStore) GetFlaggedPosts(userId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetFlaggedPosts")

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.PostStore.GetFlaggedPosts(userId, offset, limit)

}

func (s *OpenTracingLayerPostStore) GetFlaggedPostsForChannel(userId string, channelId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetFlaggedPostsForChannel")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.PostStore.GetFlaggedPostsForChannel(userId, channelId, offset, limit)

}

func (s *OpenTracingLayerPostStore) GetFlaggedPostsForTeam(userId string, teamId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetFlaggedPostsForTeam")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.PostStore.GetFlaggedPostsForTeam(userId, teamId, offset, limit)

}

func (s *OpenTracingLayerPostStore) GetMaxPostSize() int {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetMaxPostSize")

	defer span.Finish()

	return s.PostStore.GetMaxPostSize()

}

func (s *OpenTracingLayerPostStore) GetOldest() (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetOldest")

	defer span.Finish()

	return s.PostStore.GetOldest()

}

func (s *OpenTracingLayerPostStore) GetParentsForExportAfter(limit int, afterId string) ([]*model.PostForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetParentsForExportAfter")

	span.SetTag("limit", limit)

	span.SetTag("afterId", afterId)

	defer span.Finish()

	return s.PostStore.GetParentsForExportAfter(limit, afterId)

}

func (s *OpenTracingLayerPostStore) GetPostAfterTime(channelId string, time int64) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostAfterTime")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.PostStore.GetPostAfterTime(channelId, time)

}

func (s *OpenTracingLayerPostStore) GetPostIdAfterTime(channelId string, time int64) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostIdAfterTime")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.PostStore.GetPostIdAfterTime(channelId, time)

}

func (s *OpenTracingLayerPostStore) GetPostIdBeforeTime(channelId string, time int64) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostIdBeforeTime")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.PostStore.GetPostIdBeforeTime(channelId, time)

}

func (s *OpenTracingLayerPostStore) GetPosts(channelId string, offset int, limit int, allowFromCache bool) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPosts")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.PostStore.GetPosts(channelId, offset, limit, allowFromCache)

}

func (s *OpenTracingLayerPostStore) GetPostsAfter(channelId string, postId string, numPosts int, offset int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostsAfter")

	span.SetTag("channelId", channelId)

	span.SetTag("postId", postId)

	span.SetTag("numPosts", numPosts)

	span.SetTag("offset", offset)

	defer span.Finish()

	return s.PostStore.GetPostsAfter(channelId, postId, numPosts, offset)

}

func (s *OpenTracingLayerPostStore) GetPostsBatchForIndexing(startTime int64, endTime int64, limit int) ([]*model.PostForIndexing, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostsBatchForIndexing")

	span.SetTag("startTime", startTime)

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.PostStore.GetPostsBatchForIndexing(startTime, endTime, limit)

}

func (s *OpenTracingLayerPostStore) GetPostsBefore(channelId string, postId string, numPosts int, offset int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostsBefore")

	span.SetTag("channelId", channelId)

	span.SetTag("postId", postId)

	span.SetTag("numPosts", numPosts)

	span.SetTag("offset", offset)

	defer span.Finish()

	return s.PostStore.GetPostsBefore(channelId, postId, numPosts, offset)

}

func (s *OpenTracingLayerPostStore) GetPostsByIds(postIds []string) ([]*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostsByIds")

	span.SetTag("postIds", postIds)

	defer span.Finish()

	return s.PostStore.GetPostsByIds(postIds)

}

func (s *OpenTracingLayerPostStore) GetPostsCreatedAt(channelId string, time int64) ([]*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostsCreatedAt")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.PostStore.GetPostsCreatedAt(channelId, time)

}

func (s *OpenTracingLayerPostStore) GetPostsSince(channelId string, time int64, allowFromCache bool) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetPostsSince")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.PostStore.GetPostsSince(channelId, time, allowFromCache)

}

func (s *OpenTracingLayerPostStore) GetRepliesForExport(parentId string) ([]*model.ReplyForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetRepliesForExport")

	span.SetTag("parentId", parentId)

	defer span.Finish()

	return s.PostStore.GetRepliesForExport(parentId)

}

func (s *OpenTracingLayerPostStore) GetSingle(id string) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.GetSingle")

	span.SetTag("id", id)

	defer span.Finish()

	return s.PostStore.GetSingle(id)

}

func (s *OpenTracingLayerPostStore) InvalidateLastPostTimeCache(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.InvalidateLastPostTimeCache")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.PostStore.InvalidateLastPostTimeCache(channelId)

}

func (s *OpenTracingLayerPostStore) Overwrite(post *model.Post) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.Overwrite")

	span.SetTag("post", post)

	defer span.Finish()

	return s.PostStore.Overwrite(post)

}

func (s *OpenTracingLayerPostStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.PermanentDeleteBatch")

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.PostStore.PermanentDeleteBatch(endTime, limit)

}

func (s *OpenTracingLayerPostStore) PermanentDeleteByChannel(channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.PermanentDeleteByChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.PostStore.PermanentDeleteByChannel(channelId)

}

func (s *OpenTracingLayerPostStore) PermanentDeleteByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.PermanentDeleteByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.PostStore.PermanentDeleteByUser(userId)

}

func (s *OpenTracingLayerPostStore) Save(post *model.Post) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.Save")

	span.SetTag("post", post)

	defer span.Finish()

	return s.PostStore.Save(post)

}

func (s *OpenTracingLayerPostStore) Search(teamId string, userId string, params *model.SearchParams) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.Search")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("params", params)

	defer span.Finish()

	return s.PostStore.Search(teamId, userId, params)

}

func (s *OpenTracingLayerPostStore) Update(newPost *model.Post, oldPost *model.Post) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PostStore.Update")

	span.SetTag("newPost", newPost)

	span.SetTag("oldPost", oldPost)

	defer span.Finish()

	return s.PostStore.Update(newPost, oldPost)

}

func (s *OpenTracingLayerPreferenceStore) CleanupFlagsBatch(limit int64) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.CleanupFlagsBatch")

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.PreferenceStore.CleanupFlagsBatch(limit)

}

func (s *OpenTracingLayerPreferenceStore) Delete(userId string, category string, name string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.Delete")

	span.SetTag("userId", userId)

	span.SetTag("category", category)

	span.SetTag("name", name)

	defer span.Finish()

	return s.PreferenceStore.Delete(userId, category, name)

}

func (s *OpenTracingLayerPreferenceStore) DeleteCategory(userId string, category string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.DeleteCategory")

	span.SetTag("userId", userId)

	span.SetTag("category", category)

	defer span.Finish()

	return s.PreferenceStore.DeleteCategory(userId, category)

}

func (s *OpenTracingLayerPreferenceStore) DeleteCategoryAndName(category string, name string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.DeleteCategoryAndName")

	span.SetTag("category", category)

	span.SetTag("name", name)

	defer span.Finish()

	return s.PreferenceStore.DeleteCategoryAndName(category, name)

}

func (s *OpenTracingLayerPreferenceStore) Get(userId string, category string, name string) (*model.Preference, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.Get")

	span.SetTag("userId", userId)

	span.SetTag("category", category)

	span.SetTag("name", name)

	defer span.Finish()

	return s.PreferenceStore.Get(userId, category, name)

}

func (s *OpenTracingLayerPreferenceStore) GetAll(userId string) (model.Preferences, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.GetAll")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.PreferenceStore.GetAll(userId)

}

func (s *OpenTracingLayerPreferenceStore) GetCategory(userId string, category string) (model.Preferences, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.GetCategory")

	span.SetTag("userId", userId)

	span.SetTag("category", category)

	defer span.Finish()

	return s.PreferenceStore.GetCategory(userId, category)

}

func (s *OpenTracingLayerPreferenceStore) PermanentDeleteByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.PermanentDeleteByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.PreferenceStore.PermanentDeleteByUser(userId)

}

func (s *OpenTracingLayerPreferenceStore) Save(preferences *model.Preferences) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "PreferenceStore.Save")

	span.SetTag("preferences", preferences)

	defer span.Finish()

	return s.PreferenceStore.Save(preferences)

}

func (s *OpenTracingLayerReactionStore) BulkGetForPosts(postIds []string) ([]*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ReactionStore.BulkGetForPosts")

	span.SetTag("postIds", postIds)

	defer span.Finish()

	return s.ReactionStore.BulkGetForPosts(postIds)

}

func (s *OpenTracingLayerReactionStore) Delete(reaction *model.Reaction) (*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ReactionStore.Delete")

	span.SetTag("reaction", reaction)

	defer span.Finish()

	return s.ReactionStore.Delete(reaction)

}

func (s *OpenTracingLayerReactionStore) DeleteAllWithEmojiName(emojiName string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ReactionStore.DeleteAllWithEmojiName")

	span.SetTag("emojiName", emojiName)

	defer span.Finish()

	return s.ReactionStore.DeleteAllWithEmojiName(emojiName)

}

func (s *OpenTracingLayerReactionStore) GetForPost(postId string, allowFromCache bool) ([]*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ReactionStore.GetForPost")

	span.SetTag("postId", postId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.ReactionStore.GetForPost(postId, allowFromCache)

}

func (s *OpenTracingLayerReactionStore) PermanentDeleteBatch(endTime int64, limit int64) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ReactionStore.PermanentDeleteBatch")

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.ReactionStore.PermanentDeleteBatch(endTime, limit)

}

func (s *OpenTracingLayerReactionStore) Save(reaction *model.Reaction) (*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "ReactionStore.Save")

	span.SetTag("reaction", reaction)

	defer span.Finish()

	return s.ReactionStore.Save(reaction)

}

func (s *OpenTracingLayerRoleStore) Delete(roldId string) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.Delete")

	span.SetTag("roldId", roldId)

	defer span.Finish()

	return s.RoleStore.Delete(roldId)

}

func (s *OpenTracingLayerRoleStore) Get(roleId string) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.Get")

	span.SetTag("roleId", roleId)

	defer span.Finish()

	return s.RoleStore.Get(roleId)

}

func (s *OpenTracingLayerRoleStore) GetAll() ([]*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.GetAll")

	defer span.Finish()

	return s.RoleStore.GetAll()

}

func (s *OpenTracingLayerRoleStore) GetByName(name string) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.GetByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.RoleStore.GetByName(name)

}

func (s *OpenTracingLayerRoleStore) GetByNames(names []string) ([]*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.GetByNames")

	span.SetTag("names", names)

	defer span.Finish()

	return s.RoleStore.GetByNames(names)

}

func (s *OpenTracingLayerRoleStore) PermanentDeleteAll() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.PermanentDeleteAll")

	defer span.Finish()

	return s.RoleStore.PermanentDeleteAll()

}

func (s *OpenTracingLayerRoleStore) Save(role *model.Role) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "RoleStore.Save")

	span.SetTag("role", role)

	defer span.Finish()

	return s.RoleStore.Save(role)

}

func (s *OpenTracingLayerSchemeStore) Delete(schemeId string) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SchemeStore.Delete")

	span.SetTag("schemeId", schemeId)

	defer span.Finish()

	return s.SchemeStore.Delete(schemeId)

}

func (s *OpenTracingLayerSchemeStore) Get(schemeId string) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SchemeStore.Get")

	span.SetTag("schemeId", schemeId)

	defer span.Finish()

	return s.SchemeStore.Get(schemeId)

}

func (s *OpenTracingLayerSchemeStore) GetAllPage(scope string, offset int, limit int) ([]*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SchemeStore.GetAllPage")

	span.SetTag("scope", scope)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.SchemeStore.GetAllPage(scope, offset, limit)

}

func (s *OpenTracingLayerSchemeStore) GetByName(schemeName string) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SchemeStore.GetByName")

	span.SetTag("schemeName", schemeName)

	defer span.Finish()

	return s.SchemeStore.GetByName(schemeName)

}

func (s *OpenTracingLayerSchemeStore) PermanentDeleteAll() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SchemeStore.PermanentDeleteAll")

	defer span.Finish()

	return s.SchemeStore.PermanentDeleteAll()

}

func (s *OpenTracingLayerSchemeStore) Save(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SchemeStore.Save")

	span.SetTag("scheme", scheme)

	defer span.Finish()

	return s.SchemeStore.Save(scheme)

}

func (s *OpenTracingLayerSessionStore) AnalyticsSessionCount() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.AnalyticsSessionCount")

	defer span.Finish()

	return s.SessionStore.AnalyticsSessionCount()

}

func (s *OpenTracingLayerSessionStore) Cleanup(expiryTime int64, batchSize int64) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.Cleanup")

	span.SetTag("expiryTime", expiryTime)

	span.SetTag("batchSize", batchSize)

	defer span.Finish()

	s.SessionStore.Cleanup(expiryTime, batchSize)

}

func (s *OpenTracingLayerSessionStore) Get(sessionIdOrToken string) (*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.Get")

	span.SetTag("sessionIdOrToken", sessionIdOrToken)

	defer span.Finish()

	return s.SessionStore.Get(sessionIdOrToken)

}

func (s *OpenTracingLayerSessionStore) GetSessions(userId string) ([]*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.GetSessions")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.SessionStore.GetSessions(userId)

}

func (s *OpenTracingLayerSessionStore) GetSessionsWithActiveDeviceIds(userId string) ([]*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.GetSessionsWithActiveDeviceIds")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.SessionStore.GetSessionsWithActiveDeviceIds(userId)

}

func (s *OpenTracingLayerSessionStore) PermanentDeleteSessionsByUser(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.PermanentDeleteSessionsByUser")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.SessionStore.PermanentDeleteSessionsByUser(teamId)

}

func (s *OpenTracingLayerSessionStore) Remove(sessionIdOrToken string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.Remove")

	span.SetTag("sessionIdOrToken", sessionIdOrToken)

	defer span.Finish()

	return s.SessionStore.Remove(sessionIdOrToken)

}

func (s *OpenTracingLayerSessionStore) RemoveAllSessions() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.RemoveAllSessions")

	defer span.Finish()

	return s.SessionStore.RemoveAllSessions()

}

func (s *OpenTracingLayerSessionStore) Save(session *model.Session) (*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.Save")

	span.SetTag("session", session)

	defer span.Finish()

	return s.SessionStore.Save(session)

}

func (s *OpenTracingLayerSessionStore) UpdateDeviceId(id string, deviceId string, expiresAt int64) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.UpdateDeviceId")

	span.SetTag("id", id)

	span.SetTag("deviceId", deviceId)

	span.SetTag("expiresAt", expiresAt)

	defer span.Finish()

	return s.SessionStore.UpdateDeviceId(id, deviceId, expiresAt)

}

func (s *OpenTracingLayerSessionStore) UpdateLastActivityAt(sessionId string, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.UpdateLastActivityAt")

	span.SetTag("sessionId", sessionId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.SessionStore.UpdateLastActivityAt(sessionId, time)

}

func (s *OpenTracingLayerSessionStore) UpdateProps(session *model.Session) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.UpdateProps")

	span.SetTag("session", session)

	defer span.Finish()

	return s.SessionStore.UpdateProps(session)

}

func (s *OpenTracingLayerSessionStore) UpdateRoles(userId string, roles string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SessionStore.UpdateRoles")

	span.SetTag("userId", userId)

	span.SetTag("roles", roles)

	defer span.Finish()

	return s.SessionStore.UpdateRoles(userId, roles)

}

func (s *OpenTracingLayerStatusStore) Get(userId string) (*model.Status, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "StatusStore.Get")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.StatusStore.Get(userId)

}

func (s *OpenTracingLayerStatusStore) GetByIds(userIds []string) ([]*model.Status, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "StatusStore.GetByIds")

	span.SetTag("userIds", userIds)

	defer span.Finish()

	return s.StatusStore.GetByIds(userIds)

}

func (s *OpenTracingLayerStatusStore) GetTotalActiveUsersCount() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "StatusStore.GetTotalActiveUsersCount")

	defer span.Finish()

	return s.StatusStore.GetTotalActiveUsersCount()

}

func (s *OpenTracingLayerStatusStore) ResetAll() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "StatusStore.ResetAll")

	defer span.Finish()

	return s.StatusStore.ResetAll()

}

func (s *OpenTracingLayerStatusStore) SaveOrUpdate(status *model.Status) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "StatusStore.SaveOrUpdate")

	span.SetTag("status", status)

	defer span.Finish()

	return s.StatusStore.SaveOrUpdate(status)

}

func (s *OpenTracingLayerStatusStore) UpdateLastActivityAt(userId string, lastActivityAt int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "StatusStore.UpdateLastActivityAt")

	span.SetTag("userId", userId)

	span.SetTag("lastActivityAt", lastActivityAt)

	defer span.Finish()

	return s.StatusStore.UpdateLastActivityAt(userId, lastActivityAt)

}

func (s *OpenTracingLayerSystemStore) Get() (model.StringMap, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SystemStore.Get")

	defer span.Finish()

	return s.SystemStore.Get()

}

func (s *OpenTracingLayerSystemStore) GetByName(name string) (*model.System, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SystemStore.GetByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.SystemStore.GetByName(name)

}

func (s *OpenTracingLayerSystemStore) PermanentDeleteByName(name string) (*model.System, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SystemStore.PermanentDeleteByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.SystemStore.PermanentDeleteByName(name)

}

func (s *OpenTracingLayerSystemStore) Save(system *model.System) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SystemStore.Save")

	span.SetTag("system", system)

	defer span.Finish()

	return s.SystemStore.Save(system)

}

func (s *OpenTracingLayerSystemStore) SaveOrUpdate(system *model.System) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SystemStore.SaveOrUpdate")

	span.SetTag("system", system)

	defer span.Finish()

	return s.SystemStore.SaveOrUpdate(system)

}

func (s *OpenTracingLayerSystemStore) Update(system *model.System) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "SystemStore.Update")

	span.SetTag("system", system)

	defer span.Finish()

	return s.SystemStore.Update(system)

}

func (s *OpenTracingLayerTeamStore) AnalyticsGetTeamCountForScheme(schemeId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.AnalyticsGetTeamCountForScheme")

	span.SetTag("schemeId", schemeId)

	defer span.Finish()

	return s.TeamStore.AnalyticsGetTeamCountForScheme(schemeId)

}

func (s *OpenTracingLayerTeamStore) AnalyticsPrivateTeamCount() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.AnalyticsPrivateTeamCount")

	defer span.Finish()

	return s.TeamStore.AnalyticsPrivateTeamCount()

}

func (s *OpenTracingLayerTeamStore) AnalyticsPublicTeamCount() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.AnalyticsPublicTeamCount")

	defer span.Finish()

	return s.TeamStore.AnalyticsPublicTeamCount()

}

func (s *OpenTracingLayerTeamStore) AnalyticsTeamCount(includeDeleted bool) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.AnalyticsTeamCount")

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.TeamStore.AnalyticsTeamCount(includeDeleted)

}

func (s *OpenTracingLayerTeamStore) ClearAllCustomRoleAssignments() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.ClearAllCustomRoleAssignments")

	defer span.Finish()

	return s.TeamStore.ClearAllCustomRoleAssignments()

}

func (s *OpenTracingLayerTeamStore) ClearCaches() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.ClearCaches")

	defer span.Finish()

	s.TeamStore.ClearCaches()

}

func (s *OpenTracingLayerTeamStore) Get(id string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.TeamStore.Get(id)

}

func (s *OpenTracingLayerTeamStore) GetActiveMemberCount(teamId string, restrictions *model.ViewUsersRestrictions) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetActiveMemberCount")

	span.SetTag("teamId", teamId)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.TeamStore.GetActiveMemberCount(teamId, restrictions)

}

func (s *OpenTracingLayerTeamStore) GetAll() ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAll")

	defer span.Finish()

	return s.TeamStore.GetAll()

}

func (s *OpenTracingLayerTeamStore) GetAllForExportAfter(limit int, afterId string) ([]*model.TeamForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllForExportAfter")

	span.SetTag("limit", limit)

	span.SetTag("afterId", afterId)

	defer span.Finish()

	return s.TeamStore.GetAllForExportAfter(limit, afterId)

}

func (s *OpenTracingLayerTeamStore) GetAllPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllPage")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.TeamStore.GetAllPage(offset, limit)

}

func (s *OpenTracingLayerTeamStore) GetAllPrivateTeamListing() ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllPrivateTeamListing")

	defer span.Finish()

	return s.TeamStore.GetAllPrivateTeamListing()

}

func (s *OpenTracingLayerTeamStore) GetAllPrivateTeamPageListing(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllPrivateTeamPageListing")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.TeamStore.GetAllPrivateTeamPageListing(offset, limit)

}

func (s *OpenTracingLayerTeamStore) GetAllPublicTeamPageListing(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllPublicTeamPageListing")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.TeamStore.GetAllPublicTeamPageListing(offset, limit)

}

func (s *OpenTracingLayerTeamStore) GetAllTeamListing() ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllTeamListing")

	defer span.Finish()

	return s.TeamStore.GetAllTeamListing()

}

func (s *OpenTracingLayerTeamStore) GetAllTeamPageListing(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetAllTeamPageListing")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.TeamStore.GetAllTeamPageListing(offset, limit)

}

func (s *OpenTracingLayerTeamStore) GetByInviteId(inviteId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetByInviteId")

	span.SetTag("inviteId", inviteId)

	defer span.Finish()

	return s.TeamStore.GetByInviteId(inviteId)

}

func (s *OpenTracingLayerTeamStore) GetByName(name string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.TeamStore.GetByName(name)

}

func (s *OpenTracingLayerTeamStore) GetChannelUnreadsForAllTeams(excludeTeamId string, userId string) ([]*model.ChannelUnread, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetChannelUnreadsForAllTeams")

	span.SetTag("excludeTeamId", excludeTeamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.GetChannelUnreadsForAllTeams(excludeTeamId, userId)

}

func (s *OpenTracingLayerTeamStore) GetChannelUnreadsForTeam(teamId string, userId string) ([]*model.ChannelUnread, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetChannelUnreadsForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.GetChannelUnreadsForTeam(teamId, userId)

}

func (s *OpenTracingLayerTeamStore) GetMember(teamId string, userId string) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetMember")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.GetMember(teamId, userId)

}

func (s *OpenTracingLayerTeamStore) GetMembers(teamId string, offset int, limit int, restrictions *model.ViewUsersRestrictions) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetMembers")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.TeamStore.GetMembers(teamId, offset, limit, restrictions)

}

func (s *OpenTracingLayerTeamStore) GetMembersByIds(teamId string, userIds []string, restrictions *model.ViewUsersRestrictions) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetMembersByIds")

	span.SetTag("teamId", teamId)

	span.SetTag("userIds", userIds)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.TeamStore.GetMembersByIds(teamId, userIds, restrictions)

}

func (s *OpenTracingLayerTeamStore) GetTeamMembersForExport(userId string) ([]*model.TeamMemberForExport, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetTeamMembersForExport")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.GetTeamMembersForExport(userId)

}

func (s *OpenTracingLayerTeamStore) GetTeamsByScheme(schemeId string, offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetTeamsByScheme")

	span.SetTag("schemeId", schemeId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.TeamStore.GetTeamsByScheme(schemeId, offset, limit)

}

func (s *OpenTracingLayerTeamStore) GetTeamsByUserId(userId string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetTeamsByUserId")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.GetTeamsByUserId(userId)

}

func (s *OpenTracingLayerTeamStore) GetTeamsForUser(userId string) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetTeamsForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.GetTeamsForUser(userId)

}

func (s *OpenTracingLayerTeamStore) GetTeamsForUserWithPagination(userId string, page int, perPage int) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetTeamsForUserWithPagination")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.TeamStore.GetTeamsForUserWithPagination(userId, page, perPage)

}

func (s *OpenTracingLayerTeamStore) GetTotalMemberCount(teamId string, restrictions *model.ViewUsersRestrictions) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetTotalMemberCount")

	span.SetTag("teamId", teamId)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.TeamStore.GetTotalMemberCount(teamId, restrictions)

}

func (s *OpenTracingLayerTeamStore) GetUserTeamIds(userId string, allowFromCache bool) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.GetUserTeamIds")

	span.SetTag("userId", userId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.TeamStore.GetUserTeamIds(userId, allowFromCache)

}

func (s *OpenTracingLayerTeamStore) InvalidateAllTeamIdsForUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.InvalidateAllTeamIdsForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.TeamStore.InvalidateAllTeamIdsForUser(userId)

}

func (s *OpenTracingLayerTeamStore) MigrateTeamMembers(fromTeamId string, fromUserId string) (map[string]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.MigrateTeamMembers")

	span.SetTag("fromTeamId", fromTeamId)

	span.SetTag("fromUserId", fromUserId)

	defer span.Finish()

	return s.TeamStore.MigrateTeamMembers(fromTeamId, fromUserId)

}

func (s *OpenTracingLayerTeamStore) PermanentDelete(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.PermanentDelete")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.TeamStore.PermanentDelete(teamId)

}

func (s *OpenTracingLayerTeamStore) RemoveAllMembersByTeam(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.RemoveAllMembersByTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.TeamStore.RemoveAllMembersByTeam(teamId)

}

func (s *OpenTracingLayerTeamStore) RemoveAllMembersByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.RemoveAllMembersByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.RemoveAllMembersByUser(userId)

}

func (s *OpenTracingLayerTeamStore) RemoveMember(teamId string, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.RemoveMember")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.TeamStore.RemoveMember(teamId, userId)

}

func (s *OpenTracingLayerTeamStore) ResetAllTeamSchemes() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.ResetAllTeamSchemes")

	defer span.Finish()

	return s.TeamStore.ResetAllTeamSchemes()

}

func (s *OpenTracingLayerTeamStore) Save(team *model.Team) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.Save")

	span.SetTag("team", team)

	defer span.Finish()

	return s.TeamStore.Save(team)

}

func (s *OpenTracingLayerTeamStore) SaveMember(member *model.TeamMember, maxUsersPerTeam int) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.SaveMember")

	span.SetTag("member", member)

	span.SetTag("maxUsersPerTeam", maxUsersPerTeam)

	defer span.Finish()

	return s.TeamStore.SaveMember(member, maxUsersPerTeam)

}

func (s *OpenTracingLayerTeamStore) SearchAll(term string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.SearchAll")

	span.SetTag("term", term)

	defer span.Finish()

	return s.TeamStore.SearchAll(term)

}

func (s *OpenTracingLayerTeamStore) SearchAllPaged(term string, page int, perPage int) ([]*model.Team, int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.SearchAllPaged")

	span.SetTag("term", term)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.TeamStore.SearchAllPaged(term, page, perPage)

}

func (s *OpenTracingLayerTeamStore) SearchOpen(term string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.SearchOpen")

	span.SetTag("term", term)

	defer span.Finish()

	return s.TeamStore.SearchOpen(term)

}

func (s *OpenTracingLayerTeamStore) SearchPrivate(term string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.SearchPrivate")

	span.SetTag("term", term)

	defer span.Finish()

	return s.TeamStore.SearchPrivate(term)

}

func (s *OpenTracingLayerTeamStore) Update(team *model.Team) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.Update")

	span.SetTag("team", team)

	defer span.Finish()

	return s.TeamStore.Update(team)

}

func (s *OpenTracingLayerTeamStore) UpdateLastTeamIconUpdate(teamId string, curTime int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.UpdateLastTeamIconUpdate")

	span.SetTag("teamId", teamId)

	span.SetTag("curTime", curTime)

	defer span.Finish()

	return s.TeamStore.UpdateLastTeamIconUpdate(teamId, curTime)

}

func (s *OpenTracingLayerTeamStore) UpdateMember(member *model.TeamMember) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.UpdateMember")

	span.SetTag("member", member)

	defer span.Finish()

	return s.TeamStore.UpdateMember(member)

}

func (s *OpenTracingLayerTeamStore) UpdateMembersRole(teamID string, userIDs []string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.UpdateMembersRole")

	span.SetTag("teamID", teamID)

	span.SetTag("userIDs", userIDs)

	defer span.Finish()

	return s.TeamStore.UpdateMembersRole(teamID, userIDs)

}

func (s *OpenTracingLayerTeamStore) UserBelongsToTeams(userId string, teamIds []string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TeamStore.UserBelongsToTeams")

	span.SetTag("userId", userId)

	span.SetTag("teamIds", teamIds)

	defer span.Finish()

	return s.TeamStore.UserBelongsToTeams(userId, teamIds)

}

func (s *OpenTracingLayerTermsOfServiceStore) Get(id string, allowFromCache bool) (*model.TermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TermsOfServiceStore.Get")

	span.SetTag("id", id)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.TermsOfServiceStore.Get(id, allowFromCache)

}

func (s *OpenTracingLayerTermsOfServiceStore) GetLatest(allowFromCache bool) (*model.TermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TermsOfServiceStore.GetLatest")

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.TermsOfServiceStore.GetLatest(allowFromCache)

}

func (s *OpenTracingLayerTermsOfServiceStore) Save(termsOfService *model.TermsOfService) (*model.TermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TermsOfServiceStore.Save")

	span.SetTag("termsOfService", termsOfService)

	defer span.Finish()

	return s.TermsOfServiceStore.Save(termsOfService)

}

func (s *OpenTracingLayerTokenStore) Cleanup() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TokenStore.Cleanup")

	defer span.Finish()

	s.TokenStore.Cleanup()

}

func (s *OpenTracingLayerTokenStore) Delete(token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TokenStore.Delete")

	span.SetTag("token", token)

	defer span.Finish()

	return s.TokenStore.Delete(token)

}

func (s *OpenTracingLayerTokenStore) GetByToken(token string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TokenStore.GetByToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.TokenStore.GetByToken(token)

}

func (s *OpenTracingLayerTokenStore) RemoveAllTokensByType(tokenType string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TokenStore.RemoveAllTokensByType")

	span.SetTag("tokenType", tokenType)

	defer span.Finish()

	return s.TokenStore.RemoveAllTokensByType(tokenType)

}

func (s *OpenTracingLayerTokenStore) Save(recovery *model.Token) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "TokenStore.Save")

	span.SetTag("recovery", recovery)

	defer span.Finish()

	return s.TokenStore.Save(recovery)

}

func (s *OpenTracingLayerUserStore) AnalyticsActiveCount(time int64, options model.UserCountOptions) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.AnalyticsActiveCount")

	span.SetTag("time", time)

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.AnalyticsActiveCount(time, options)

}

func (s *OpenTracingLayerUserStore) AnalyticsGetInactiveUsersCount() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.AnalyticsGetInactiveUsersCount")

	defer span.Finish()

	return s.UserStore.AnalyticsGetInactiveUsersCount()

}

func (s *OpenTracingLayerUserStore) AnalyticsGetSystemAdminCount() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.AnalyticsGetSystemAdminCount")

	defer span.Finish()

	return s.UserStore.AnalyticsGetSystemAdminCount()

}

func (s *OpenTracingLayerUserStore) ClearAllCustomRoleAssignments() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.ClearAllCustomRoleAssignments")

	defer span.Finish()

	return s.UserStore.ClearAllCustomRoleAssignments()

}

func (s *OpenTracingLayerUserStore) ClearCaches() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.ClearCaches")

	defer span.Finish()

	s.UserStore.ClearCaches()

}

func (s *OpenTracingLayerUserStore) Count(options model.UserCountOptions) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.Count")

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.Count(options)

}

func (s *OpenTracingLayerUserStore) DeactivateGuests() ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.DeactivateGuests")

	defer span.Finish()

	return s.UserStore.DeactivateGuests()

}

func (s *OpenTracingLayerUserStore) DemoteUserToGuest(userID string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.DemoteUserToGuest")

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.UserStore.DemoteUserToGuest(userID)

}

func (s *OpenTracingLayerUserStore) Get(id string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.Get")

	span.SetTag("id", id)

	defer span.Finish()

	return s.UserStore.Get(id)

}

func (s *OpenTracingLayerUserStore) GetAll() ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetAll")

	defer span.Finish()

	return s.UserStore.GetAll()

}

func (s *OpenTracingLayerUserStore) GetAllAfter(limit int, afterId string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetAllAfter")

	span.SetTag("limit", limit)

	span.SetTag("afterId", afterId)

	defer span.Finish()

	return s.UserStore.GetAllAfter(limit, afterId)

}

func (s *OpenTracingLayerUserStore) GetAllProfiles(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetAllProfiles")

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.GetAllProfiles(options)

}

func (s *OpenTracingLayerUserStore) GetAllProfilesInChannel(channelId string, allowFromCache bool) (map[string]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetAllProfilesInChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.UserStore.GetAllProfilesInChannel(channelId, allowFromCache)

}

func (s *OpenTracingLayerUserStore) GetAllUsingAuthService(authService string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetAllUsingAuthService")

	span.SetTag("authService", authService)

	defer span.Finish()

	return s.UserStore.GetAllUsingAuthService(authService)

}

func (s *OpenTracingLayerUserStore) GetAnyUnreadPostCountForChannel(userId string, channelId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetAnyUnreadPostCountForChannel")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.UserStore.GetAnyUnreadPostCountForChannel(userId, channelId)

}

func (s *OpenTracingLayerUserStore) GetByAuth(authData *string, authService string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetByAuth")

	span.SetTag("authData", authData)

	span.SetTag("authService", authService)

	defer span.Finish()

	return s.UserStore.GetByAuth(authData, authService)

}

func (s *OpenTracingLayerUserStore) GetByEmail(email string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetByEmail")

	span.SetTag("email", email)

	defer span.Finish()

	return s.UserStore.GetByEmail(email)

}

func (s *OpenTracingLayerUserStore) GetByUsername(username string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetByUsername")

	span.SetTag("username", username)

	defer span.Finish()

	return s.UserStore.GetByUsername(username)

}

func (s *OpenTracingLayerUserStore) GetChannelGroupUsers(channelID string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetChannelGroupUsers")

	span.SetTag("channelID", channelID)

	defer span.Finish()

	return s.UserStore.GetChannelGroupUsers(channelID)

}

func (s *OpenTracingLayerUserStore) GetEtagForAllProfiles() string {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetEtagForAllProfiles")

	defer span.Finish()

	return s.UserStore.GetEtagForAllProfiles()

}

func (s *OpenTracingLayerUserStore) GetEtagForProfiles(teamId string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetEtagForProfiles")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.UserStore.GetEtagForProfiles(teamId)

}

func (s *OpenTracingLayerUserStore) GetEtagForProfilesNotInTeam(teamId string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetEtagForProfilesNotInTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.UserStore.GetEtagForProfilesNotInTeam(teamId)

}

func (s *OpenTracingLayerUserStore) GetForLogin(loginId string, allowSignInWithUsername bool, allowSignInWithEmail bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetForLogin")

	span.SetTag("loginId", loginId)

	span.SetTag("allowSignInWithUsername", allowSignInWithUsername)

	span.SetTag("allowSignInWithEmail", allowSignInWithEmail)

	defer span.Finish()

	return s.UserStore.GetForLogin(loginId, allowSignInWithUsername, allowSignInWithEmail)

}

func (s *OpenTracingLayerUserStore) GetNewUsersForTeam(teamId string, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetNewUsersForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.UserStore.GetNewUsersForTeam(teamId, offset, limit, viewRestrictions)

}

func (s *OpenTracingLayerUserStore) GetProfileByGroupChannelIdsForUser(userId string, channelIds []string) (map[string][]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfileByGroupChannelIdsForUser")

	span.SetTag("userId", userId)

	span.SetTag("channelIds", channelIds)

	defer span.Finish()

	return s.UserStore.GetProfileByGroupChannelIdsForUser(userId, channelIds)

}

func (s *OpenTracingLayerUserStore) GetProfileByIds(userIds []string, options *UserGetByIdsOpts, allowFromCache bool) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfileByIds")

	span.SetTag("userIds", userIds)

	span.SetTag("options", options)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.UserStore.GetProfileByIds(userIds, options, allowFromCache)

}

func (s *OpenTracingLayerUserStore) GetProfiles(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfiles")

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.GetProfiles(options)

}

func (s *OpenTracingLayerUserStore) GetProfilesByUsernames(usernames []string, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfilesByUsernames")

	span.SetTag("usernames", usernames)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.UserStore.GetProfilesByUsernames(usernames, viewRestrictions)

}

func (s *OpenTracingLayerUserStore) GetProfilesInChannel(channelId string, offset int, limit int) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfilesInChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.UserStore.GetProfilesInChannel(channelId, offset, limit)

}

func (s *OpenTracingLayerUserStore) GetProfilesInChannelByStatus(channelId string, offset int, limit int) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfilesInChannelByStatus")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.UserStore.GetProfilesInChannelByStatus(channelId, offset, limit)

}

func (s *OpenTracingLayerUserStore) GetProfilesNotInChannel(teamId string, channelId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfilesNotInChannel")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.UserStore.GetProfilesNotInChannel(teamId, channelId, groupConstrained, offset, limit, viewRestrictions)

}

func (s *OpenTracingLayerUserStore) GetProfilesNotInTeam(teamId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfilesNotInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.UserStore.GetProfilesNotInTeam(teamId, groupConstrained, offset, limit, viewRestrictions)

}

func (s *OpenTracingLayerUserStore) GetProfilesWithoutTeam(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetProfilesWithoutTeam")

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.GetProfilesWithoutTeam(options)

}

func (s *OpenTracingLayerUserStore) GetRecentlyActiveUsersForTeam(teamId string, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetRecentlyActiveUsersForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.UserStore.GetRecentlyActiveUsersForTeam(teamId, offset, limit, viewRestrictions)

}

func (s *OpenTracingLayerUserStore) GetSystemAdminProfiles() (map[string]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetSystemAdminProfiles")

	defer span.Finish()

	return s.UserStore.GetSystemAdminProfiles()

}

func (s *OpenTracingLayerUserStore) GetTeamGroupUsers(teamID string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetTeamGroupUsers")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.UserStore.GetTeamGroupUsers(teamID)

}

func (s *OpenTracingLayerUserStore) GetUnreadCount(userId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetUnreadCount")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserStore.GetUnreadCount(userId)

}

func (s *OpenTracingLayerUserStore) GetUnreadCountForChannel(userId string, channelId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetUnreadCountForChannel")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.UserStore.GetUnreadCountForChannel(userId, channelId)

}

func (s *OpenTracingLayerUserStore) GetUsersBatchForIndexing(startTime int64, endTime int64, limit int) ([]*model.UserForIndexing, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.GetUsersBatchForIndexing")

	span.SetTag("startTime", startTime)

	span.SetTag("endTime", endTime)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.UserStore.GetUsersBatchForIndexing(startTime, endTime, limit)

}

func (s *OpenTracingLayerUserStore) InferSystemInstallDate() (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.InferSystemInstallDate")

	defer span.Finish()

	return s.UserStore.InferSystemInstallDate()

}

func (s *OpenTracingLayerUserStore) InvalidateProfileCacheForUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.InvalidateProfileCacheForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.UserStore.InvalidateProfileCacheForUser(userId)

}

func (s *OpenTracingLayerUserStore) InvalidateProfilesInChannelCache(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.InvalidateProfilesInChannelCache")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.UserStore.InvalidateProfilesInChannelCache(channelId)

}

func (s *OpenTracingLayerUserStore) InvalidateProfilesInChannelCacheByUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.InvalidateProfilesInChannelCacheByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.UserStore.InvalidateProfilesInChannelCacheByUser(userId)

}

func (s *OpenTracingLayerUserStore) PermanentDelete(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.PermanentDelete")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserStore.PermanentDelete(userId)

}

func (s *OpenTracingLayerUserStore) PromoteGuestToUser(userID string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.PromoteGuestToUser")

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.UserStore.PromoteGuestToUser(userID)

}

func (s *OpenTracingLayerUserStore) ResetLastPictureUpdate(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.ResetLastPictureUpdate")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserStore.ResetLastPictureUpdate(userId)

}

func (s *OpenTracingLayerUserStore) Save(user *model.User) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.Save")

	span.SetTag("user", user)

	defer span.Finish()

	return s.UserStore.Save(user)

}

func (s *OpenTracingLayerUserStore) Search(teamId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.Search")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.Search(teamId, term, options)

}

func (s *OpenTracingLayerUserStore) SearchInChannel(channelId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.SearchInChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.SearchInChannel(channelId, term, options)

}

func (s *OpenTracingLayerUserStore) SearchNotInChannel(teamId string, channelId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.SearchNotInChannel")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.SearchNotInChannel(teamId, channelId, term, options)

}

func (s *OpenTracingLayerUserStore) SearchNotInTeam(notInTeamId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.SearchNotInTeam")

	span.SetTag("notInTeamId", notInTeamId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.SearchNotInTeam(notInTeamId, term, options)

}

func (s *OpenTracingLayerUserStore) SearchWithoutTeam(term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.SearchWithoutTeam")

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.UserStore.SearchWithoutTeam(term, options)

}

func (s *OpenTracingLayerUserStore) Update(user *model.User, allowRoleUpdate bool) (*model.UserUpdate, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.Update")

	span.SetTag("user", user)

	span.SetTag("allowRoleUpdate", allowRoleUpdate)

	defer span.Finish()

	return s.UserStore.Update(user, allowRoleUpdate)

}

func (s *OpenTracingLayerUserStore) UpdateAuthData(userId string, service string, authData *string, email string, resetMfa bool) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdateAuthData")

	span.SetTag("userId", userId)

	span.SetTag("service", service)

	span.SetTag("authData", authData)

	span.SetTag("email", email)

	span.SetTag("resetMfa", resetMfa)

	defer span.Finish()

	return s.UserStore.UpdateAuthData(userId, service, authData, email, resetMfa)

}

func (s *OpenTracingLayerUserStore) UpdateFailedPasswordAttempts(userId string, attempts int) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdateFailedPasswordAttempts")

	span.SetTag("userId", userId)

	span.SetTag("attempts", attempts)

	defer span.Finish()

	return s.UserStore.UpdateFailedPasswordAttempts(userId, attempts)

}

func (s *OpenTracingLayerUserStore) UpdateLastPictureUpdate(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdateLastPictureUpdate")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserStore.UpdateLastPictureUpdate(userId)

}

func (s *OpenTracingLayerUserStore) UpdateMfaActive(userId string, active bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdateMfaActive")

	span.SetTag("userId", userId)

	span.SetTag("active", active)

	defer span.Finish()

	return s.UserStore.UpdateMfaActive(userId, active)

}

func (s *OpenTracingLayerUserStore) UpdateMfaSecret(userId string, secret string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdateMfaSecret")

	span.SetTag("userId", userId)

	span.SetTag("secret", secret)

	defer span.Finish()

	return s.UserStore.UpdateMfaSecret(userId, secret)

}

func (s *OpenTracingLayerUserStore) UpdatePassword(userId string, newPassword string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdatePassword")

	span.SetTag("userId", userId)

	span.SetTag("newPassword", newPassword)

	defer span.Finish()

	return s.UserStore.UpdatePassword(userId, newPassword)

}

func (s *OpenTracingLayerUserStore) UpdateUpdateAt(userId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.UpdateUpdateAt")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserStore.UpdateUpdateAt(userId)

}

func (s *OpenTracingLayerUserStore) VerifyEmail(userId string, email string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserStore.VerifyEmail")

	span.SetTag("userId", userId)

	span.SetTag("email", email)

	defer span.Finish()

	return s.UserStore.VerifyEmail(userId, email)

}

func (s *OpenTracingLayerUserAccessTokenStore) Delete(tokenId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.Delete")

	span.SetTag("tokenId", tokenId)

	defer span.Finish()

	return s.UserAccessTokenStore.Delete(tokenId)

}

func (s *OpenTracingLayerUserAccessTokenStore) DeleteAllForUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.DeleteAllForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserAccessTokenStore.DeleteAllForUser(userId)

}

func (s *OpenTracingLayerUserAccessTokenStore) Get(tokenId string) (*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.Get")

	span.SetTag("tokenId", tokenId)

	defer span.Finish()

	return s.UserAccessTokenStore.Get(tokenId)

}

func (s *OpenTracingLayerUserAccessTokenStore) GetAll(offset int, limit int) ([]*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.GetAll")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.UserAccessTokenStore.GetAll(offset, limit)

}

func (s *OpenTracingLayerUserAccessTokenStore) GetByToken(tokenString string) (*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.GetByToken")

	span.SetTag("tokenString", tokenString)

	defer span.Finish()

	return s.UserAccessTokenStore.GetByToken(tokenString)

}

func (s *OpenTracingLayerUserAccessTokenStore) GetByUser(userId string, page int, perPage int) ([]*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.GetByUser")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.UserAccessTokenStore.GetByUser(userId, page, perPage)

}

func (s *OpenTracingLayerUserAccessTokenStore) Save(token *model.UserAccessToken) (*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.Save")

	span.SetTag("token", token)

	defer span.Finish()

	return s.UserAccessTokenStore.Save(token)

}

func (s *OpenTracingLayerUserAccessTokenStore) Search(term string) ([]*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.Search")

	span.SetTag("term", term)

	defer span.Finish()

	return s.UserAccessTokenStore.Search(term)

}

func (s *OpenTracingLayerUserAccessTokenStore) UpdateTokenDisable(tokenId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.UpdateTokenDisable")

	span.SetTag("tokenId", tokenId)

	defer span.Finish()

	return s.UserAccessTokenStore.UpdateTokenDisable(tokenId)

}

func (s *OpenTracingLayerUserAccessTokenStore) UpdateTokenEnable(tokenId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserAccessTokenStore.UpdateTokenEnable")

	span.SetTag("tokenId", tokenId)

	defer span.Finish()

	return s.UserAccessTokenStore.UpdateTokenEnable(tokenId)

}

func (s *OpenTracingLayerUserTermsOfServiceStore) Delete(userId string, termsOfServiceId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserTermsOfServiceStore.Delete")

	span.SetTag("userId", userId)

	span.SetTag("termsOfServiceId", termsOfServiceId)

	defer span.Finish()

	return s.UserTermsOfServiceStore.Delete(userId, termsOfServiceId)

}

func (s *OpenTracingLayerUserTermsOfServiceStore) GetByUser(userId string) (*model.UserTermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserTermsOfServiceStore.GetByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.UserTermsOfServiceStore.GetByUser(userId)

}

func (s *OpenTracingLayerUserTermsOfServiceStore) Save(userTermsOfService *model.UserTermsOfService) (*model.UserTermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "UserTermsOfServiceStore.Save")

	span.SetTag("userTermsOfService", userTermsOfService)

	defer span.Finish()

	return s.UserTermsOfServiceStore.Save(userTermsOfService)

}

func (s *OpenTracingLayerWebhookStore) AnalyticsIncomingCount(teamId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.AnalyticsIncomingCount")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.WebhookStore.AnalyticsIncomingCount(teamId)

}

func (s *OpenTracingLayerWebhookStore) AnalyticsOutgoingCount(teamId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.AnalyticsOutgoingCount")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.WebhookStore.AnalyticsOutgoingCount(teamId)

}

func (s *OpenTracingLayerWebhookStore) ClearCaches() {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.ClearCaches")

	defer span.Finish()

	s.WebhookStore.ClearCaches()

}

func (s *OpenTracingLayerWebhookStore) DeleteIncoming(webhookId string, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.DeleteIncoming")

	span.SetTag("webhookId", webhookId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.WebhookStore.DeleteIncoming(webhookId, time)

}

func (s *OpenTracingLayerWebhookStore) DeleteOutgoing(webhookId string, time int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.DeleteOutgoing")

	span.SetTag("webhookId", webhookId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.WebhookStore.DeleteOutgoing(webhookId, time)

}

func (s *OpenTracingLayerWebhookStore) GetIncoming(id string, allowFromCache bool) (*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetIncoming")

	span.SetTag("id", id)

	span.SetTag("allowFromCache", allowFromCache)

	defer span.Finish()

	return s.WebhookStore.GetIncoming(id, allowFromCache)

}

func (s *OpenTracingLayerWebhookStore) GetIncomingByChannel(channelId string) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetIncomingByChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.WebhookStore.GetIncomingByChannel(channelId)

}

func (s *OpenTracingLayerWebhookStore) GetIncomingByTeam(teamId string, offset int, limit int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetIncomingByTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetIncomingByTeam(teamId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetIncomingByTeamByUser(teamId string, userId string, offset int, limit int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetIncomingByTeamByUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetIncomingByTeamByUser(teamId, userId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetIncomingList(offset int, limit int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetIncomingList")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetIncomingList(offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetIncomingListByUser(userId string, offset int, limit int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetIncomingListByUser")

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetIncomingListByUser(userId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoing(id string) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoing")

	span.SetTag("id", id)

	defer span.Finish()

	return s.WebhookStore.GetOutgoing(id)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoingByChannel(channelId string, offset int, limit int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoingByChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetOutgoingByChannel(channelId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoingByChannelByUser(channelId string, userId string, offset int, limit int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoingByChannelByUser")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetOutgoingByChannelByUser(channelId, userId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoingByTeam(teamId string, offset int, limit int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoingByTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetOutgoingByTeam(teamId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoingByTeamByUser(teamId string, userId string, offset int, limit int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoingByTeamByUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetOutgoingByTeamByUser(teamId, userId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoingList(offset int, limit int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoingList")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetOutgoingList(offset, limit)

}

func (s *OpenTracingLayerWebhookStore) GetOutgoingListByUser(userId string, offset int, limit int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.GetOutgoingListByUser")

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.WebhookStore.GetOutgoingListByUser(userId, offset, limit)

}

func (s *OpenTracingLayerWebhookStore) InvalidateWebhookCache(webhook string) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.InvalidateWebhookCache")

	span.SetTag("webhook", webhook)

	defer span.Finish()

	s.WebhookStore.InvalidateWebhookCache(webhook)

}

func (s *OpenTracingLayerWebhookStore) PermanentDeleteIncomingByChannel(channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.PermanentDeleteIncomingByChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.WebhookStore.PermanentDeleteIncomingByChannel(channelId)

}

func (s *OpenTracingLayerWebhookStore) PermanentDeleteIncomingByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.PermanentDeleteIncomingByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.WebhookStore.PermanentDeleteIncomingByUser(userId)

}

func (s *OpenTracingLayerWebhookStore) PermanentDeleteOutgoingByChannel(channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.PermanentDeleteOutgoingByChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.WebhookStore.PermanentDeleteOutgoingByChannel(channelId)

}

func (s *OpenTracingLayerWebhookStore) PermanentDeleteOutgoingByUser(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.PermanentDeleteOutgoingByUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.WebhookStore.PermanentDeleteOutgoingByUser(userId)

}

func (s *OpenTracingLayerWebhookStore) SaveIncoming(webhook *model.IncomingWebhook) (*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.SaveIncoming")

	span.SetTag("webhook", webhook)

	defer span.Finish()

	return s.WebhookStore.SaveIncoming(webhook)

}

func (s *OpenTracingLayerWebhookStore) SaveOutgoing(webhook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.SaveOutgoing")

	span.SetTag("webhook", webhook)

	defer span.Finish()

	return s.WebhookStore.SaveOutgoing(webhook)

}

func (s *OpenTracingLayerWebhookStore) UpdateIncoming(webhook *model.IncomingWebhook) (*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.UpdateIncoming")

	span.SetTag("webhook", webhook)

	defer span.Finish()

	return s.WebhookStore.UpdateIncoming(webhook)

}

func (s *OpenTracingLayerWebhookStore) UpdateOutgoing(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.Root.Context, "WebhookStore.UpdateOutgoing")

	span.SetTag("hook", hook)

	defer span.Finish()

	return s.WebhookStore.UpdateOutgoing(hook)

}

func (s *OpenTracingLayer) Close() {
	s.Store.Close()
}

func (s *OpenTracingLayer) DropAllTables() {
	s.Store.DropAllTables()
}

func (s *OpenTracingLayer) GetCurrentSchemaVersion() string {
	return s.Store.GetCurrentSchemaVersion()
}

func (s *OpenTracingLayer) LockToMaster() {
	s.Store.LockToMaster()
}

func (s *OpenTracingLayer) MarkSystemRanUnitTests() {
	s.Store.MarkSystemRanUnitTests()
}

func (s *OpenTracingLayer) TotalMasterDbConnections() int {
	return s.Store.TotalMasterDbConnections()
}

func (s *OpenTracingLayer) TotalReadDbConnections() int {
	return s.Store.TotalReadDbConnections()
}

func (s *OpenTracingLayer) TotalSearchDbConnections() int {
	return s.Store.TotalSearchDbConnections()
}

func (s *OpenTracingLayer) UnlockFromMaster() {
	s.Store.UnlockFromMaster()
}

func NewOpenTracingLayer(childStore Store, ctx context.Context) *OpenTracingLayer {
	newStore := OpenTracingLayer{
		Store:   childStore,
		Context: ctx,
	}

	newStore.AuditStore = &OpenTracingLayerAuditStore{AuditStore: childStore.Audit(), Root: &newStore}
	newStore.BotStore = &OpenTracingLayerBotStore{BotStore: childStore.Bot(), Root: &newStore}
	newStore.ChannelStore = &OpenTracingLayerChannelStore{ChannelStore: childStore.Channel(), Root: &newStore}
	newStore.ChannelMemberHistoryStore = &OpenTracingLayerChannelMemberHistoryStore{ChannelMemberHistoryStore: childStore.ChannelMemberHistory(), Root: &newStore}
	newStore.ClusterDiscoveryStore = &OpenTracingLayerClusterDiscoveryStore{ClusterDiscoveryStore: childStore.ClusterDiscovery(), Root: &newStore}
	newStore.CommandStore = &OpenTracingLayerCommandStore{CommandStore: childStore.Command(), Root: &newStore}
	newStore.CommandWebhookStore = &OpenTracingLayerCommandWebhookStore{CommandWebhookStore: childStore.CommandWebhook(), Root: &newStore}
	newStore.ComplianceStore = &OpenTracingLayerComplianceStore{ComplianceStore: childStore.Compliance(), Root: &newStore}
	newStore.EmojiStore = &OpenTracingLayerEmojiStore{EmojiStore: childStore.Emoji(), Root: &newStore}
	newStore.FileInfoStore = &OpenTracingLayerFileInfoStore{FileInfoStore: childStore.FileInfo(), Root: &newStore}
	newStore.GroupStore = &OpenTracingLayerGroupStore{GroupStore: childStore.Group(), Root: &newStore}
	newStore.JobStore = &OpenTracingLayerJobStore{JobStore: childStore.Job(), Root: &newStore}
	newStore.LicenseStore = &OpenTracingLayerLicenseStore{LicenseStore: childStore.License(), Root: &newStore}
	newStore.LinkMetadataStore = &OpenTracingLayerLinkMetadataStore{LinkMetadataStore: childStore.LinkMetadata(), Root: &newStore}
	newStore.OAuthStore = &OpenTracingLayerOAuthStore{OAuthStore: childStore.OAuth(), Root: &newStore}
	newStore.PluginStore = &OpenTracingLayerPluginStore{PluginStore: childStore.Plugin(), Root: &newStore}
	newStore.PostStore = &OpenTracingLayerPostStore{PostStore: childStore.Post(), Root: &newStore}
	newStore.PreferenceStore = &OpenTracingLayerPreferenceStore{PreferenceStore: childStore.Preference(), Root: &newStore}
	newStore.ReactionStore = &OpenTracingLayerReactionStore{ReactionStore: childStore.Reaction(), Root: &newStore}
	newStore.RoleStore = &OpenTracingLayerRoleStore{RoleStore: childStore.Role(), Root: &newStore}
	newStore.SchemeStore = &OpenTracingLayerSchemeStore{SchemeStore: childStore.Scheme(), Root: &newStore}
	newStore.SessionStore = &OpenTracingLayerSessionStore{SessionStore: childStore.Session(), Root: &newStore}
	newStore.StatusStore = &OpenTracingLayerStatusStore{StatusStore: childStore.Status(), Root: &newStore}
	newStore.SystemStore = &OpenTracingLayerSystemStore{SystemStore: childStore.System(), Root: &newStore}
	newStore.TeamStore = &OpenTracingLayerTeamStore{TeamStore: childStore.Team(), Root: &newStore}
	newStore.TermsOfServiceStore = &OpenTracingLayerTermsOfServiceStore{TermsOfServiceStore: childStore.TermsOfService(), Root: &newStore}
	newStore.TokenStore = &OpenTracingLayerTokenStore{TokenStore: childStore.Token(), Root: &newStore}
	newStore.UserStore = &OpenTracingLayerUserStore{UserStore: childStore.User(), Root: &newStore}
	newStore.UserAccessTokenStore = &OpenTracingLayerUserAccessTokenStore{UserAccessTokenStore: childStore.UserAccessToken(), Root: &newStore}
	newStore.UserTermsOfServiceStore = &OpenTracingLayerUserTermsOfServiceStore{UserTermsOfServiceStore: childStore.UserTermsOfService(), Root: &newStore}
	newStore.WebhookStore = &OpenTracingLayerWebhookStore{WebhookStore: childStore.Webhook(), Root: &newStore}
	return &newStore
}
