// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make store-layers"
// DO NOT EDIT

package store

import (
	"context"
	
	"github.com/lib/pq"
	"github.com/mattermost/mattermost-server/v5/model"
    "github.com/pkg/errors"
	"github.com/go-sql-driver/mysql"
)

type {{.Name}} struct {
	Store
{{range $index, $element := .SubStores}}	{{$index}}Store {{$index}}Store
{{end}}
}

{{range $index, $element := .SubStores}}func (s *{{$.Name}}) {{$index}}() {{$index}}Store {
	return s.{{$index}}Store
}

{{end}}

{{range $index, $element := .SubStores}}type {{$.Name}}{{$index}}Store struct {
	{{$index}}Store
	Root *{{$.Name}}
}

{{end}}

{{range $substoreName, $substore := .SubStores}}
{{range $index, $element := $substore.Methods}}
func (s *{{$.Name}}{{$substoreName}}Store) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {
    {{if $element.Results | len | eq 0}}
    s.{{$substoreName}}Store.{{$index}}({{$element.Params | joinParams}})
    return
    {{else}}
    {{$element.Results | genResultsVars}} := s.{{$substoreName}}Store.{{$index}}({{$element.Params | joinParams}})
    {{if $element.Results | errorPresent}}
    tries := 0
    for {
        tries++
        if {{$element.Results | errorVar}} == nil {
            break
        }
        {{if $element.Results | isAppError}}
        break
        {{else}}
        if tries > 3 {
            break
            {{$element.Results | errorVar}} = errors.Wrap({{$element.Results | errorVar}}, "giving up after 3 consecutive repeatable transaction failures")
        }
        var pqErr *pq.Error
        var mysqlErr *mysql.MySQLError
        switch {
            case errors.As(errors.Cause({{$element.Results | errorVar}}), &pqErr):
                if pqErr.Code != "40001" && pqErr.Code != "40P01" {
                    break
                }
            case errors.As(errors.Cause({{$element.Results | errorVar}}), &mysqlErr):
                if mysqlErr.Number != mySQLDeadlockCode {
                    break
                }
            default:
                break
        }

        {{end}}
        {{$element.Results | genResultsVars}} = s.{{$substoreName}}Store.{{$index}}({{$element.Params | joinParams}})
	}
    {{end}}
    return {{$element.Results | genResultsVars}}
    {{end}}
}
{{end}}
{{end}}

{{range $index, $element := .Methods}}
func (s *{{$.Name}}) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {
	{{if $element.Results | len | eq 0}}s.Store.{{$index}}({{$element.Params | joinParams}})
	{{else}}return s.Store.{{$index}}({{$element.Params | joinParams}})
	{{end}}}
{{end}}

func New{{.Name}}(childStore Store) *{{.Name}} {
	newStore := {{.Name}}{
		Store: childStore,
	}
	{{range $substoreName, $substore := .SubStores}}
	newStore.{{$substoreName}}Store = &{{$.Name}}{{$substoreName}}Store{{"{"}}{{$substoreName}}Store: childStore.{{$substoreName}}(), Root: &newStore}{{end}}
	return &newStore
}
