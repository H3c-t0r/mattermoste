// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

// Code generated by "make store-layers"
// DO NOT EDIT

package app

import (
	"archive/zip"
	"bytes"
	"context"
	"crypto/ecdsa"
	"html/template"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"time"

	"github.com/dyatlov/go-opengraph/opengraph"
	"github.com/gorilla/websocket"
	"github.com/mattermost/go-i18n/i18n"
	goi18n "github.com/mattermost/go-i18n/i18n"
	"github.com/mattermost/mattermost-server/v5/einterfaces"
	"github.com/mattermost/mattermost-server/v5/mlog"
	"github.com/mattermost/mattermost-server/v5/model"
	"github.com/mattermost/mattermost-server/v5/plugin"
	"github.com/mattermost/mattermost-server/v5/services/filesstore"
	"github.com/mattermost/mattermost-server/v5/services/httpservice"
	"github.com/mattermost/mattermost-server/v5/services/imageproxy"
	"github.com/mattermost/mattermost-server/v5/services/timezones"
	"github.com/mattermost/mattermost-server/v5/services/tracing"
	"github.com/mattermost/mattermost-server/v5/store"
	"github.com/mattermost/mattermost-server/v5/utils"
)

type OpenTracingAppLayer struct {
	app AppIface

	srv *Server

	log              *mlog.Logger
	notificationsLog *mlog.Logger

	t              goi18n.TranslateFunc
	session        model.Session
	requestId      string
	ipAddress      string
	path           string
	userAgent      string
	acceptLanguage string

	accountMigration einterfaces.AccountMigrationInterface
	cluster          einterfaces.ClusterInterface
	compliance       einterfaces.ComplianceInterface
	dataRetention    einterfaces.DataRetentionInterface
	elasticsearch    einterfaces.ElasticsearchInterface
	ldap             einterfaces.LdapInterface
	messageExport    einterfaces.MessageExportInterface
	metrics          einterfaces.MetricsInterface
	notification     einterfaces.NotificationInterface
	saml             einterfaces.SamlInterface

	httpService httpservice.HTTPService
	imageProxy  *imageproxy.ImageProxy
	timezones   *timezones.Timezones

	context context.Context
	store   store.Store

	ctx context.Context
}

func (s *OpenTracingAppLayer) ActivateMfa(userId string, token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ActivateMfa")

	span.SetTag("userId", userId)

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.ActivateMfa(userId, token)
}

func (s *OpenTracingAppLayer) AddChannelMember(userId string, channel *model.Channel, userRequestorId string, postRootId string) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddChannelMember")

	span.SetTag("userId", userId)

	span.SetTag("channel", channel)

	span.SetTag("userRequestorId", userRequestorId)

	span.SetTag("postRootId", postRootId)

	defer span.Finish()

	return s.app.AddChannelMember(userId, channel, userRequestorId, postRootId)
}

func (s *OpenTracingAppLayer) AddConfigListener(listener func(*model.Config, *model.Config)) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddConfigListener")

	span.SetTag("listener", listener)

	defer span.Finish()

	return s.app.AddConfigListener(listener)
}

func (s *OpenTracingAppLayer) AddCursorIdsForPostList(originalList *model.PostList, afterPost string, beforePost string, since int64, page int, perPage int) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddCursorIdsForPostList")

	span.SetTag("originalList", originalList)

	span.SetTag("afterPost", afterPost)

	span.SetTag("beforePost", beforePost)

	span.SetTag("since", since)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	s.app.AddCursorIdsForPostList(originalList, afterPost, beforePost, since, page, perPage)
}

func (s *OpenTracingAppLayer) AddDirectChannels(teamId string, user *model.User) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddDirectChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.AddDirectChannels(teamId, user)
}

func (s *OpenTracingAppLayer) AddLicenseListener(listener func()) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddLicenseListener")

	span.SetTag("listener", listener)

	defer span.Finish()

	return s.app.AddLicenseListener(listener)
}

func (s *OpenTracingAppLayer) AddNotificationEmailToBatch(user *model.User, post *model.Post, team *model.Team) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddNotificationEmailToBatch")

	span.SetTag("user", user)

	span.SetTag("post", post)

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.AddNotificationEmailToBatch(user, post, team)
}

func (s *OpenTracingAppLayer) AddPublicKey(name string, key io.Reader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddPublicKey")

	span.SetTag("name", name)

	span.SetTag("key", key)

	defer span.Finish()

	return s.app.AddPublicKey(name, key)
}

func (s *OpenTracingAppLayer) AddSamlIdpCertificate(fileData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddSamlIdpCertificate")

	span.SetTag("fileData", fileData)

	defer span.Finish()

	return s.app.AddSamlIdpCertificate(fileData)
}

func (s *OpenTracingAppLayer) AddSamlPrivateCertificate(fileData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddSamlPrivateCertificate")

	span.SetTag("fileData", fileData)

	defer span.Finish()

	return s.app.AddSamlPrivateCertificate(fileData)
}

func (s *OpenTracingAppLayer) AddSamlPublicCertificate(fileData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddSamlPublicCertificate")

	span.SetTag("fileData", fileData)

	defer span.Finish()

	return s.app.AddSamlPublicCertificate(fileData)
}

func (s *OpenTracingAppLayer) AddSessionToCache(session *model.Session) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddSessionToCache")

	span.SetTag("session", session)

	defer span.Finish()

	s.app.AddSessionToCache(session)
}

func (s *OpenTracingAppLayer) AddStatusCache(status *model.Status) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddStatusCache")

	span.SetTag("status", status)

	defer span.Finish()

	s.app.AddStatusCache(status)
}

func (s *OpenTracingAppLayer) AddStatusCacheSkipClusterSend(status *model.Status) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddStatusCacheSkipClusterSend")

	span.SetTag("status", status)

	defer span.Finish()

	s.app.AddStatusCacheSkipClusterSend(status)
}

func (s *OpenTracingAppLayer) AddTeamMember(teamId string, userId string) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddTeamMember")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.AddTeamMember(teamId, userId)
}

func (s *OpenTracingAppLayer) AddTeamMemberByInviteId(inviteId string, userId string) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddTeamMemberByInviteId")

	span.SetTag("inviteId", inviteId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.AddTeamMemberByInviteId(inviteId, userId)
}

func (s *OpenTracingAppLayer) AddTeamMemberByToken(userId string, tokenId string) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddTeamMemberByToken")

	span.SetTag("userId", userId)

	span.SetTag("tokenId", tokenId)

	defer span.Finish()

	return s.app.AddTeamMemberByToken(userId, tokenId)
}

func (s *OpenTracingAppLayer) AddTeamMembers(teamId string, userIds []string, userRequestorId string, graceful bool) ([]*model.TeamMemberWithError, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddTeamMembers")

	span.SetTag("teamId", teamId)

	span.SetTag("userIds", userIds)

	span.SetTag("userRequestorId", userRequestorId)

	span.SetTag("graceful", graceful)

	defer span.Finish()

	return s.app.AddTeamMembers(teamId, userIds, userRequestorId, graceful)
}

func (s *OpenTracingAppLayer) AddUserToChannel(user *model.User, channel *model.Channel) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddUserToChannel")

	span.SetTag("user", user)

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.AddUserToChannel(user, channel)
}

func (s *OpenTracingAppLayer) AddUserToTeam(teamId string, userId string, userRequestorId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddUserToTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("userRequestorId", userRequestorId)

	defer span.Finish()

	return s.app.AddUserToTeam(teamId, userId, userRequestorId)
}

func (s *OpenTracingAppLayer) AddUserToTeamByInviteId(inviteId string, userId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddUserToTeamByInviteId")

	span.SetTag("inviteId", inviteId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.AddUserToTeamByInviteId(inviteId, userId)
}

func (s *OpenTracingAppLayer) AddUserToTeamByTeamId(teamId string, user *model.User) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddUserToTeamByTeamId")

	span.SetTag("teamId", teamId)

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.AddUserToTeamByTeamId(teamId, user)
}

func (s *OpenTracingAppLayer) AddUserToTeamByToken(userId string, tokenId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AddUserToTeamByToken")

	span.SetTag("userId", userId)

	span.SetTag("tokenId", tokenId)

	defer span.Finish()

	return s.app.AddUserToTeamByToken(userId, tokenId)
}

func (s *OpenTracingAppLayer) AllowOAuthAppAccessToUser(userId string, authRequest *model.AuthorizeRequest) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AllowOAuthAppAccessToUser")

	span.SetTag("userId", userId)

	span.SetTag("authRequest", authRequest)

	defer span.Finish()

	return s.app.AllowOAuthAppAccessToUser(userId, authRequest)
}

func (s *OpenTracingAppLayer) AsymmetricSigningKey() *ecdsa.PrivateKey {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AsymmetricSigningKey")

	defer span.Finish()

	return s.app.AsymmetricSigningKey()
}

func (s *OpenTracingAppLayer) AttachDeviceId(sessionId string, deviceId string, expiresAt int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AttachDeviceId")

	span.SetTag("sessionId", sessionId)

	span.SetTag("deviceId", deviceId)

	span.SetTag("expiresAt", expiresAt)

	defer span.Finish()

	return s.app.AttachDeviceId(sessionId, deviceId, expiresAt)
}

func (s *OpenTracingAppLayer) AttachSessionCookies(w http.ResponseWriter, r *http.Request) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AttachSessionCookies")

	span.SetTag("w", w)

	span.SetTag("r", r)

	defer span.Finish()

	s.app.AttachSessionCookies(w, r)
}

func (s *OpenTracingAppLayer) AuthenticateUserForLogin(id string, loginId string, password string, mfaToken string, ldapOnly bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AuthenticateUserForLogin")

	span.SetTag("id", id)

	span.SetTag("loginId", loginId)

	span.SetTag("password", password)

	span.SetTag("mfaToken", mfaToken)

	span.SetTag("ldapOnly", ldapOnly)

	defer span.Finish()

	return s.app.AuthenticateUserForLogin(id, loginId, password, mfaToken, ldapOnly)
}

func (s *OpenTracingAppLayer) AuthorizeOAuthUser(w http.ResponseWriter, r *http.Request, service string, code string, state string, redirectUri string) (io.ReadCloser, string, map[string]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AuthorizeOAuthUser")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("service", service)

	span.SetTag("code", code)

	span.SetTag("state", state)

	span.SetTag("redirectUri", redirectUri)

	defer span.Finish()

	return s.app.AuthorizeOAuthUser(w, r, service, code, state, redirectUri)
}

func (s *OpenTracingAppLayer) AutocompleteChannels(teamId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AutocompleteChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.AutocompleteChannels(teamId, term)
}

func (s *OpenTracingAppLayer) AutocompleteChannelsForSearch(teamId string, userId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AutocompleteChannelsForSearch")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.AutocompleteChannelsForSearch(teamId, userId, term)
}

func (s *OpenTracingAppLayer) AutocompleteUsersInChannel(teamId string, channelId string, term string, options *model.UserSearchOptions) (*model.UserAutocompleteInChannel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AutocompleteUsersInChannel")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.AutocompleteUsersInChannel(teamId, channelId, term, options)
}

func (s *OpenTracingAppLayer) AutocompleteUsersInTeam(teamId string, term string, options *model.UserSearchOptions) (*model.UserAutocompleteInTeam, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.AutocompleteUsersInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.AutocompleteUsersInTeam(teamId, term, options)
}

func (s *OpenTracingAppLayer) BroadcastStatus(status *model.Status) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.BroadcastStatus")

	span.SetTag("status", status)

	defer span.Finish()

	s.app.BroadcastStatus(status)
}

func (s *OpenTracingAppLayer) BuildPostReactions(postId string) (*[]ReactionImportData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.BuildPostReactions")

	span.SetTag("postId", postId)

	defer span.Finish()

	return s.app.BuildPostReactions(postId)
}

func (s *OpenTracingAppLayer) BuildPushNotificationMessage(contentsConfig string, post *model.Post, user *model.User, channel *model.Channel, channelName string, senderName string, explicitMention bool, channelWideMention bool, replyToThreadType string) (*model.PushNotification, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.BuildPushNotificationMessage")

	span.SetTag("contentsConfig", contentsConfig)

	span.SetTag("post", post)

	span.SetTag("user", user)

	span.SetTag("channel", channel)

	span.SetTag("channelName", channelName)

	span.SetTag("senderName", senderName)

	span.SetTag("explicitMention", explicitMention)

	span.SetTag("channelWideMention", channelWideMention)

	span.SetTag("replyToThreadType", replyToThreadType)

	defer span.Finish()

	return s.app.BuildPushNotificationMessage(contentsConfig, post, user, channel, channelName, senderName, explicitMention, channelWideMention, replyToThreadType)
}

func (s *OpenTracingAppLayer) BuildSamlMetadataObject(idpMetadata []byte) (*model.SamlMetadataResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.BuildSamlMetadataObject")

	span.SetTag("idpMetadata", idpMetadata)

	defer span.Finish()

	return s.app.BuildSamlMetadataObject(idpMetadata)
}

func (s *OpenTracingAppLayer) BulkExport(writer io.Writer, file string, pathToEmojiDir string, dirNameToExportEmoji string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.BulkExport")

	span.SetTag("writer", writer)

	span.SetTag("file", file)

	span.SetTag("pathToEmojiDir", pathToEmojiDir)

	span.SetTag("dirNameToExportEmoji", dirNameToExportEmoji)

	defer span.Finish()

	return s.app.BulkExport(writer, file, pathToEmojiDir, dirNameToExportEmoji)
}

func (s *OpenTracingAppLayer) BulkImport(fileReader io.Reader, dryRun bool, workers int) (*model.AppError, int) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.BulkImport")

	span.SetTag("fileReader", fileReader)

	span.SetTag("dryRun", dryRun)

	span.SetTag("workers", workers)

	defer span.Finish()

	return s.app.BulkImport(fileReader, dryRun, workers)
}

func (s *OpenTracingAppLayer) CancelJob(jobId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CancelJob")

	span.SetTag("jobId", jobId)

	defer span.Finish()

	return s.app.CancelJob(jobId)
}

func (s *OpenTracingAppLayer) ChannelMembersMinusGroupMembers(channelID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ChannelMembersMinusGroupMembers")

	span.SetTag("channelID", channelID)

	span.SetTag("groupIDs", groupIDs)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.ChannelMembersMinusGroupMembers(channelID, groupIDs, page, perPage)
}

func (s *OpenTracingAppLayer) ChannelMembersToAdd(since int64, channelID *string) ([]*model.UserChannelIDPair, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ChannelMembersToAdd")

	span.SetTag("since", since)

	span.SetTag("channelID", channelID)

	defer span.Finish()

	return s.app.ChannelMembersToAdd(since, channelID)
}

func (s *OpenTracingAppLayer) ChannelMembersToRemove(teamID *string) ([]*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ChannelMembersToRemove")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.app.ChannelMembersToRemove(teamID)
}

func (s *OpenTracingAppLayer) CheckForClientSideCert(r *http.Request) (string, string, string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckForClientSideCert")

	span.SetTag("r", r)

	defer span.Finish()

	return s.app.CheckForClientSideCert(r)
}

func (s *OpenTracingAppLayer) CheckPasswordAndAllCriteria(user *model.User, password string, mfaToken string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckPasswordAndAllCriteria")

	span.SetTag("user", user)

	span.SetTag("password", password)

	span.SetTag("mfaToken", mfaToken)

	defer span.Finish()

	return s.app.CheckPasswordAndAllCriteria(user, password, mfaToken)
}

func (s *OpenTracingAppLayer) CheckRolesExist(roleNames []string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckRolesExist")

	span.SetTag("roleNames", roleNames)

	defer span.Finish()

	return s.app.CheckRolesExist(roleNames)
}

func (s *OpenTracingAppLayer) CheckUserAllAuthenticationCriteria(user *model.User, mfaToken string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckUserAllAuthenticationCriteria")

	span.SetTag("user", user)

	span.SetTag("mfaToken", mfaToken)

	defer span.Finish()

	return s.app.CheckUserAllAuthenticationCriteria(user, mfaToken)
}

func (s *OpenTracingAppLayer) CheckUserMfa(user *model.User, token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckUserMfa")

	span.SetTag("user", user)

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.CheckUserMfa(user, token)
}

func (s *OpenTracingAppLayer) CheckUserPostflightAuthenticationCriteria(user *model.User) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckUserPostflightAuthenticationCriteria")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.CheckUserPostflightAuthenticationCriteria(user)
}

func (s *OpenTracingAppLayer) CheckUserPreflightAuthenticationCriteria(user *model.User, mfaToken string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CheckUserPreflightAuthenticationCriteria")

	span.SetTag("user", user)

	span.SetTag("mfaToken", mfaToken)

	defer span.Finish()

	return s.app.CheckUserPreflightAuthenticationCriteria(user, mfaToken)
}

func (s *OpenTracingAppLayer) ClearChannelMembersCache(channelID string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearChannelMembersCache")

	span.SetTag("channelID", channelID)

	defer span.Finish()

	s.app.ClearChannelMembersCache(channelID)
}

func (s *OpenTracingAppLayer) ClearPushNotification(currentSessionId string, userId string, channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearPushNotification")

	span.SetTag("currentSessionId", currentSessionId)

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.app.ClearPushNotification(currentSessionId, userId, channelId)
}

func (s *OpenTracingAppLayer) ClearPushNotificationSync(currentSessionId string, userId string, channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearPushNotificationSync")

	span.SetTag("currentSessionId", currentSessionId)

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.ClearPushNotificationSync(currentSessionId, userId, channelId)
}

func (s *OpenTracingAppLayer) ClearSessionCacheForAllUsers() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearSessionCacheForAllUsers")

	defer span.Finish()

	s.app.ClearSessionCacheForAllUsers()
}

func (s *OpenTracingAppLayer) ClearSessionCacheForAllUsersSkipClusterSend() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearSessionCacheForAllUsersSkipClusterSend")

	defer span.Finish()

	s.app.ClearSessionCacheForAllUsersSkipClusterSend()
}

func (s *OpenTracingAppLayer) ClearSessionCacheForUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearSessionCacheForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.ClearSessionCacheForUser(userId)
}

func (s *OpenTracingAppLayer) ClearSessionCacheForUserSkipClusterSend(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearSessionCacheForUserSkipClusterSend")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.ClearSessionCacheForUserSkipClusterSend(userId)
}

func (s *OpenTracingAppLayer) ClearTeamMembersCache(teamID string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClearTeamMembersCache")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	s.app.ClearTeamMembersCache(teamID)
}

func (s *OpenTracingAppLayer) ClientConfig() map[string]string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClientConfig")

	defer span.Finish()

	return s.app.ClientConfig()
}

func (s *OpenTracingAppLayer) ClientConfigHash() string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClientConfigHash")

	defer span.Finish()

	return s.app.ClientConfigHash()
}

func (s *OpenTracingAppLayer) ClientConfigWithComputed() map[string]string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClientConfigWithComputed")

	defer span.Finish()

	return s.app.ClientConfigWithComputed()
}

func (s *OpenTracingAppLayer) ClientLicense() map[string]string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ClientLicense")

	defer span.Finish()

	return s.app.ClientLicense()
}

func (s *OpenTracingAppLayer) CompareAndDeletePluginKey(pluginId string, key string, oldValue []byte) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CompareAndDeletePluginKey")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	span.SetTag("oldValue", oldValue)

	defer span.Finish()

	return s.app.CompareAndDeletePluginKey(pluginId, key, oldValue)
}

func (s *OpenTracingAppLayer) CompareAndSetPluginKey(pluginId string, key string, oldValue []byte, newValue []byte) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CompareAndSetPluginKey")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	span.SetTag("oldValue", oldValue)

	span.SetTag("newValue", newValue)

	defer span.Finish()

	return s.app.CompareAndSetPluginKey(pluginId, key, oldValue, newValue)
}

func (s *OpenTracingAppLayer) CompleteOAuth(service string, body io.ReadCloser, teamId string, props map[string]string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CompleteOAuth")

	span.SetTag("service", service)

	span.SetTag("body", body)

	span.SetTag("teamId", teamId)

	span.SetTag("props", props)

	defer span.Finish()

	return s.app.CompleteOAuth(service, body, teamId, props)
}

func (s *OpenTracingAppLayer) CompleteSwitchWithOAuth(service string, userData io.Reader, email string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CompleteSwitchWithOAuth")

	span.SetTag("service", service)

	span.SetTag("userData", userData)

	span.SetTag("email", email)

	defer span.Finish()

	return s.app.CompleteSwitchWithOAuth(service, userData, email)
}

func (s *OpenTracingAppLayer) Config() *model.Config {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.Config")

	defer span.Finish()

	return s.app.Config()
}

func (s *OpenTracingAppLayer) ConvertUserToBot(user *model.User) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ConvertUserToBot")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.ConvertUserToBot(user)
}

func (s *OpenTracingAppLayer) CopyFileInfos(userId string, fileIds []string) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CopyFileInfos")

	span.SetTag("userId", userId)

	span.SetTag("fileIds", fileIds)

	defer span.Finish()

	return s.app.CopyFileInfos(userId, fileIds)
}

func (s *OpenTracingAppLayer) CreateBasicUser(client *model.Client4) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateBasicUser")

	span.SetTag("client", client)

	defer span.Finish()

	return s.app.CreateBasicUser(client)
}

func (s *OpenTracingAppLayer) CreateBot(bot *model.Bot) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateBot")

	span.SetTag("bot", bot)

	defer span.Finish()

	return s.app.CreateBot(bot)
}

func (s *OpenTracingAppLayer) CreateChannel(channel *model.Channel, addMember bool) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateChannel")

	span.SetTag("channel", channel)

	span.SetTag("addMember", addMember)

	defer span.Finish()

	return s.app.CreateChannel(channel, addMember)
}

func (s *OpenTracingAppLayer) CreateChannelWithUser(channel *model.Channel, userId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateChannelWithUser")

	span.SetTag("channel", channel)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.CreateChannelWithUser(channel, userId)
}

func (s *OpenTracingAppLayer) CreateCommand(cmd *model.Command) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateCommand")

	span.SetTag("cmd", cmd)

	defer span.Finish()

	return s.app.CreateCommand(cmd)
}

func (s *OpenTracingAppLayer) CreateCommandPost(post *model.Post, teamId string, response *model.CommandResponse, skipSlackParsing bool) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateCommandPost")

	span.SetTag("post", post)

	span.SetTag("teamId", teamId)

	span.SetTag("response", response)

	span.SetTag("skipSlackParsing", skipSlackParsing)

	defer span.Finish()

	return s.app.CreateCommandPost(post, teamId, response, skipSlackParsing)
}

func (s *OpenTracingAppLayer) CreateCommandWebhook(commandId string, args *model.CommandArgs) (*model.CommandWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateCommandWebhook")

	span.SetTag("commandId", commandId)

	span.SetTag("args", args)

	defer span.Finish()

	return s.app.CreateCommandWebhook(commandId, args)
}

func (s *OpenTracingAppLayer) CreateDefaultChannels(teamID string) ([]*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateDefaultChannels")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.app.CreateDefaultChannels(teamID)
}

func (s *OpenTracingAppLayer) CreateDefaultMemberships(since int64) error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateDefaultMemberships")

	span.SetTag("since", since)

	defer span.Finish()

	return s.app.CreateDefaultMemberships(since)
}

func (s *OpenTracingAppLayer) CreateEmoji(sessionUserId string, emoji *model.Emoji, multiPartImageData *multipart.Form) (*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateEmoji")

	span.SetTag("sessionUserId", sessionUserId)

	span.SetTag("emoji", emoji)

	span.SetTag("multiPartImageData", multiPartImageData)

	defer span.Finish()

	return s.app.CreateEmoji(sessionUserId, emoji, multiPartImageData)
}

func (s *OpenTracingAppLayer) CreateGroup(group *model.Group) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateGroup")

	span.SetTag("group", group)

	defer span.Finish()

	return s.app.CreateGroup(group)
}

func (s *OpenTracingAppLayer) CreateGroupChannel(userIds []string, creatorId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateGroupChannel")

	span.SetTag("userIds", userIds)

	span.SetTag("creatorId", creatorId)

	defer span.Finish()

	return s.app.CreateGroupChannel(userIds, creatorId)
}

func (s *OpenTracingAppLayer) CreateGuest(user *model.User) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateGuest")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.CreateGuest(user)
}

func (s *OpenTracingAppLayer) CreateIncomingWebhookForChannel(creatorId string, channel *model.Channel, hook *model.IncomingWebhook) (*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateIncomingWebhookForChannel")

	span.SetTag("creatorId", creatorId)

	span.SetTag("channel", channel)

	span.SetTag("hook", hook)

	defer span.Finish()

	return s.app.CreateIncomingWebhookForChannel(creatorId, channel, hook)
}

func (s *OpenTracingAppLayer) CreateJob(job *model.Job) (*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateJob")

	span.SetTag("job", job)

	defer span.Finish()

	return s.app.CreateJob(job)
}

func (s *OpenTracingAppLayer) CreateOAuthApp(app *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateOAuthApp")

	span.SetTag("app", app)

	defer span.Finish()

	return s.app.CreateOAuthApp(app)
}

func (s *OpenTracingAppLayer) CreateOAuthStateToken(extra string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateOAuthStateToken")

	span.SetTag("extra", extra)

	defer span.Finish()

	return s.app.CreateOAuthStateToken(extra)
}

func (s *OpenTracingAppLayer) CreateOAuthUser(service string, userData io.Reader, teamId string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateOAuthUser")

	span.SetTag("service", service)

	span.SetTag("userData", userData)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.CreateOAuthUser(service, userData, teamId)
}

func (s *OpenTracingAppLayer) CreateOutgoingWebhook(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateOutgoingWebhook")

	span.SetTag("hook", hook)

	defer span.Finish()

	return s.app.CreateOutgoingWebhook(hook)
}

func (s *OpenTracingAppLayer) CreatePasswordRecoveryToken(userId string, email string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreatePasswordRecoveryToken")

	span.SetTag("userId", userId)

	span.SetTag("email", email)

	defer span.Finish()

	return s.app.CreatePasswordRecoveryToken(userId, email)
}

func (s *OpenTracingAppLayer) CreatePost(post *model.Post, channel *model.Channel, triggerWebhooks bool) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreatePost")

	span.SetTag("post", post)

	span.SetTag("channel", channel)

	span.SetTag("triggerWebhooks", triggerWebhooks)

	defer span.Finish()

	return s.app.CreatePost(post, channel, triggerWebhooks)
}

func (s *OpenTracingAppLayer) CreatePostAsUser(post *model.Post, currentSessionId string) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreatePostAsUser")

	span.SetTag("post", post)

	span.SetTag("currentSessionId", currentSessionId)

	defer span.Finish()

	return s.app.CreatePostAsUser(post, currentSessionId)
}

func (s *OpenTracingAppLayer) CreatePostMissingChannel(post *model.Post, triggerWebhooks bool) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreatePostMissingChannel")

	span.SetTag("post", post)

	span.SetTag("triggerWebhooks", triggerWebhooks)

	defer span.Finish()

	return s.app.CreatePostMissingChannel(post, triggerWebhooks)
}

func (s *OpenTracingAppLayer) CreatePushNotificationsHub() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreatePushNotificationsHub")

	defer span.Finish()

	s.app.CreatePushNotificationsHub()
}

func (s *OpenTracingAppLayer) CreateRole(role *model.Role) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateRole")

	span.SetTag("role", role)

	defer span.Finish()

	return s.app.CreateRole(role)
}

func (s *OpenTracingAppLayer) CreateScheme(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateScheme")

	span.SetTag("scheme", scheme)

	defer span.Finish()

	return s.app.CreateScheme(scheme)
}

func (s *OpenTracingAppLayer) CreateSession(session *model.Session) (*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateSession")

	span.SetTag("session", session)

	defer span.Finish()

	return s.app.CreateSession(session)
}

func (s *OpenTracingAppLayer) CreateTeam(team *model.Team) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateTeam")

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.CreateTeam(team)
}

func (s *OpenTracingAppLayer) CreateTeamWithUser(team *model.Team, userId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateTeamWithUser")

	span.SetTag("team", team)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.CreateTeamWithUser(team, userId)
}

func (s *OpenTracingAppLayer) CreateTermsOfService(text string, userId string) (*model.TermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateTermsOfService")

	span.SetTag("text", text)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.CreateTermsOfService(text, userId)
}

func (s *OpenTracingAppLayer) CreateUser(user *model.User) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateUser")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.CreateUser(user)
}

func (s *OpenTracingAppLayer) CreateUserAccessToken(token *model.UserAccessToken) (*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateUserAccessToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.CreateUserAccessToken(token)
}

func (s *OpenTracingAppLayer) CreateUserAsAdmin(user *model.User) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateUserAsAdmin")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.CreateUserAsAdmin(user)
}

func (s *OpenTracingAppLayer) CreateUserFromSignup(user *model.User) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateUserFromSignup")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.CreateUserFromSignup(user)
}

func (s *OpenTracingAppLayer) CreateUserWithInviteId(user *model.User, inviteId string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateUserWithInviteId")

	span.SetTag("user", user)

	span.SetTag("inviteId", inviteId)

	defer span.Finish()

	return s.app.CreateUserWithInviteId(user, inviteId)
}

func (s *OpenTracingAppLayer) CreateUserWithToken(user *model.User, token *model.Token) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateUserWithToken")

	span.SetTag("user", user)

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.CreateUserWithToken(user, token)
}

func (s *OpenTracingAppLayer) CreateVerifyEmailToken(userId string, newEmail string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateVerifyEmailToken")

	span.SetTag("userId", userId)

	span.SetTag("newEmail", newEmail)

	defer span.Finish()

	return s.app.CreateVerifyEmailToken(userId, newEmail)
}

func (s *OpenTracingAppLayer) CreateWebhookPost(userId string, channel *model.Channel, text string, overrideUsername string, overrideIconUrl string, overrideIconEmoji string, props model.StringInterface, postType string, postRootId string) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.CreateWebhookPost")

	span.SetTag("userId", userId)

	span.SetTag("channel", channel)

	span.SetTag("text", text)

	span.SetTag("overrideUsername", overrideUsername)

	span.SetTag("overrideIconUrl", overrideIconUrl)

	span.SetTag("overrideIconEmoji", overrideIconEmoji)

	span.SetTag("props", props)

	span.SetTag("postType", postType)

	span.SetTag("postRootId", postRootId)

	defer span.Finish()

	return s.app.CreateWebhookPost(userId, channel, text, overrideUsername, overrideIconUrl, overrideIconEmoji, props, postType, postRootId)
}

func (s *OpenTracingAppLayer) DeactivateGuests() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeactivateGuests")

	defer span.Finish()

	return s.app.DeactivateGuests()
}

func (s *OpenTracingAppLayer) DeactivateMfa(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeactivateMfa")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.DeactivateMfa(userId)
}

func (s *OpenTracingAppLayer) DeauthorizeOAuthAppForUser(userId string, appId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeauthorizeOAuthAppForUser")

	span.SetTag("userId", userId)

	span.SetTag("appId", appId)

	defer span.Finish()

	return s.app.DeauthorizeOAuthAppForUser(userId, appId)
}

func (s *OpenTracingAppLayer) DefaultChannelNames() []string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DefaultChannelNames")

	defer span.Finish()

	return s.app.DefaultChannelNames()
}

func (s *OpenTracingAppLayer) DeleteAllExpiredPluginKeys() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteAllExpiredPluginKeys")

	defer span.Finish()

	return s.app.DeleteAllExpiredPluginKeys()
}

func (s *OpenTracingAppLayer) DeleteAllKeysForPlugin(pluginId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteAllKeysForPlugin")

	span.SetTag("pluginId", pluginId)

	defer span.Finish()

	return s.app.DeleteAllKeysForPlugin(pluginId)
}

func (s *OpenTracingAppLayer) DeleteBotIconImage(botUserId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteBotIconImage")

	span.SetTag("botUserId", botUserId)

	defer span.Finish()

	return s.app.DeleteBotIconImage(botUserId)
}

func (s *OpenTracingAppLayer) DeleteBrandImage() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteBrandImage")

	defer span.Finish()

	return s.app.DeleteBrandImage()
}

func (s *OpenTracingAppLayer) DeleteChannel(channel *model.Channel, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteChannel")

	span.SetTag("channel", channel)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.DeleteChannel(channel, userId)
}

func (s *OpenTracingAppLayer) DeleteCommand(commandId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteCommand")

	span.SetTag("commandId", commandId)

	defer span.Finish()

	return s.app.DeleteCommand(commandId)
}

func (s *OpenTracingAppLayer) DeleteEmoji(emoji *model.Emoji) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteEmoji")

	span.SetTag("emoji", emoji)

	defer span.Finish()

	return s.app.DeleteEmoji(emoji)
}

func (s *OpenTracingAppLayer) DeleteEphemeralPost(userId string, postId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteEphemeralPost")

	span.SetTag("userId", userId)

	span.SetTag("postId", postId)

	defer span.Finish()

	s.app.DeleteEphemeralPost(userId, postId)
}

func (s *OpenTracingAppLayer) DeleteFlaggedPosts(postId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteFlaggedPosts")

	span.SetTag("postId", postId)

	defer span.Finish()

	s.app.DeleteFlaggedPosts(postId)
}

func (s *OpenTracingAppLayer) DeleteGroup(groupID string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteGroup")

	span.SetTag("groupID", groupID)

	defer span.Finish()

	return s.app.DeleteGroup(groupID)
}

func (s *OpenTracingAppLayer) DeleteGroupConstrainedMemberships() error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteGroupConstrainedMemberships")

	defer span.Finish()

	return s.app.DeleteGroupConstrainedMemberships()
}

func (s *OpenTracingAppLayer) DeleteGroupMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteGroupMember")

	span.SetTag("groupID", groupID)

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.app.DeleteGroupMember(groupID, userID)
}

func (s *OpenTracingAppLayer) DeleteGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteGroupSyncable")

	span.SetTag("groupID", groupID)

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.app.DeleteGroupSyncable(groupID, syncableID, syncableType)
}

func (s *OpenTracingAppLayer) DeleteIncomingWebhook(hookId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteIncomingWebhook")

	span.SetTag("hookId", hookId)

	defer span.Finish()

	return s.app.DeleteIncomingWebhook(hookId)
}

func (s *OpenTracingAppLayer) DeleteOAuthApp(appId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteOAuthApp")

	span.SetTag("appId", appId)

	defer span.Finish()

	return s.app.DeleteOAuthApp(appId)
}

func (s *OpenTracingAppLayer) DeleteOutgoingWebhook(hookId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteOutgoingWebhook")

	span.SetTag("hookId", hookId)

	defer span.Finish()

	return s.app.DeleteOutgoingWebhook(hookId)
}

func (s *OpenTracingAppLayer) DeletePluginKey(pluginId string, key string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeletePluginKey")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	defer span.Finish()

	return s.app.DeletePluginKey(pluginId, key)
}

func (s *OpenTracingAppLayer) DeletePost(postId string, deleteByID string) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeletePost")

	span.SetTag("postId", postId)

	span.SetTag("deleteByID", deleteByID)

	defer span.Finish()

	return s.app.DeletePost(postId, deleteByID)
}

func (s *OpenTracingAppLayer) DeletePostFiles(post *model.Post) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeletePostFiles")

	span.SetTag("post", post)

	defer span.Finish()

	s.app.DeletePostFiles(post)
}

func (s *OpenTracingAppLayer) DeletePreferences(userId string, preferences model.Preferences) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeletePreferences")

	span.SetTag("userId", userId)

	span.SetTag("preferences", preferences)

	defer span.Finish()

	return s.app.DeletePreferences(userId, preferences)
}

func (s *OpenTracingAppLayer) DeletePublicKey(name string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeletePublicKey")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.DeletePublicKey(name)
}

func (s *OpenTracingAppLayer) DeleteReactionForPost(reaction *model.Reaction) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteReactionForPost")

	span.SetTag("reaction", reaction)

	defer span.Finish()

	return s.app.DeleteReactionForPost(reaction)
}

func (s *OpenTracingAppLayer) DeleteScheme(schemeId string) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteScheme")

	span.SetTag("schemeId", schemeId)

	defer span.Finish()

	return s.app.DeleteScheme(schemeId)
}

func (s *OpenTracingAppLayer) DeleteToken(token *model.Token) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DeleteToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.DeleteToken(token)
}

func (s *OpenTracingAppLayer) DemoteUserToGuest(user *model.User) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DemoteUserToGuest")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.DemoteUserToGuest(user)
}

func (s *OpenTracingAppLayer) DiagnosticId() string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DiagnosticId")

	defer span.Finish()

	return s.app.DiagnosticId()
}

func (s *OpenTracingAppLayer) DisableAutoResponder(userId string, asAdmin bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DisableAutoResponder")

	span.SetTag("userId", userId)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.DisableAutoResponder(userId, asAdmin)
}

func (s *OpenTracingAppLayer) DisablePlugin(id string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DisablePlugin")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.DisablePlugin(id)
}

func (s *OpenTracingAppLayer) DisableUserAccessToken(token *model.UserAccessToken) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DisableUserAccessToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.DisableUserAccessToken(token)
}

func (s *OpenTracingAppLayer) DoActionRequest(rawURL string, body []byte) (*http.Response, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoActionRequest")

	span.SetTag("rawURL", rawURL)

	span.SetTag("body", body)

	defer span.Finish()

	return s.app.DoActionRequest(rawURL, body)
}

func (s *OpenTracingAppLayer) DoAdvancedPermissionsMigration() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoAdvancedPermissionsMigration")

	defer span.Finish()

	s.app.DoAdvancedPermissionsMigration()
}

func (s *OpenTracingAppLayer) DoAppMigrations() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoAppMigrations")

	defer span.Finish()

	s.app.DoAppMigrations()
}

func (s *OpenTracingAppLayer) DoEmojisPermissionsMigration() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoEmojisPermissionsMigration")

	defer span.Finish()

	s.app.DoEmojisPermissionsMigration()
}

func (s *OpenTracingAppLayer) DoGuestRolesCreationMigration() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoGuestRolesCreationMigration")

	defer span.Finish()

	s.app.DoGuestRolesCreationMigration()
}

func (s *OpenTracingAppLayer) DoLocalRequest(rawURL string, body []byte) (*http.Response, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoLocalRequest")

	span.SetTag("rawURL", rawURL)

	span.SetTag("body", body)

	defer span.Finish()

	return s.app.DoLocalRequest(rawURL, body)
}

func (s *OpenTracingAppLayer) DoLogin(w http.ResponseWriter, r *http.Request, user *model.User, deviceId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoLogin")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("user", user)

	span.SetTag("deviceId", deviceId)

	defer span.Finish()

	return s.app.DoLogin(w, r, user, deviceId)
}

func (s *OpenTracingAppLayer) DoPermissionsMigrations() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoPermissionsMigrations")

	defer span.Finish()

	return s.app.DoPermissionsMigrations()
}

func (s *OpenTracingAppLayer) DoPostAction(postId string, actionId string, userId string, selectedOption string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoPostAction")

	span.SetTag("postId", postId)

	span.SetTag("actionId", actionId)

	span.SetTag("userId", userId)

	span.SetTag("selectedOption", selectedOption)

	defer span.Finish()

	return s.app.DoPostAction(postId, actionId, userId, selectedOption)
}

func (s *OpenTracingAppLayer) DoPostActionWithCookie(postId string, actionId string, userId string, selectedOption string, cookie *model.PostActionCookie) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoPostActionWithCookie")

	span.SetTag("postId", postId)

	span.SetTag("actionId", actionId)

	span.SetTag("userId", userId)

	span.SetTag("selectedOption", selectedOption)

	span.SetTag("cookie", cookie)

	defer span.Finish()

	return s.app.DoPostActionWithCookie(postId, actionId, userId, selectedOption, cookie)
}

func (s *OpenTracingAppLayer) DoUploadFile(now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoUploadFile")

	span.SetTag("now", now)

	span.SetTag("rawTeamId", rawTeamId)

	span.SetTag("rawChannelId", rawChannelId)

	span.SetTag("rawUserId", rawUserId)

	span.SetTag("rawFilename", rawFilename)

	span.SetTag("data", data)

	defer span.Finish()

	return s.app.DoUploadFile(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)
}

func (s *OpenTracingAppLayer) DoUploadFileExpectModification(now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*model.FileInfo, []byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoUploadFileExpectModification")

	span.SetTag("now", now)

	span.SetTag("rawTeamId", rawTeamId)

	span.SetTag("rawChannelId", rawChannelId)

	span.SetTag("rawUserId", rawUserId)

	span.SetTag("rawFilename", rawFilename)

	span.SetTag("data", data)

	defer span.Finish()

	return s.app.DoUploadFileExpectModification(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)
}

func (s *OpenTracingAppLayer) DoubleCheckPassword(user *model.User, password string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DoubleCheckPassword")

	span.SetTag("user", user)

	span.SetTag("password", password)

	defer span.Finish()

	return s.app.DoubleCheckPassword(user, password)
}

func (s *OpenTracingAppLayer) DownloadFromURL(downloadURL string) ([]byte, error) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.DownloadFromURL")

	span.SetTag("downloadURL", downloadURL)

	defer span.Finish()

	return s.app.DownloadFromURL(downloadURL)
}

func (s *OpenTracingAppLayer) EnablePlugin(id string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.EnablePlugin")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.EnablePlugin(id)
}

func (s *OpenTracingAppLayer) EnableUserAccessToken(token *model.UserAccessToken) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.EnableUserAccessToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.EnableUserAccessToken(token)
}

func (s *OpenTracingAppLayer) EnsureDiagnosticId() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.EnsureDiagnosticId")

	defer span.Finish()

	s.app.EnsureDiagnosticId()
}

func (s *OpenTracingAppLayer) EnvironmentConfig() map[string]interface{} {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.EnvironmentConfig")

	defer span.Finish()

	return s.app.EnvironmentConfig()
}

func (s *OpenTracingAppLayer) ExecuteCommand(args *model.CommandArgs) (*model.CommandResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExecuteCommand")

	span.SetTag("args", args)

	defer span.Finish()

	return s.app.ExecuteCommand(args)
}

func (s *OpenTracingAppLayer) ExportAllChannels(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportAllChannels")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportAllChannels(writer)
}

func (s *OpenTracingAppLayer) ExportAllDirectChannels(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportAllDirectChannels")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportAllDirectChannels(writer)
}

func (s *OpenTracingAppLayer) ExportAllDirectPosts(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportAllDirectPosts")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportAllDirectPosts(writer)
}

func (s *OpenTracingAppLayer) ExportAllPosts(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportAllPosts")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportAllPosts(writer)
}

func (s *OpenTracingAppLayer) ExportAllTeams(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportAllTeams")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportAllTeams(writer)
}

func (s *OpenTracingAppLayer) ExportAllUsers(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportAllUsers")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportAllUsers(writer)
}

func (s *OpenTracingAppLayer) ExportCustomEmoji(writer io.Writer, file string, pathToEmojiDir string, dirNameToExportEmoji string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportCustomEmoji")

	span.SetTag("writer", writer)

	span.SetTag("file", file)

	span.SetTag("pathToEmojiDir", pathToEmojiDir)

	span.SetTag("dirNameToExportEmoji", dirNameToExportEmoji)

	defer span.Finish()

	return s.app.ExportCustomEmoji(writer, file, pathToEmojiDir, dirNameToExportEmoji)
}

func (s *OpenTracingAppLayer) ExportPermissions(w io.Writer) error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportPermissions")

	span.SetTag("w", w)

	defer span.Finish()

	return s.app.ExportPermissions(w)
}

func (s *OpenTracingAppLayer) ExportVersion(writer io.Writer) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportVersion")

	span.SetTag("writer", writer)

	defer span.Finish()

	return s.app.ExportVersion(writer)
}

func (s *OpenTracingAppLayer) ExportWriteLine(writer io.Writer, line *LineImportData) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ExportWriteLine")

	span.SetTag("writer", writer)

	span.SetTag("line", line)

	defer span.Finish()

	return s.app.ExportWriteLine(writer, line)
}

func (s *OpenTracingAppLayer) FetchSamlMetadataFromIdp(url string) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FetchSamlMetadataFromIdp")

	span.SetTag("url", url)

	defer span.Finish()

	return s.app.FetchSamlMetadataFromIdp(url)
}

func (s *OpenTracingAppLayer) FileBackend() (filesstore.FileBackend, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FileBackend")

	defer span.Finish()

	return s.app.FileBackend()
}

func (s *OpenTracingAppLayer) FileExists(path string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FileExists")

	span.SetTag("path", path)

	defer span.Finish()

	return s.app.FileExists(path)
}

func (s *OpenTracingAppLayer) FileReader(path string) (filesstore.ReadCloseSeeker, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FileReader")

	span.SetTag("path", path)

	defer span.Finish()

	return s.app.FileReader(path)
}

func (s *OpenTracingAppLayer) FillInChannelProps(channel *model.Channel) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FillInChannelProps")

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.FillInChannelProps(channel)
}

func (s *OpenTracingAppLayer) FillInChannelsProps(channelList *model.ChannelList) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FillInChannelsProps")

	span.SetTag("channelList", channelList)

	defer span.Finish()

	return s.app.FillInChannelsProps(channelList)
}

func (s *OpenTracingAppLayer) FillInPostProps(post *model.Post, channel *model.Channel) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FillInPostProps")

	span.SetTag("post", post)

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.FillInPostProps(post, channel)
}

func (s *OpenTracingAppLayer) FilterNonGroupChannelMembers(userIds []string, channel *model.Channel) ([]string, error) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FilterNonGroupChannelMembers")

	span.SetTag("userIds", userIds)

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.FilterNonGroupChannelMembers(userIds, channel)
}

func (s *OpenTracingAppLayer) FilterNonGroupTeamMembers(userIds []string, team *model.Team) ([]string, error) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FilterNonGroupTeamMembers")

	span.SetTag("userIds", userIds)

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.FilterNonGroupTeamMembers(userIds, team)
}

func (s *OpenTracingAppLayer) FindTeamByName(name string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.FindTeamByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.FindTeamByName(name)
}

func (s *OpenTracingAppLayer) GenerateMfaSecret(userId string) (*model.MfaSecret, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GenerateMfaSecret")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GenerateMfaSecret(userId)
}

func (s *OpenTracingAppLayer) GeneratePublicLink(siteURL string, info *model.FileInfo) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GeneratePublicLink")

	span.SetTag("siteURL", siteURL)

	span.SetTag("info", info)

	defer span.Finish()

	return s.app.GeneratePublicLink(siteURL, info)
}

func (s *OpenTracingAppLayer) GetActivePluginManifests() ([]*model.Manifest, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetActivePluginManifests")

	defer span.Finish()

	return s.app.GetActivePluginManifests()
}

func (s *OpenTracingAppLayer) GetAllChannels(page int, perPage int, opts model.ChannelSearchOpts) (*model.ChannelListWithTeamData, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllChannels")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.GetAllChannels(page, perPage, opts)
}

func (s *OpenTracingAppLayer) GetAllChannelsCount(opts model.ChannelSearchOpts) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllChannelsCount")

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.GetAllChannelsCount(opts)
}

func (s *OpenTracingAppLayer) GetAllLdapGroupsPage(page int, perPage int, opts model.LdapGroupSearchOpts) ([]*model.Group, int, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllLdapGroupsPage")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.GetAllLdapGroupsPage(page, perPage, opts)
}

func (s *OpenTracingAppLayer) GetAllPrivateTeams() ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllPrivateTeams")

	defer span.Finish()

	return s.app.GetAllPrivateTeams()
}

func (s *OpenTracingAppLayer) GetAllPrivateTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllPrivateTeamsPage")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAllPrivateTeamsPage(offset, limit)
}

func (s *OpenTracingAppLayer) GetAllPrivateTeamsPageWithCount(offset int, limit int) (*model.TeamsWithCount, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllPrivateTeamsPageWithCount")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAllPrivateTeamsPageWithCount(offset, limit)
}

func (s *OpenTracingAppLayer) GetAllPublicTeams() ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllPublicTeams")

	defer span.Finish()

	return s.app.GetAllPublicTeams()
}

func (s *OpenTracingAppLayer) GetAllPublicTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllPublicTeamsPage")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAllPublicTeamsPage(offset, limit)
}

func (s *OpenTracingAppLayer) GetAllPublicTeamsPageWithCount(offset int, limit int) (*model.TeamsWithCount, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllPublicTeamsPageWithCount")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAllPublicTeamsPageWithCount(offset, limit)
}

func (s *OpenTracingAppLayer) GetAllRoles() ([]*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllRoles")

	defer span.Finish()

	return s.app.GetAllRoles()
}

func (s *OpenTracingAppLayer) GetAllStatuses() map[string]*model.Status {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllStatuses")

	defer span.Finish()

	return s.app.GetAllStatuses()
}

func (s *OpenTracingAppLayer) GetAllTeams() ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllTeams")

	defer span.Finish()

	return s.app.GetAllTeams()
}

func (s *OpenTracingAppLayer) GetAllTeamsPage(offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllTeamsPage")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAllTeamsPage(offset, limit)
}

func (s *OpenTracingAppLayer) GetAllTeamsPageWithCount(offset int, limit int) (*model.TeamsWithCount, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAllTeamsPageWithCount")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAllTeamsPageWithCount(offset, limit)
}

func (s *OpenTracingAppLayer) GetAnalytics(name string, teamId string) (model.AnalyticsRows, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAnalytics")

	span.SetTag("name", name)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetAnalytics(name, teamId)
}

func (s *OpenTracingAppLayer) GetAudits(userId string, limit int) (model.Audits, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAudits")

	span.SetTag("userId", userId)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetAudits(userId, limit)
}

func (s *OpenTracingAppLayer) GetAuditsPage(userId string, page int, perPage int) (model.Audits, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAuditsPage")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetAuditsPage(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetAuthorizationCode(w http.ResponseWriter, r *http.Request, service string, props map[string]string, loginHint string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAuthorizationCode")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("service", service)

	span.SetTag("props", props)

	span.SetTag("loginHint", loginHint)

	defer span.Finish()

	return s.app.GetAuthorizationCode(w, r, service, props, loginHint)
}

func (s *OpenTracingAppLayer) GetAuthorizedAppsForUser(userId string, page int, perPage int) ([]*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetAuthorizedAppsForUser")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetAuthorizedAppsForUser(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetBot(botUserId string, includeDeleted bool) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetBot")

	span.SetTag("botUserId", botUserId)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.app.GetBot(botUserId, includeDeleted)
}

func (s *OpenTracingAppLayer) GetBotIconImage(botUserId string) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetBotIconImage")

	span.SetTag("botUserId", botUserId)

	defer span.Finish()

	return s.app.GetBotIconImage(botUserId)
}

func (s *OpenTracingAppLayer) GetBots(options *model.BotGetOptions) (model.BotList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetBots")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetBots(options)
}

func (s *OpenTracingAppLayer) GetBrandImage() ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetBrandImage")

	defer span.Finish()

	return s.app.GetBrandImage()
}

func (s *OpenTracingAppLayer) GetBulkReactionsForPosts(postIds []string) (map[string][]*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetBulkReactionsForPosts")

	span.SetTag("postIds", postIds)

	defer span.Finish()

	return s.app.GetBulkReactionsForPosts(postIds)
}

func (s *OpenTracingAppLayer) GetChannel(channelId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetChannel(channelId)
}

func (s *OpenTracingAppLayer) GetChannelByName(channelName string, teamId string, includeDeleted bool) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelByName")

	span.SetTag("channelName", channelName)

	span.SetTag("teamId", teamId)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.app.GetChannelByName(channelName, teamId, includeDeleted)
}

func (s *OpenTracingAppLayer) GetChannelByNameForTeamName(channelName string, teamName string, includeDeleted bool) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelByNameForTeamName")

	span.SetTag("channelName", channelName)

	span.SetTag("teamName", teamName)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.app.GetChannelByNameForTeamName(channelName, teamName, includeDeleted)
}

func (s *OpenTracingAppLayer) GetChannelCounts(teamId string, userId string) (*model.ChannelCounts, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelCounts")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetChannelCounts(teamId, userId)
}

func (s *OpenTracingAppLayer) GetChannelGroupUsers(channelID string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelGroupUsers")

	span.SetTag("channelID", channelID)

	defer span.Finish()

	return s.app.GetChannelGroupUsers(channelID)
}

func (s *OpenTracingAppLayer) GetChannelGuestCount(channelId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelGuestCount")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetChannelGuestCount(channelId)
}

func (s *OpenTracingAppLayer) GetChannelMember(channelId string, userId string) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMember")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetChannelMember(channelId, userId)
}

func (s *OpenTracingAppLayer) GetChannelMemberCount(channelId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMemberCount")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetChannelMemberCount(channelId)
}

func (s *OpenTracingAppLayer) GetChannelMembersByIds(channelId string, userIds []string) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMembersByIds")

	span.SetTag("channelId", channelId)

	span.SetTag("userIds", userIds)

	defer span.Finish()

	return s.app.GetChannelMembersByIds(channelId, userIds)
}

func (s *OpenTracingAppLayer) GetChannelMembersForUser(teamId string, userId string) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMembersForUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetChannelMembersForUser(teamId, userId)
}

func (s *OpenTracingAppLayer) GetChannelMembersForUserWithPagination(teamId string, userId string, page int, perPage int) ([]*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMembersForUserWithPagination")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetChannelMembersForUserWithPagination(teamId, userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetChannelMembersPage(channelId string, page int, perPage int) (*model.ChannelMembers, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMembersPage")

	span.SetTag("channelId", channelId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetChannelMembersPage(channelId, page, perPage)
}

func (s *OpenTracingAppLayer) GetChannelMembersTimezones(channelId string) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelMembersTimezones")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetChannelMembersTimezones(channelId)
}

func (s *OpenTracingAppLayer) GetChannelPinnedPostCount(channelId string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelPinnedPostCount")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetChannelPinnedPostCount(channelId)
}

func (s *OpenTracingAppLayer) GetChannelUnread(channelId string, userId string) (*model.ChannelUnread, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelUnread")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetChannelUnread(channelId, userId)
}

func (s *OpenTracingAppLayer) GetChannelsByNames(channelNames []string, teamId string) ([]*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelsByNames")

	span.SetTag("channelNames", channelNames)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetChannelsByNames(channelNames, teamId)
}

func (s *OpenTracingAppLayer) GetChannelsForScheme(scheme *model.Scheme, offset int, limit int) (model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelsForScheme")

	span.SetTag("scheme", scheme)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetChannelsForScheme(scheme, offset, limit)
}

func (s *OpenTracingAppLayer) GetChannelsForSchemePage(scheme *model.Scheme, page int, perPage int) (model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelsForSchemePage")

	span.SetTag("scheme", scheme)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetChannelsForSchemePage(scheme, page, perPage)
}

func (s *OpenTracingAppLayer) GetChannelsForUser(teamId string, userId string, includeDeleted bool) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelsForUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("includeDeleted", includeDeleted)

	defer span.Finish()

	return s.app.GetChannelsForUser(teamId, userId, includeDeleted)
}

func (s *OpenTracingAppLayer) GetChannelsUserNotIn(teamId string, userId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetChannelsUserNotIn")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetChannelsUserNotIn(teamId, userId, offset, limit)
}

func (s *OpenTracingAppLayer) GetClusterId() string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetClusterId")

	defer span.Finish()

	return s.app.GetClusterId()
}

func (s *OpenTracingAppLayer) GetClusterPluginStatuses() (model.PluginStatuses, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetClusterPluginStatuses")

	defer span.Finish()

	return s.app.GetClusterPluginStatuses()
}

func (s *OpenTracingAppLayer) GetClusterStatus() []*model.ClusterInfo {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetClusterStatus")

	defer span.Finish()

	return s.app.GetClusterStatus()
}

func (s *OpenTracingAppLayer) GetCommand(commandId string) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetCommand")

	span.SetTag("commandId", commandId)

	defer span.Finish()

	return s.app.GetCommand(commandId)
}

func (s *OpenTracingAppLayer) GetComplianceFile(job *model.Compliance) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetComplianceFile")

	span.SetTag("job", job)

	defer span.Finish()

	return s.app.GetComplianceFile(job)
}

func (s *OpenTracingAppLayer) GetComplianceReport(reportId string) (*model.Compliance, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetComplianceReport")

	span.SetTag("reportId", reportId)

	defer span.Finish()

	return s.app.GetComplianceReport(reportId)
}

func (s *OpenTracingAppLayer) GetComplianceReports(page int, perPage int) (model.Compliances, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetComplianceReports")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetComplianceReports(page, perPage)
}

func (s *OpenTracingAppLayer) GetConfigFile(name string) ([]byte, error) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetConfigFile")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.GetConfigFile(name)
}

func (s *OpenTracingAppLayer) GetCookieDomain() string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetCookieDomain")

	defer span.Finish()

	return s.app.GetCookieDomain()
}

func (s *OpenTracingAppLayer) GetDataRetentionPolicy() (*model.DataRetentionPolicy, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetDataRetentionPolicy")

	defer span.Finish()

	return s.app.GetDataRetentionPolicy()
}

func (s *OpenTracingAppLayer) GetDefaultProfileImage(user *model.User) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetDefaultProfileImage")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.GetDefaultProfileImage(user)
}

func (s *OpenTracingAppLayer) GetDeletedChannels(teamId string, offset int, limit int, userId string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetDeletedChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetDeletedChannels(teamId, offset, limit, userId)
}

func (s *OpenTracingAppLayer) GetEmoji(emojiId string) (*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetEmoji")

	span.SetTag("emojiId", emojiId)

	defer span.Finish()

	return s.app.GetEmoji(emojiId)
}

func (s *OpenTracingAppLayer) GetEmojiByName(emojiName string) (*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetEmojiByName")

	span.SetTag("emojiName", emojiName)

	defer span.Finish()

	return s.app.GetEmojiByName(emojiName)
}

func (s *OpenTracingAppLayer) GetEmojiImage(emojiId string) ([]byte, string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetEmojiImage")

	span.SetTag("emojiId", emojiId)

	defer span.Finish()

	return s.app.GetEmojiImage(emojiId)
}

func (s *OpenTracingAppLayer) GetEmojiList(page int, perPage int, sort string) ([]*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetEmojiList")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("sort", sort)

	defer span.Finish()

	return s.app.GetEmojiList(page, perPage, sort)
}

func (s *OpenTracingAppLayer) GetEmojiStaticUrl(emojiName string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetEmojiStaticUrl")

	span.SetTag("emojiName", emojiName)

	defer span.Finish()

	return s.app.GetEmojiStaticUrl(emojiName)
}

func (s *OpenTracingAppLayer) GetEnvironmentConfig() map[string]interface{} {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetEnvironmentConfig")

	defer span.Finish()

	return s.app.GetEnvironmentConfig()
}

func (s *OpenTracingAppLayer) GetFile(fileId string) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFile")

	span.SetTag("fileId", fileId)

	defer span.Finish()

	return s.app.GetFile(fileId)
}

func (s *OpenTracingAppLayer) GetFileInfo(fileId string) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFileInfo")

	span.SetTag("fileId", fileId)

	defer span.Finish()

	return s.app.GetFileInfo(fileId)
}

func (s *OpenTracingAppLayer) GetFileInfosForPost(postId string, fromMaster bool) ([]*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFileInfosForPost")

	span.SetTag("postId", postId)

	span.SetTag("fromMaster", fromMaster)

	defer span.Finish()

	return s.app.GetFileInfosForPost(postId, fromMaster)
}

func (s *OpenTracingAppLayer) GetFileInfosForPostWithMigration(postId string) ([]*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFileInfosForPostWithMigration")

	span.SetTag("postId", postId)

	defer span.Finish()

	return s.app.GetFileInfosForPostWithMigration(postId)
}

func (s *OpenTracingAppLayer) GetFlaggedPosts(userId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFlaggedPosts")

	span.SetTag("userId", userId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetFlaggedPosts(userId, offset, limit)
}

func (s *OpenTracingAppLayer) GetFlaggedPostsForChannel(userId string, channelId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFlaggedPostsForChannel")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetFlaggedPostsForChannel(userId, channelId, offset, limit)
}

func (s *OpenTracingAppLayer) GetFlaggedPostsForTeam(userId string, teamId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetFlaggedPostsForTeam")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetFlaggedPostsForTeam(userId, teamId, offset, limit)
}

func (s *OpenTracingAppLayer) GetGroup(id string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroup")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.GetGroup(id)
}

func (s *OpenTracingAppLayer) GetGroupByName(name string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.GetGroupByName(name)
}

func (s *OpenTracingAppLayer) GetGroupByRemoteID(remoteID string, groupSource model.GroupSource) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupByRemoteID")

	span.SetTag("remoteID", remoteID)

	span.SetTag("groupSource", groupSource)

	defer span.Finish()

	return s.app.GetGroupByRemoteID(remoteID, groupSource)
}

func (s *OpenTracingAppLayer) GetGroupChannel(userIds []string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupChannel")

	span.SetTag("userIds", userIds)

	defer span.Finish()

	return s.app.GetGroupChannel(userIds)
}

func (s *OpenTracingAppLayer) GetGroupMemberUsers(groupID string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupMemberUsers")

	span.SetTag("groupID", groupID)

	defer span.Finish()

	return s.app.GetGroupMemberUsers(groupID)
}

func (s *OpenTracingAppLayer) GetGroupMemberUsersPage(groupID string, page int, perPage int) ([]*model.User, int, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupMemberUsersPage")

	span.SetTag("groupID", groupID)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetGroupMemberUsersPage(groupID, page, perPage)
}

func (s *OpenTracingAppLayer) GetGroupSyncable(groupID string, syncableID string, syncableType model.GroupSyncableType) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupSyncable")

	span.SetTag("groupID", groupID)

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.app.GetGroupSyncable(groupID, syncableID, syncableType)
}

func (s *OpenTracingAppLayer) GetGroupSyncables(groupID string, syncableType model.GroupSyncableType) ([]*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupSyncables")

	span.SetTag("groupID", groupID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.app.GetGroupSyncables(groupID, syncableType)
}

func (s *OpenTracingAppLayer) GetGroups(page int, perPage int, opts model.GroupSearchOpts) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroups")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.GetGroups(page, perPage, opts)
}

func (s *OpenTracingAppLayer) GetGroupsByChannel(channelId string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupsByChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.GetGroupsByChannel(channelId, opts)
}

func (s *OpenTracingAppLayer) GetGroupsByIDs(groupIDs []string) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupsByIDs")

	span.SetTag("groupIDs", groupIDs)

	defer span.Finish()

	return s.app.GetGroupsByIDs(groupIDs)
}

func (s *OpenTracingAppLayer) GetGroupsBySource(groupSource model.GroupSource) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupsBySource")

	span.SetTag("groupSource", groupSource)

	defer span.Finish()

	return s.app.GetGroupsBySource(groupSource)
}

func (s *OpenTracingAppLayer) GetGroupsByTeam(teamId string, opts model.GroupSearchOpts) ([]*model.GroupWithSchemeAdmin, int, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupsByTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.GetGroupsByTeam(teamId, opts)
}

func (s *OpenTracingAppLayer) GetGroupsByUserId(userId string) ([]*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetGroupsByUserId")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetGroupsByUserId(userId)
}

func (s *OpenTracingAppLayer) GetHubForUserId(userId string) *Hub {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetHubForUserId")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetHubForUserId(userId)
}

func (s *OpenTracingAppLayer) GetIncomingWebhook(hookId string) (*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetIncomingWebhook")

	span.SetTag("hookId", hookId)

	defer span.Finish()

	return s.app.GetIncomingWebhook(hookId)
}

func (s *OpenTracingAppLayer) GetIncomingWebhooksForTeamPage(teamId string, page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetIncomingWebhooksForTeamPage")

	span.SetTag("teamId", teamId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetIncomingWebhooksForTeamPage(teamId, page, perPage)
}

func (s *OpenTracingAppLayer) GetIncomingWebhooksForTeamPageByUser(teamId string, userId string, page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetIncomingWebhooksForTeamPageByUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetIncomingWebhooksForTeamPageByUser(teamId, userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetIncomingWebhooksPage(page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetIncomingWebhooksPage")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetIncomingWebhooksPage(page, perPage)
}

func (s *OpenTracingAppLayer) GetIncomingWebhooksPageByUser(userId string, page int, perPage int) ([]*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetIncomingWebhooksPageByUser")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetIncomingWebhooksPageByUser(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetJob(id string) (*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetJob")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.GetJob(id)
}

func (s *OpenTracingAppLayer) GetJobs(offset int, limit int) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetJobs")

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetJobs(offset, limit)
}

func (s *OpenTracingAppLayer) GetJobsByType(jobType string, offset int, limit int) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetJobsByType")

	span.SetTag("jobType", jobType)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetJobsByType(jobType, offset, limit)
}

func (s *OpenTracingAppLayer) GetJobsByTypePage(jobType string, page int, perPage int) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetJobsByTypePage")

	span.SetTag("jobType", jobType)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetJobsByTypePage(jobType, page, perPage)
}

func (s *OpenTracingAppLayer) GetJobsPage(page int, perPage int) ([]*model.Job, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetJobsPage")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetJobsPage(page, perPage)
}

func (s *OpenTracingAppLayer) GetLatestTermsOfService() (*model.TermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetLatestTermsOfService")

	defer span.Finish()

	return s.app.GetLatestTermsOfService()
}

func (s *OpenTracingAppLayer) GetLdapGroup(ldapGroupID string) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetLdapGroup")

	span.SetTag("ldapGroupID", ldapGroupID)

	defer span.Finish()

	return s.app.GetLdapGroup(ldapGroupID)
}

func (s *OpenTracingAppLayer) GetLogs(page int, perPage int) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetLogs")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetLogs(page, perPage)
}

func (s *OpenTracingAppLayer) GetLogsSkipSend(page int, perPage int) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetLogsSkipSend")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetLogsSkipSend(page, perPage)
}

func (s *OpenTracingAppLayer) GetMarketplacePlugins(filter *model.MarketplacePluginFilter) ([]*model.MarketplacePlugin, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetMarketplacePlugins")

	span.SetTag("filter", filter)

	defer span.Finish()

	return s.app.GetMarketplacePlugins(filter)
}

func (s *OpenTracingAppLayer) GetMessageForNotification(post *model.Post, translateFunc i18n.TranslateFunc) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetMessageForNotification")

	span.SetTag("post", post)

	span.SetTag("translateFunc", translateFunc)

	defer span.Finish()

	return s.app.GetMessageForNotification(post, translateFunc)
}

func (s *OpenTracingAppLayer) GetMultipleEmojiByName(names []string) ([]*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetMultipleEmojiByName")

	span.SetTag("names", names)

	defer span.Finish()

	return s.app.GetMultipleEmojiByName(names)
}

func (s *OpenTracingAppLayer) GetNewUsersForTeamPage(teamId string, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetNewUsersForTeamPage")

	span.SetTag("teamId", teamId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("asAdmin", asAdmin)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetNewUsersForTeamPage(teamId, page, perPage, asAdmin, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetNextPostIdFromPostList(postList *model.PostList) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetNextPostIdFromPostList")

	span.SetTag("postList", postList)

	defer span.Finish()

	return s.app.GetNextPostIdFromPostList(postList)
}

func (s *OpenTracingAppLayer) GetNotificationNameFormat(user *model.User) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetNotificationNameFormat")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.GetNotificationNameFormat(user)
}

func (s *OpenTracingAppLayer) GetNumberOfChannelsOnTeam(teamId string) (int, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetNumberOfChannelsOnTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetNumberOfChannelsOnTeam(teamId)
}

func (s *OpenTracingAppLayer) GetOAuthAccessTokenForCodeFlow(clientId string, grantType string, redirectUri string, code string, secret string, refreshToken string) (*model.AccessResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthAccessTokenForCodeFlow")

	span.SetTag("clientId", clientId)

	span.SetTag("grantType", grantType)

	span.SetTag("redirectUri", redirectUri)

	span.SetTag("code", code)

	span.SetTag("secret", secret)

	span.SetTag("refreshToken", refreshToken)

	defer span.Finish()

	return s.app.GetOAuthAccessTokenForCodeFlow(clientId, grantType, redirectUri, code, secret, refreshToken)
}

func (s *OpenTracingAppLayer) GetOAuthAccessTokenForImplicitFlow(userId string, authRequest *model.AuthorizeRequest) (*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthAccessTokenForImplicitFlow")

	span.SetTag("userId", userId)

	span.SetTag("authRequest", authRequest)

	defer span.Finish()

	return s.app.GetOAuthAccessTokenForImplicitFlow(userId, authRequest)
}

func (s *OpenTracingAppLayer) GetOAuthApp(appId string) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthApp")

	span.SetTag("appId", appId)

	defer span.Finish()

	return s.app.GetOAuthApp(appId)
}

func (s *OpenTracingAppLayer) GetOAuthApps(page int, perPage int) ([]*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthApps")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOAuthApps(page, perPage)
}

func (s *OpenTracingAppLayer) GetOAuthAppsByCreator(userId string, page int, perPage int) ([]*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthAppsByCreator")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOAuthAppsByCreator(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetOAuthCodeRedirect(userId string, authRequest *model.AuthorizeRequest) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthCodeRedirect")

	span.SetTag("userId", userId)

	span.SetTag("authRequest", authRequest)

	defer span.Finish()

	return s.app.GetOAuthCodeRedirect(userId, authRequest)
}

func (s *OpenTracingAppLayer) GetOAuthImplicitRedirect(userId string, authRequest *model.AuthorizeRequest) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthImplicitRedirect")

	span.SetTag("userId", userId)

	span.SetTag("authRequest", authRequest)

	defer span.Finish()

	return s.app.GetOAuthImplicitRedirect(userId, authRequest)
}

func (s *OpenTracingAppLayer) GetOAuthLoginEndpoint(w http.ResponseWriter, r *http.Request, service string, teamId string, action string, redirectTo string, loginHint string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthLoginEndpoint")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("service", service)

	span.SetTag("teamId", teamId)

	span.SetTag("action", action)

	span.SetTag("redirectTo", redirectTo)

	span.SetTag("loginHint", loginHint)

	defer span.Finish()

	return s.app.GetOAuthLoginEndpoint(w, r, service, teamId, action, redirectTo, loginHint)
}

func (s *OpenTracingAppLayer) GetOAuthSignupEndpoint(w http.ResponseWriter, r *http.Request, service string, teamId string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthSignupEndpoint")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("service", service)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetOAuthSignupEndpoint(w, r, service, teamId)
}

func (s *OpenTracingAppLayer) GetOAuthStateToken(token string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOAuthStateToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.GetOAuthStateToken(token)
}

func (s *OpenTracingAppLayer) GetOpenGraphMetadata(requestURL string) *opengraph.OpenGraph {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOpenGraphMetadata")

	span.SetTag("requestURL", requestURL)

	defer span.Finish()

	return s.app.GetOpenGraphMetadata(requestURL)
}

func (s *OpenTracingAppLayer) GetOrCreateDirectChannel(userId string, otherUserId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOrCreateDirectChannel")

	span.SetTag("userId", userId)

	span.SetTag("otherUserId", otherUserId)

	defer span.Finish()

	return s.app.GetOrCreateDirectChannel(userId, otherUserId)
}

func (s *OpenTracingAppLayer) GetOutgoingWebhook(hookId string) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOutgoingWebhook")

	span.SetTag("hookId", hookId)

	defer span.Finish()

	return s.app.GetOutgoingWebhook(hookId)
}

func (s *OpenTracingAppLayer) GetOutgoingWebhooksForChannelPageByUser(channelId string, userId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOutgoingWebhooksForChannelPageByUser")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOutgoingWebhooksForChannelPageByUser(channelId, userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetOutgoingWebhooksForTeamPage(teamId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOutgoingWebhooksForTeamPage")

	span.SetTag("teamId", teamId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOutgoingWebhooksForTeamPage(teamId, page, perPage)
}

func (s *OpenTracingAppLayer) GetOutgoingWebhooksForTeamPageByUser(teamId string, userId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOutgoingWebhooksForTeamPageByUser")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOutgoingWebhooksForTeamPageByUser(teamId, userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetOutgoingWebhooksPage(page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOutgoingWebhooksPage")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOutgoingWebhooksPage(page, perPage)
}

func (s *OpenTracingAppLayer) GetOutgoingWebhooksPageByUser(userId string, page int, perPage int) ([]*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetOutgoingWebhooksPageByUser")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetOutgoingWebhooksPageByUser(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetPasswordRecoveryToken(token string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPasswordRecoveryToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.GetPasswordRecoveryToken(token)
}

func (s *OpenTracingAppLayer) GetPermalinkPost(postId string, userId string) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPermalinkPost")

	span.SetTag("postId", postId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetPermalinkPost(postId, userId)
}

func (s *OpenTracingAppLayer) GetPinnedPosts(channelId string) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPinnedPosts")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetPinnedPosts(channelId)
}

func (s *OpenTracingAppLayer) GetPluginKey(pluginId string, key string) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPluginKey")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	defer span.Finish()

	return s.app.GetPluginKey(pluginId, key)
}

func (s *OpenTracingAppLayer) GetPluginPublicKeyFiles() ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPluginPublicKeyFiles")

	defer span.Finish()

	return s.app.GetPluginPublicKeyFiles()
}

func (s *OpenTracingAppLayer) GetPluginStatus(id string) (*model.PluginStatus, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPluginStatus")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.GetPluginStatus(id)
}

func (s *OpenTracingAppLayer) GetPluginStatuses() (model.PluginStatuses, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPluginStatuses")

	defer span.Finish()

	return s.app.GetPluginStatuses()
}

func (s *OpenTracingAppLayer) GetPlugins() (*model.PluginsResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPlugins")

	defer span.Finish()

	return s.app.GetPlugins()
}

func (s *OpenTracingAppLayer) GetPluginsEnvironment() *plugin.Environment {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPluginsEnvironment")

	defer span.Finish()

	return s.app.GetPluginsEnvironment()
}

func (s *OpenTracingAppLayer) GetPostAfterTime(channelId string, time int64) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostAfterTime")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.app.GetPostAfterTime(channelId, time)
}

func (s *OpenTracingAppLayer) GetPostIdAfterTime(channelId string, time int64) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostIdAfterTime")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.app.GetPostIdAfterTime(channelId, time)
}

func (s *OpenTracingAppLayer) GetPostIdBeforeTime(channelId string, time int64) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostIdBeforeTime")

	span.SetTag("channelId", channelId)

	span.SetTag("time", time)

	defer span.Finish()

	return s.app.GetPostIdBeforeTime(channelId, time)
}

func (s *OpenTracingAppLayer) GetPostThread(postId string, skipFetchThreads bool) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostThread")

	span.SetTag("postId", postId)

	span.SetTag("skipFetchThreads", skipFetchThreads)

	defer span.Finish()

	return s.app.GetPostThread(postId, skipFetchThreads)
}

func (s *OpenTracingAppLayer) GetPosts(channelId string, offset int, limit int) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPosts")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetPosts(channelId, offset, limit)
}

func (s *OpenTracingAppLayer) GetPostsAfterPost(options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsAfterPost")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetPostsAfterPost(options)
}

func (s *OpenTracingAppLayer) GetPostsAroundPost(before bool, options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsAroundPost")

	span.SetTag("before", before)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetPostsAroundPost(before, options)
}

func (s *OpenTracingAppLayer) GetPostsBeforePost(options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsBeforePost")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetPostsBeforePost(options)
}

func (s *OpenTracingAppLayer) GetPostsEtag(channelId string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsEtag")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetPostsEtag(channelId)
}

func (s *OpenTracingAppLayer) GetPostsForChannelAroundLastUnread(channelId string, userId string, limitBefore int, limitAfter int, skipFetchThreads bool) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsForChannelAroundLastUnread")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("limitBefore", limitBefore)

	span.SetTag("limitAfter", limitAfter)

	span.SetTag("skipFetchThreads", skipFetchThreads)

	defer span.Finish()

	return s.app.GetPostsForChannelAroundLastUnread(channelId, userId, limitBefore, limitAfter, skipFetchThreads)
}

func (s *OpenTracingAppLayer) GetPostsPage(options model.GetPostsOptions) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsPage")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetPostsPage(options)
}

func (s *OpenTracingAppLayer) GetPostsSince(options model.GetPostsSinceOptions) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPostsSince")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetPostsSince(options)
}

func (s *OpenTracingAppLayer) GetPreferenceByCategoryAndNameForUser(userId string, category string, preferenceName string) (*model.Preference, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPreferenceByCategoryAndNameForUser")

	span.SetTag("userId", userId)

	span.SetTag("category", category)

	span.SetTag("preferenceName", preferenceName)

	defer span.Finish()

	return s.app.GetPreferenceByCategoryAndNameForUser(userId, category, preferenceName)
}

func (s *OpenTracingAppLayer) GetPreferenceByCategoryForUser(userId string, category string) (model.Preferences, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPreferenceByCategoryForUser")

	span.SetTag("userId", userId)

	span.SetTag("category", category)

	defer span.Finish()

	return s.app.GetPreferenceByCategoryForUser(userId, category)
}

func (s *OpenTracingAppLayer) GetPreferencesForUser(userId string) (model.Preferences, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPreferencesForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetPreferencesForUser(userId)
}

func (s *OpenTracingAppLayer) GetPrevPostIdFromPostList(postList *model.PostList) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPrevPostIdFromPostList")

	span.SetTag("postList", postList)

	defer span.Finish()

	return s.app.GetPrevPostIdFromPostList(postList)
}

func (s *OpenTracingAppLayer) GetProfileImage(user *model.User) ([]byte, bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetProfileImage")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.GetProfileImage(user)
}

func (s *OpenTracingAppLayer) GetPublicChannelsByIdsForTeam(teamId string, channelIds []string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPublicChannelsByIdsForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("channelIds", channelIds)

	defer span.Finish()

	return s.app.GetPublicChannelsByIdsForTeam(teamId, channelIds)
}

func (s *OpenTracingAppLayer) GetPublicChannelsForTeam(teamId string, offset int, limit int) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPublicChannelsForTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetPublicChannelsForTeam(teamId, offset, limit)
}

func (s *OpenTracingAppLayer) GetPublicKey(name string) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetPublicKey")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.GetPublicKey(name)
}

func (s *OpenTracingAppLayer) GetReactionsForPost(postId string) ([]*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetReactionsForPost")

	span.SetTag("postId", postId)

	defer span.Finish()

	return s.app.GetReactionsForPost(postId)
}

func (s *OpenTracingAppLayer) GetRecentlyActiveUsersForTeam(teamId string) (map[string]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetRecentlyActiveUsersForTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetRecentlyActiveUsersForTeam(teamId)
}

func (s *OpenTracingAppLayer) GetRecentlyActiveUsersForTeamPage(teamId string, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetRecentlyActiveUsersForTeamPage")

	span.SetTag("teamId", teamId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("asAdmin", asAdmin)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetRecentlyActiveUsersForTeamPage(teamId, page, perPage, asAdmin, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetRole(id string) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetRole")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.GetRole(id)
}

func (s *OpenTracingAppLayer) GetRoleByName(name string) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetRoleByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.GetRoleByName(name)
}

func (s *OpenTracingAppLayer) GetRolesByNames(names []string) ([]*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetRolesByNames")

	span.SetTag("names", names)

	defer span.Finish()

	return s.app.GetRolesByNames(names)
}

func (s *OpenTracingAppLayer) GetSamlCertificateStatus() *model.SamlCertificateStatus {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSamlCertificateStatus")

	defer span.Finish()

	return s.app.GetSamlCertificateStatus()
}

func (s *OpenTracingAppLayer) GetSamlMetadata() (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSamlMetadata")

	defer span.Finish()

	return s.app.GetSamlMetadata()
}

func (s *OpenTracingAppLayer) GetSamlMetadataFromIdp(idpMetadataUrl string) (*model.SamlMetadataResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSamlMetadataFromIdp")

	span.SetTag("idpMetadataUrl", idpMetadataUrl)

	defer span.Finish()

	return s.app.GetSamlMetadataFromIdp(idpMetadataUrl)
}

func (s *OpenTracingAppLayer) GetSanitizeOptions(asAdmin bool) map[string]bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSanitizeOptions")

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetSanitizeOptions(asAdmin)
}

func (s *OpenTracingAppLayer) GetSanitizedClientLicense() map[string]string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSanitizedClientLicense")

	defer span.Finish()

	return s.app.GetSanitizedClientLicense()
}

func (s *OpenTracingAppLayer) GetSanitizedConfig() *model.Config {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSanitizedConfig")

	defer span.Finish()

	return s.app.GetSanitizedConfig()
}

func (s *OpenTracingAppLayer) GetScheme(id string) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetScheme")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.GetScheme(id)
}

func (s *OpenTracingAppLayer) GetSchemeByName(name string) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSchemeByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.GetSchemeByName(name)
}

func (s *OpenTracingAppLayer) GetSchemeRolesForChannel(channelId string) (string, string, string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSchemeRolesForChannel")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.GetSchemeRolesForChannel(channelId)
}

func (s *OpenTracingAppLayer) GetSchemeRolesForTeam(teamId string) (string, string, string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSchemeRolesForTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetSchemeRolesForTeam(teamId)
}

func (s *OpenTracingAppLayer) GetSchemes(scope string, offset int, limit int) ([]*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSchemes")

	span.SetTag("scope", scope)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetSchemes(scope, offset, limit)
}

func (s *OpenTracingAppLayer) GetSchemesPage(scope string, page int, perPage int) ([]*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSchemesPage")

	span.SetTag("scope", scope)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetSchemesPage(scope, page, perPage)
}

func (s *OpenTracingAppLayer) GetSession(token string) (*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSession")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.GetSession(token)
}

func (s *OpenTracingAppLayer) GetSessionById(sessionId string) (*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSessionById")

	span.SetTag("sessionId", sessionId)

	defer span.Finish()

	return s.app.GetSessionById(sessionId)
}

func (s *OpenTracingAppLayer) GetSessions(userId string) ([]*model.Session, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSessions")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetSessions(userId)
}

func (s *OpenTracingAppLayer) GetSinglePost(postId string) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSinglePost")

	span.SetTag("postId", postId)

	defer span.Finish()

	return s.app.GetSinglePost(postId)
}

func (s *OpenTracingAppLayer) GetSiteURL() string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetSiteURL")

	defer span.Finish()

	return s.app.GetSiteURL()
}

func (s *OpenTracingAppLayer) GetStatus(userId string) (*model.Status, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetStatus")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetStatus(userId)
}

func (s *OpenTracingAppLayer) GetStatusFromCache(userId string) *model.Status {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetStatusFromCache")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetStatusFromCache(userId)
}

func (s *OpenTracingAppLayer) GetStatusesByIds(userIds []string) (map[string]interface{}, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetStatusesByIds")

	span.SetTag("userIds", userIds)

	defer span.Finish()

	return s.app.GetStatusesByIds(userIds)
}

func (s *OpenTracingAppLayer) GetTeam(teamId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetTeam(teamId)
}

func (s *OpenTracingAppLayer) GetTeamByInviteId(inviteId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamByInviteId")

	span.SetTag("inviteId", inviteId)

	defer span.Finish()

	return s.app.GetTeamByInviteId(inviteId)
}

func (s *OpenTracingAppLayer) GetTeamByName(name string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamByName")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.GetTeamByName(name)
}

func (s *OpenTracingAppLayer) GetTeamGroupUsers(teamID string) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamGroupUsers")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.app.GetTeamGroupUsers(teamID)
}

func (s *OpenTracingAppLayer) GetTeamIcon(team *model.Team) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamIcon")

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.GetTeamIcon(team)
}

func (s *OpenTracingAppLayer) GetTeamIdFromQuery(query url.Values) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamIdFromQuery")

	span.SetTag("query", query)

	defer span.Finish()

	return s.app.GetTeamIdFromQuery(query)
}

func (s *OpenTracingAppLayer) GetTeamMember(teamId string, userId string) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamMember")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetTeamMember(teamId, userId)
}

func (s *OpenTracingAppLayer) GetTeamMembers(teamId string, offset int, limit int, restrictions *model.ViewUsersRestrictions) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamMembers")

	span.SetTag("teamId", teamId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.app.GetTeamMembers(teamId, offset, limit, restrictions)
}

func (s *OpenTracingAppLayer) GetTeamMembersByIds(teamId string, userIds []string, restrictions *model.ViewUsersRestrictions) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamMembersByIds")

	span.SetTag("teamId", teamId)

	span.SetTag("userIds", userIds)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.app.GetTeamMembersByIds(teamId, userIds, restrictions)
}

func (s *OpenTracingAppLayer) GetTeamMembersForUser(userId string) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamMembersForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetTeamMembersForUser(userId)
}

func (s *OpenTracingAppLayer) GetTeamMembersForUserWithPagination(userId string, page int, perPage int) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamMembersForUserWithPagination")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetTeamMembersForUserWithPagination(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetTeamStats(teamId string, restrictions *model.ViewUsersRestrictions) (*model.TeamStats, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamStats")

	span.SetTag("teamId", teamId)

	span.SetTag("restrictions", restrictions)

	defer span.Finish()

	return s.app.GetTeamStats(teamId, restrictions)
}

func (s *OpenTracingAppLayer) GetTeamUnread(teamId string, userId string) (*model.TeamUnread, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamUnread")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetTeamUnread(teamId, userId)
}

func (s *OpenTracingAppLayer) GetTeamsForScheme(scheme *model.Scheme, offset int, limit int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamsForScheme")

	span.SetTag("scheme", scheme)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetTeamsForScheme(scheme, offset, limit)
}

func (s *OpenTracingAppLayer) GetTeamsForSchemePage(scheme *model.Scheme, page int, perPage int) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamsForSchemePage")

	span.SetTag("scheme", scheme)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetTeamsForSchemePage(scheme, page, perPage)
}

func (s *OpenTracingAppLayer) GetTeamsForUser(userId string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamsForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetTeamsForUser(userId)
}

func (s *OpenTracingAppLayer) GetTeamsUnreadForUser(excludeTeamId string, userId string) ([]*model.TeamUnread, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTeamsUnreadForUser")

	span.SetTag("excludeTeamId", excludeTeamId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetTeamsUnreadForUser(excludeTeamId, userId)
}

func (s *OpenTracingAppLayer) GetTermsOfService(id string) (*model.TermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTermsOfService")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.GetTermsOfService(id)
}

func (s *OpenTracingAppLayer) GetTotalUsersStats(viewRestrictions *model.ViewUsersRestrictions) (*model.UsersStats, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetTotalUsersStats")

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetTotalUsersStats(viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUser(userId string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetUser(userId)
}

func (s *OpenTracingAppLayer) GetUserAccessToken(tokenId string, sanitize bool) (*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserAccessToken")

	span.SetTag("tokenId", tokenId)

	span.SetTag("sanitize", sanitize)

	defer span.Finish()

	return s.app.GetUserAccessToken(tokenId, sanitize)
}

func (s *OpenTracingAppLayer) GetUserAccessTokens(page int, perPage int) ([]*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserAccessTokens")

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetUserAccessTokens(page, perPage)
}

func (s *OpenTracingAppLayer) GetUserAccessTokensForUser(userId string, page int, perPage int) ([]*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserAccessTokensForUser")

	span.SetTag("userId", userId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.GetUserAccessTokensForUser(userId, page, perPage)
}

func (s *OpenTracingAppLayer) GetUserByAuth(authData *string, authService string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserByAuth")

	span.SetTag("authData", authData)

	span.SetTag("authService", authService)

	defer span.Finish()

	return s.app.GetUserByAuth(authData, authService)
}

func (s *OpenTracingAppLayer) GetUserByEmail(email string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserByEmail")

	span.SetTag("email", email)

	defer span.Finish()

	return s.app.GetUserByEmail(email)
}

func (s *OpenTracingAppLayer) GetUserByUsername(username string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserByUsername")

	span.SetTag("username", username)

	defer span.Finish()

	return s.app.GetUserByUsername(username)
}

func (s *OpenTracingAppLayer) GetUserForLogin(id string, loginId string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserForLogin")

	span.SetTag("id", id)

	span.SetTag("loginId", loginId)

	defer span.Finish()

	return s.app.GetUserForLogin(id, loginId)
}

func (s *OpenTracingAppLayer) GetUserStatusesByIds(userIds []string) ([]*model.Status, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserStatusesByIds")

	span.SetTag("userIds", userIds)

	defer span.Finish()

	return s.app.GetUserStatusesByIds(userIds)
}

func (s *OpenTracingAppLayer) GetUserTermsOfService(userId string) (*model.UserTermsOfService, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUserTermsOfService")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetUserTermsOfService(userId)
}

func (s *OpenTracingAppLayer) GetUsers(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsers")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetUsers(options)
}

func (s *OpenTracingAppLayer) GetUsersByGroupChannelIds(channelIds []string, asAdmin bool) (map[string][]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersByGroupChannelIds")

	span.SetTag("channelIds", channelIds)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersByGroupChannelIds(channelIds, asAdmin)
}

func (s *OpenTracingAppLayer) GetUsersByIds(userIds []string, options *store.UserGetByIdsOpts) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersByIds")

	span.SetTag("userIds", userIds)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetUsersByIds(userIds, options)
}

func (s *OpenTracingAppLayer) GetUsersByUsernames(usernames []string, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersByUsernames")

	span.SetTag("usernames", usernames)

	span.SetTag("asAdmin", asAdmin)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetUsersByUsernames(usernames, asAdmin, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUsersEtag(restrictionsHash string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersEtag")

	span.SetTag("restrictionsHash", restrictionsHash)

	defer span.Finish()

	return s.app.GetUsersEtag(restrictionsHash)
}

func (s *OpenTracingAppLayer) GetUsersInChannel(channelId string, offset int, limit int) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetUsersInChannel(channelId, offset, limit)
}

func (s *OpenTracingAppLayer) GetUsersInChannelByStatus(channelId string, offset int, limit int) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInChannelByStatus")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.GetUsersInChannelByStatus(channelId, offset, limit)
}

func (s *OpenTracingAppLayer) GetUsersInChannelMap(channelId string, offset int, limit int, asAdmin bool) (map[string]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInChannelMap")

	span.SetTag("channelId", channelId)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersInChannelMap(channelId, offset, limit, asAdmin)
}

func (s *OpenTracingAppLayer) GetUsersInChannelPage(channelId string, page int, perPage int, asAdmin bool) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInChannelPage")

	span.SetTag("channelId", channelId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersInChannelPage(channelId, page, perPage, asAdmin)
}

func (s *OpenTracingAppLayer) GetUsersInChannelPageByStatus(channelId string, page int, perPage int, asAdmin bool) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInChannelPageByStatus")

	span.SetTag("channelId", channelId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersInChannelPageByStatus(channelId, page, perPage, asAdmin)
}

func (s *OpenTracingAppLayer) GetUsersInTeam(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInTeam")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetUsersInTeam(options)
}

func (s *OpenTracingAppLayer) GetUsersInTeamEtag(teamId string, restrictionsHash string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInTeamEtag")

	span.SetTag("teamId", teamId)

	span.SetTag("restrictionsHash", restrictionsHash)

	defer span.Finish()

	return s.app.GetUsersInTeamEtag(teamId, restrictionsHash)
}

func (s *OpenTracingAppLayer) GetUsersInTeamPage(options *model.UserGetOptions, asAdmin bool) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersInTeamPage")

	span.SetTag("options", options)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersInTeamPage(options, asAdmin)
}

func (s *OpenTracingAppLayer) GetUsersNotInChannel(teamId string, channelId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersNotInChannel")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetUsersNotInChannel(teamId, channelId, groupConstrained, offset, limit, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUsersNotInChannelMap(teamId string, channelId string, groupConstrained bool, offset int, limit int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) (map[string]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersNotInChannelMap")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("asAdmin", asAdmin)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetUsersNotInChannelMap(teamId, channelId, groupConstrained, offset, limit, asAdmin, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUsersNotInChannelPage(teamId string, channelId string, groupConstrained bool, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersNotInChannelPage")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("asAdmin", asAdmin)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetUsersNotInChannelPage(teamId, channelId, groupConstrained, page, perPage, asAdmin, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUsersNotInTeam(teamId string, groupConstrained bool, offset int, limit int, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersNotInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("offset", offset)

	span.SetTag("limit", limit)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetUsersNotInTeam(teamId, groupConstrained, offset, limit, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUsersNotInTeamEtag(teamId string, restrictionsHash string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersNotInTeamEtag")

	span.SetTag("teamId", teamId)

	span.SetTag("restrictionsHash", restrictionsHash)

	defer span.Finish()

	return s.app.GetUsersNotInTeamEtag(teamId, restrictionsHash)
}

func (s *OpenTracingAppLayer) GetUsersNotInTeamPage(teamId string, groupConstrained bool, page int, perPage int, asAdmin bool, viewRestrictions *model.ViewUsersRestrictions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersNotInTeamPage")

	span.SetTag("teamId", teamId)

	span.SetTag("groupConstrained", groupConstrained)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	span.SetTag("asAdmin", asAdmin)

	span.SetTag("viewRestrictions", viewRestrictions)

	defer span.Finish()

	return s.app.GetUsersNotInTeamPage(teamId, groupConstrained, page, perPage, asAdmin, viewRestrictions)
}

func (s *OpenTracingAppLayer) GetUsersPage(options *model.UserGetOptions, asAdmin bool) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersPage")

	span.SetTag("options", options)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersPage(options, asAdmin)
}

func (s *OpenTracingAppLayer) GetUsersWithoutTeam(options *model.UserGetOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersWithoutTeam")

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.GetUsersWithoutTeam(options)
}

func (s *OpenTracingAppLayer) GetUsersWithoutTeamPage(options *model.UserGetOptions, asAdmin bool) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetUsersWithoutTeamPage")

	span.SetTag("options", options)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.GetUsersWithoutTeamPage(options, asAdmin)
}

func (s *OpenTracingAppLayer) GetVerifyEmailToken(token string) (*model.Token, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetVerifyEmailToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.GetVerifyEmailToken(token)
}

func (s *OpenTracingAppLayer) GetViewUsersRestrictions(userId string) (*model.ViewUsersRestrictions, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetViewUsersRestrictions")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.GetViewUsersRestrictions(userId)
}

func (s *OpenTracingAppLayer) GetViewUsersRestrictionsForTeam(userId string, teamId string) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.GetViewUsersRestrictionsForTeam")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.GetViewUsersRestrictionsForTeam(userId, teamId)
}

func (s *OpenTracingAppLayer) HTMLTemplates() *template.Template {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HTMLTemplates")

	defer span.Finish()

	return s.app.HTMLTemplates()
}

func (s *OpenTracingAppLayer) Handle404(w http.ResponseWriter, r *http.Request) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.Handle404")

	span.SetTag("w", w)

	span.SetTag("r", r)

	defer span.Finish()

	s.app.Handle404(w, r)
}

func (s *OpenTracingAppLayer) HandleCommandResponse(command *model.Command, args *model.CommandArgs, response *model.CommandResponse, builtIn bool) (*model.CommandResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HandleCommandResponse")

	span.SetTag("command", command)

	span.SetTag("args", args)

	span.SetTag("response", response)

	span.SetTag("builtIn", builtIn)

	defer span.Finish()

	return s.app.HandleCommandResponse(command, args, response, builtIn)
}

func (s *OpenTracingAppLayer) HandleCommandResponsePost(command *model.Command, args *model.CommandArgs, response *model.CommandResponse, builtIn bool) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HandleCommandResponsePost")

	span.SetTag("command", command)

	span.SetTag("args", args)

	span.SetTag("response", response)

	span.SetTag("builtIn", builtIn)

	defer span.Finish()

	return s.app.HandleCommandResponsePost(command, args, response, builtIn)
}

func (s *OpenTracingAppLayer) HandleCommandWebhook(hookId string, response *model.CommandResponse) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HandleCommandWebhook")

	span.SetTag("hookId", hookId)

	span.SetTag("response", response)

	defer span.Finish()

	return s.app.HandleCommandWebhook(hookId, response)
}

func (s *OpenTracingAppLayer) HandleImages(previewPathList []string, thumbnailPathList []string, fileData [][]byte) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HandleImages")

	span.SetTag("previewPathList", previewPathList)

	span.SetTag("thumbnailPathList", thumbnailPathList)

	span.SetTag("fileData", fileData)

	defer span.Finish()

	s.app.HandleImages(previewPathList, thumbnailPathList, fileData)
}

func (s *OpenTracingAppLayer) HandleIncomingWebhook(hookId string, req *model.IncomingWebhookRequest) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HandleIncomingWebhook")

	span.SetTag("hookId", hookId)

	span.SetTag("req", req)

	defer span.Finish()

	return s.app.HandleIncomingWebhook(hookId, req)
}

func (s *OpenTracingAppLayer) HandleMessageExportConfig(cfg *model.Config, appCfg *model.Config) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HandleMessageExportConfig")

	span.SetTag("cfg", cfg)

	span.SetTag("appCfg", appCfg)

	defer span.Finish()

	s.app.HandleMessageExportConfig(cfg, appCfg)
}

func (s *OpenTracingAppLayer) HasPermissionTo(askingUserId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HasPermissionTo")

	span.SetTag("askingUserId", askingUserId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.HasPermissionTo(askingUserId, permission)
}

func (s *OpenTracingAppLayer) HasPermissionToChannel(askingUserId string, channelId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HasPermissionToChannel")

	span.SetTag("askingUserId", askingUserId)

	span.SetTag("channelId", channelId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.HasPermissionToChannel(askingUserId, channelId, permission)
}

func (s *OpenTracingAppLayer) HasPermissionToChannelByPost(askingUserId string, postId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HasPermissionToChannelByPost")

	span.SetTag("askingUserId", askingUserId)

	span.SetTag("postId", postId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.HasPermissionToChannelByPost(askingUserId, postId, permission)
}

func (s *OpenTracingAppLayer) HasPermissionToTeam(askingUserId string, teamId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HasPermissionToTeam")

	span.SetTag("askingUserId", askingUserId)

	span.SetTag("teamId", teamId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.HasPermissionToTeam(askingUserId, teamId, permission)
}

func (s *OpenTracingAppLayer) HasPermissionToUser(askingUserId string, userId string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HasPermissionToUser")

	span.SetTag("askingUserId", askingUserId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.HasPermissionToUser(askingUserId, userId)
}

func (s *OpenTracingAppLayer) HubRegister(webConn *WebConn) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HubRegister")

	span.SetTag("webConn", webConn)

	defer span.Finish()

	s.app.HubRegister(webConn)
}

func (s *OpenTracingAppLayer) HubStart() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HubStart")

	defer span.Finish()

	s.app.HubStart()
}

func (s *OpenTracingAppLayer) HubStop() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HubStop")

	defer span.Finish()

	s.app.HubStop()
}

func (s *OpenTracingAppLayer) HubUnregister(webConn *WebConn) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.HubUnregister")

	span.SetTag("webConn", webConn)

	defer span.Finish()

	s.app.HubUnregister(webConn)
}

func (s *OpenTracingAppLayer) ImageProxyAdder() func(string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ImageProxyAdder")

	defer span.Finish()

	return s.app.ImageProxyAdder()
}

func (s *OpenTracingAppLayer) ImageProxyRemover() func(string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ImageProxyRemover")

	defer span.Finish()

	return s.app.ImageProxyRemover()
}

func (s *OpenTracingAppLayer) ImportPermissions(jsonl io.Reader) error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ImportPermissions")

	span.SetTag("jsonl", jsonl)

	defer span.Finish()

	return s.app.ImportPermissions(jsonl)
}

func (s *OpenTracingAppLayer) InitPlugins(pluginDir string, webappPluginDir string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InitPlugins")

	span.SetTag("pluginDir", pluginDir)

	span.SetTag("webappPluginDir", webappPluginDir)

	defer span.Finish()

	s.app.InitPlugins(pluginDir, webappPluginDir)
}

func (s *OpenTracingAppLayer) InitPostMetadata() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InitPostMetadata")

	defer span.Finish()

	s.app.InitPostMetadata()
}

func (s *OpenTracingAppLayer) InstallMarketplacePlugin(request *model.InstallMarketplacePluginRequest) (*model.Manifest, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InstallMarketplacePlugin")

	span.SetTag("request", request)

	defer span.Finish()

	return s.app.InstallMarketplacePlugin(request)
}

func (s *OpenTracingAppLayer) InstallPlugin(pluginFile io.ReadSeeker, replace bool) (*model.Manifest, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InstallPlugin")

	span.SetTag("pluginFile", pluginFile)

	span.SetTag("replace", replace)

	defer span.Finish()

	return s.app.InstallPlugin(pluginFile, replace)
}

func (s *OpenTracingAppLayer) InstallPluginFromData(data model.PluginEventData) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InstallPluginFromData")

	span.SetTag("data", data)

	defer span.Finish()

	s.app.InstallPluginFromData(data)
}

func (s *OpenTracingAppLayer) InstallPluginWithSignature(pluginFile io.ReadSeeker, signature io.ReadSeeker) (*model.Manifest, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InstallPluginWithSignature")

	span.SetTag("pluginFile", pluginFile)

	span.SetTag("signature", signature)

	defer span.Finish()

	return s.app.InstallPluginWithSignature(pluginFile, signature)
}

func (s *OpenTracingAppLayer) InvalidateAllCaches() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateAllCaches")

	defer span.Finish()

	return s.app.InvalidateAllCaches()
}

func (s *OpenTracingAppLayer) InvalidateAllCachesSkipSend() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateAllCachesSkipSend")

	defer span.Finish()

	s.app.InvalidateAllCachesSkipSend()
}

func (s *OpenTracingAppLayer) InvalidateAllEmailInvites() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateAllEmailInvites")

	defer span.Finish()

	return s.app.InvalidateAllEmailInvites()
}

func (s *OpenTracingAppLayer) InvalidateCacheForChannel(channel *model.Channel) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForChannel")

	span.SetTag("channel", channel)

	defer span.Finish()

	s.app.InvalidateCacheForChannel(channel)
}

func (s *OpenTracingAppLayer) InvalidateCacheForChannelByNameSkipClusterSend(teamId string, name string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForChannelByNameSkipClusterSend")

	span.SetTag("teamId", teamId)

	span.SetTag("name", name)

	defer span.Finish()

	s.app.InvalidateCacheForChannelByNameSkipClusterSend(teamId, name)
}

func (s *OpenTracingAppLayer) InvalidateCacheForChannelMembers(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForChannelMembers")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.app.InvalidateCacheForChannelMembers(channelId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForChannelMembersNotifyProps(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForChannelMembersNotifyProps")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.app.InvalidateCacheForChannelMembersNotifyProps(channelId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForChannelMembersNotifyPropsSkipClusterSend(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForChannelMembersNotifyPropsSkipClusterSend")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.app.InvalidateCacheForChannelMembersNotifyPropsSkipClusterSend(channelId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForChannelPosts(channelId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForChannelPosts")

	span.SetTag("channelId", channelId)

	defer span.Finish()

	s.app.InvalidateCacheForChannelPosts(channelId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.InvalidateCacheForUser(userId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForUserSkipClusterSend(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForUserSkipClusterSend")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.InvalidateCacheForUserSkipClusterSend(userId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForUserTeams(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForUserTeams")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.InvalidateCacheForUserTeams(userId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForUserTeamsSkipClusterSend(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForUserTeamsSkipClusterSend")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.InvalidateCacheForUserTeamsSkipClusterSend(userId)
}

func (s *OpenTracingAppLayer) InvalidateCacheForWebhook(webhookId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateCacheForWebhook")

	span.SetTag("webhookId", webhookId)

	defer span.Finish()

	s.app.InvalidateCacheForWebhook(webhookId)
}

func (s *OpenTracingAppLayer) InvalidateWebConnSessionCacheForUser(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InvalidateWebConnSessionCacheForUser")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.InvalidateWebConnSessionCacheForUser(userId)
}

func (s *OpenTracingAppLayer) InviteGuestsToChannels(teamId string, guestsInvite *model.GuestsInvite, senderId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InviteGuestsToChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("guestsInvite", guestsInvite)

	span.SetTag("senderId", senderId)

	defer span.Finish()

	return s.app.InviteGuestsToChannels(teamId, guestsInvite, senderId)
}

func (s *OpenTracingAppLayer) InviteGuestsToChannelsGracefully(teamId string, guestsInvite *model.GuestsInvite, senderId string) ([]*model.EmailInviteWithError, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InviteGuestsToChannelsGracefully")

	span.SetTag("teamId", teamId)

	span.SetTag("guestsInvite", guestsInvite)

	span.SetTag("senderId", senderId)

	defer span.Finish()

	return s.app.InviteGuestsToChannelsGracefully(teamId, guestsInvite, senderId)
}

func (s *OpenTracingAppLayer) InviteNewUsersToTeam(emailList []string, teamId string, senderId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InviteNewUsersToTeam")

	span.SetTag("emailList", emailList)

	span.SetTag("teamId", teamId)

	span.SetTag("senderId", senderId)

	defer span.Finish()

	return s.app.InviteNewUsersToTeam(emailList, teamId, senderId)
}

func (s *OpenTracingAppLayer) InviteNewUsersToTeamGracefully(emailList []string, teamId string, senderId string) ([]*model.EmailInviteWithError, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.InviteNewUsersToTeamGracefully")

	span.SetTag("emailList", emailList)

	span.SetTag("teamId", teamId)

	span.SetTag("senderId", senderId)

	defer span.Finish()

	return s.app.InviteNewUsersToTeamGracefully(emailList, teamId, senderId)
}

func (s *OpenTracingAppLayer) IsESAutocompletionEnabled() bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsESAutocompletionEnabled")

	defer span.Finish()

	return s.app.IsESAutocompletionEnabled()
}

func (s *OpenTracingAppLayer) IsESIndexingEnabled() bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsESIndexingEnabled")

	defer span.Finish()

	return s.app.IsESIndexingEnabled()
}

func (s *OpenTracingAppLayer) IsESSearchEnabled() bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsESSearchEnabled")

	defer span.Finish()

	return s.app.IsESSearchEnabled()
}

func (s *OpenTracingAppLayer) IsFirstUserAccount() bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsFirstUserAccount")

	defer span.Finish()

	return s.app.IsFirstUserAccount()
}

func (s *OpenTracingAppLayer) IsLeader() bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsLeader")

	defer span.Finish()

	return s.app.IsLeader()
}

func (s *OpenTracingAppLayer) IsPasswordValid(password string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsPasswordValid")

	span.SetTag("password", password)

	defer span.Finish()

	return s.app.IsPasswordValid(password)
}

func (s *OpenTracingAppLayer) IsPhase2MigrationCompleted() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsPhase2MigrationCompleted")

	defer span.Finish()

	return s.app.IsPhase2MigrationCompleted()
}

func (s *OpenTracingAppLayer) IsUserAway(lastActivityAt int64) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsUserAway")

	span.SetTag("lastActivityAt", lastActivityAt)

	defer span.Finish()

	return s.app.IsUserAway(lastActivityAt)
}

func (s *OpenTracingAppLayer) IsUserSignUpAllowed() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsUserSignUpAllowed")

	defer span.Finish()

	return s.app.IsUserSignUpAllowed()
}

func (s *OpenTracingAppLayer) IsUsernameTaken(name string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.IsUsernameTaken")

	span.SetTag("name", name)

	defer span.Finish()

	return s.app.IsUsernameTaken(name)
}

func (s *OpenTracingAppLayer) JoinChannel(channel *model.Channel, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.JoinChannel")

	span.SetTag("channel", channel)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.JoinChannel(channel, userId)
}

func (s *OpenTracingAppLayer) JoinDefaultChannels(teamId string, user *model.User, shouldBeAdmin bool, userRequestorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.JoinDefaultChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("user", user)

	span.SetTag("shouldBeAdmin", shouldBeAdmin)

	span.SetTag("userRequestorId", userRequestorId)

	defer span.Finish()

	return s.app.JoinDefaultChannels(teamId, user, shouldBeAdmin, userRequestorId)
}

func (s *OpenTracingAppLayer) JoinUserToTeam(team *model.Team, user *model.User, userRequestorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.JoinUserToTeam")

	span.SetTag("team", team)

	span.SetTag("user", user)

	span.SetTag("userRequestorId", userRequestorId)

	defer span.Finish()

	return s.app.JoinUserToTeam(team, user, userRequestorId)
}

func (s *OpenTracingAppLayer) LeaveChannel(channelId string, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.LeaveChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.LeaveChannel(channelId, userId)
}

func (s *OpenTracingAppLayer) LeaveTeam(team *model.Team, user *model.User, requestorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.LeaveTeam")

	span.SetTag("team", team)

	span.SetTag("user", user)

	span.SetTag("requestorId", requestorId)

	defer span.Finish()

	return s.app.LeaveTeam(team, user, requestorId)
}

func (s *OpenTracingAppLayer) License() *model.License {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.License")

	defer span.Finish()

	return s.app.License()
}

func (s *OpenTracingAppLayer) LimitedClientConfig() map[string]string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.LimitedClientConfig")

	defer span.Finish()

	return s.app.LimitedClientConfig()
}

func (s *OpenTracingAppLayer) LimitedClientConfigWithComputed() map[string]string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.LimitedClientConfigWithComputed")

	defer span.Finish()

	return s.app.LimitedClientConfigWithComputed()
}

func (s *OpenTracingAppLayer) ListAllCommands(teamId string, T goi18n.TranslateFunc) ([]*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ListAllCommands")

	span.SetTag("teamId", teamId)

	span.SetTag("T", T)

	defer span.Finish()

	return s.app.ListAllCommands(teamId, T)
}

func (s *OpenTracingAppLayer) ListAutocompleteCommands(teamId string, T goi18n.TranslateFunc) ([]*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ListAutocompleteCommands")

	span.SetTag("teamId", teamId)

	span.SetTag("T", T)

	defer span.Finish()

	return s.app.ListAutocompleteCommands(teamId, T)
}

func (s *OpenTracingAppLayer) ListDirectory(path string) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ListDirectory")

	span.SetTag("path", path)

	defer span.Finish()

	return s.app.ListDirectory(path)
}

func (s *OpenTracingAppLayer) ListPluginKeys(pluginId string, page int, perPage int) ([]string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ListPluginKeys")

	span.SetTag("pluginId", pluginId)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.ListPluginKeys(pluginId, page, perPage)
}

func (s *OpenTracingAppLayer) ListTeamCommands(teamId string) ([]*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ListTeamCommands")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.ListTeamCommands(teamId)
}

func (s *OpenTracingAppLayer) LoadLicense() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.LoadLicense")

	defer span.Finish()

	s.app.LoadLicense()
}

func (s *OpenTracingAppLayer) LoginByOAuth(service string, userData io.Reader, teamId string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.LoginByOAuth")

	span.SetTag("service", service)

	span.SetTag("userData", userData)

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.LoginByOAuth(service, userData, teamId)
}

func (s *OpenTracingAppLayer) MakePermissionError(permission *model.Permission) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MakePermissionError")

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.MakePermissionError(permission)
}

func (s *OpenTracingAppLayer) MarkChannelAsUnreadFromPost(postID string, userID string) (*model.ChannelUnreadAt, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MarkChannelAsUnreadFromPost")

	span.SetTag("postID", postID)

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.app.MarkChannelAsUnreadFromPost(postID, userID)
}

func (s *OpenTracingAppLayer) MarkChannelsAsViewed(channelIds []string, userId string, currentSessionId string) (map[string]int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MarkChannelsAsViewed")

	span.SetTag("channelIds", channelIds)

	span.SetTag("userId", userId)

	span.SetTag("currentSessionId", currentSessionId)

	defer span.Finish()

	return s.app.MarkChannelsAsViewed(channelIds, userId, currentSessionId)
}

func (s *OpenTracingAppLayer) MaxPostSize() int {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MaxPostSize")

	defer span.Finish()

	return s.app.MaxPostSize()
}

func (s *OpenTracingAppLayer) MigrateFilenamesToFileInfos(post *model.Post) []*model.FileInfo {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MigrateFilenamesToFileInfos")

	span.SetTag("post", post)

	defer span.Finish()

	return s.app.MigrateFilenamesToFileInfos(post)
}

func (s *OpenTracingAppLayer) MoveChannel(team *model.Team, channel *model.Channel, user *model.User, removeDeactivatedMembers bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MoveChannel")

	span.SetTag("team", team)

	span.SetTag("channel", channel)

	span.SetTag("user", user)

	span.SetTag("removeDeactivatedMembers", removeDeactivatedMembers)

	defer span.Finish()

	return s.app.MoveChannel(team, channel, user, removeDeactivatedMembers)
}

func (s *OpenTracingAppLayer) MoveCommand(team *model.Team, command *model.Command) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MoveCommand")

	span.SetTag("team", team)

	span.SetTag("command", command)

	defer span.Finish()

	return s.app.MoveCommand(team, command)
}

func (s *OpenTracingAppLayer) MoveFile(oldPath string, newPath string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.MoveFile")

	span.SetTag("oldPath", oldPath)

	span.SetTag("newPath", newPath)

	defer span.Finish()

	return s.app.MoveFile(oldPath, newPath)
}

func (s *OpenTracingAppLayer) NewClusterDiscoveryService() *ClusterDiscoveryService {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.NewClusterDiscoveryService")

	defer span.Finish()

	return s.app.NewClusterDiscoveryService()
}

func (s *OpenTracingAppLayer) NewEmailTemplate(name string, locale string) *utils.HTMLTemplate {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.NewEmailTemplate")

	span.SetTag("name", name)

	span.SetTag("locale", locale)

	defer span.Finish()

	return s.app.NewEmailTemplate(name, locale)
}

func (s *OpenTracingAppLayer) NewPluginAPI(manifest *model.Manifest) plugin.API {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.NewPluginAPI")

	span.SetTag("manifest", manifest)

	defer span.Finish()

	return s.app.NewPluginAPI(manifest)
}

func (s *OpenTracingAppLayer) NewWebConn(ws *websocket.Conn, session model.Session, t goi18n.TranslateFunc, locale string) *WebConn {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.NewWebConn")

	span.SetTag("ws", ws)

	span.SetTag("session", session)

	span.SetTag("t", t)

	span.SetTag("locale", locale)

	defer span.Finish()

	return s.app.NewWebConn(ws, session, t, locale)
}

func (s *OpenTracingAppLayer) NewWebHub() *Hub {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.NewWebHub")

	defer span.Finish()

	return s.app.NewWebHub()
}

func (s *OpenTracingAppLayer) OldImportChannel(channel *model.Channel, sChannel SlackChannel, users map[string]*model.User) *model.Channel {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OldImportChannel")

	span.SetTag("channel", channel)

	span.SetTag("sChannel", sChannel)

	span.SetTag("users", users)

	defer span.Finish()

	return s.app.OldImportChannel(channel, sChannel, users)
}

func (s *OpenTracingAppLayer) OldImportFile(timestamp time.Time, file io.Reader, teamId string, channelId string, userId string, fileName string) (*model.FileInfo, error) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OldImportFile")

	span.SetTag("timestamp", timestamp)

	span.SetTag("file", file)

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("fileName", fileName)

	defer span.Finish()

	return s.app.OldImportFile(timestamp, file, teamId, channelId, userId, fileName)
}

func (s *OpenTracingAppLayer) OldImportIncomingWebhookPost(post *model.Post, props model.StringInterface) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OldImportIncomingWebhookPost")

	span.SetTag("post", post)

	span.SetTag("props", props)

	defer span.Finish()

	return s.app.OldImportIncomingWebhookPost(post, props)
}

func (s *OpenTracingAppLayer) OldImportPost(post *model.Post) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OldImportPost")

	span.SetTag("post", post)

	defer span.Finish()

	return s.app.OldImportPost(post)
}

func (s *OpenTracingAppLayer) OldImportUser(team *model.Team, user *model.User) *model.User {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OldImportUser")

	span.SetTag("team", team)

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.OldImportUser(team, user)
}

func (s *OpenTracingAppLayer) OpenInteractiveDialog(request model.OpenDialogRequest) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OpenInteractiveDialog")

	span.SetTag("request", request)

	defer span.Finish()

	return s.app.OpenInteractiveDialog(request)
}

func (s *OpenTracingAppLayer) OriginChecker() func(*http.Request) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OriginChecker")

	defer span.Finish()

	return s.app.OriginChecker()
}

func (s *OpenTracingAppLayer) OverrideIconURLIfEmoji(post *model.Post) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.OverrideIconURLIfEmoji")

	span.SetTag("post", post)

	defer span.Finish()

	s.app.OverrideIconURLIfEmoji(post)
}

func (s *OpenTracingAppLayer) PatchBot(botUserId string, botPatch *model.BotPatch) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchBot")

	span.SetTag("botUserId", botUserId)

	span.SetTag("botPatch", botPatch)

	defer span.Finish()

	return s.app.PatchBot(botUserId, botPatch)
}

func (s *OpenTracingAppLayer) PatchChannel(channel *model.Channel, patch *model.ChannelPatch, userId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchChannel")

	span.SetTag("channel", channel)

	span.SetTag("patch", patch)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.PatchChannel(channel, patch, userId)
}

func (s *OpenTracingAppLayer) PatchPost(postId string, patch *model.PostPatch) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchPost")

	span.SetTag("postId", postId)

	span.SetTag("patch", patch)

	defer span.Finish()

	return s.app.PatchPost(postId, patch)
}

func (s *OpenTracingAppLayer) PatchRole(role *model.Role, patch *model.RolePatch) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchRole")

	span.SetTag("role", role)

	span.SetTag("patch", patch)

	defer span.Finish()

	return s.app.PatchRole(role, patch)
}

func (s *OpenTracingAppLayer) PatchScheme(scheme *model.Scheme, patch *model.SchemePatch) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchScheme")

	span.SetTag("scheme", scheme)

	span.SetTag("patch", patch)

	defer span.Finish()

	return s.app.PatchScheme(scheme, patch)
}

func (s *OpenTracingAppLayer) PatchTeam(teamId string, patch *model.TeamPatch) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("patch", patch)

	defer span.Finish()

	return s.app.PatchTeam(teamId, patch)
}

func (s *OpenTracingAppLayer) PatchUser(userId string, patch *model.UserPatch, asAdmin bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PatchUser")

	span.SetTag("userId", userId)

	span.SetTag("patch", patch)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.PatchUser(userId, patch, asAdmin)
}

func (s *OpenTracingAppLayer) PermanentDeleteAllUsers() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PermanentDeleteAllUsers")

	defer span.Finish()

	return s.app.PermanentDeleteAllUsers()
}

func (s *OpenTracingAppLayer) PermanentDeleteBot(botUserId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PermanentDeleteBot")

	span.SetTag("botUserId", botUserId)

	defer span.Finish()

	return s.app.PermanentDeleteBot(botUserId)
}

func (s *OpenTracingAppLayer) PermanentDeleteChannel(channel *model.Channel) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PermanentDeleteChannel")

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.PermanentDeleteChannel(channel)
}

func (s *OpenTracingAppLayer) PermanentDeleteTeam(team *model.Team) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PermanentDeleteTeam")

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.PermanentDeleteTeam(team)
}

func (s *OpenTracingAppLayer) PermanentDeleteTeamId(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PermanentDeleteTeamId")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.PermanentDeleteTeamId(teamId)
}

func (s *OpenTracingAppLayer) PermanentDeleteUser(user *model.User) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PermanentDeleteUser")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.PermanentDeleteUser(user)
}

func (s *OpenTracingAppLayer) PluginCommandsForTeam(teamId string) []*model.Command {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PluginCommandsForTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.PluginCommandsForTeam(teamId)
}

func (s *OpenTracingAppLayer) PluginContext() *plugin.Context {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PluginContext")

	defer span.Finish()

	return s.app.PluginContext()
}

func (s *OpenTracingAppLayer) PostActionCookieSecret() []byte {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostActionCookieSecret")

	defer span.Finish()

	return s.app.PostActionCookieSecret()
}

func (s *OpenTracingAppLayer) PostAddToChannelMessage(user *model.User, addedUser *model.User, channel *model.Channel, postRootId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostAddToChannelMessage")

	span.SetTag("user", user)

	span.SetTag("addedUser", addedUser)

	span.SetTag("channel", channel)

	span.SetTag("postRootId", postRootId)

	defer span.Finish()

	return s.app.PostAddToChannelMessage(user, addedUser, channel, postRootId)
}

func (s *OpenTracingAppLayer) PostPatchWithProxyRemovedFromImageURLs(patch *model.PostPatch) *model.PostPatch {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostPatchWithProxyRemovedFromImageURLs")

	span.SetTag("patch", patch)

	defer span.Finish()

	return s.app.PostPatchWithProxyRemovedFromImageURLs(patch)
}

func (s *OpenTracingAppLayer) PostUpdateChannelDisplayNameMessage(userId string, channel *model.Channel, oldChannelDisplayName string, newChannelDisplayName string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostUpdateChannelDisplayNameMessage")

	span.SetTag("userId", userId)

	span.SetTag("channel", channel)

	span.SetTag("oldChannelDisplayName", oldChannelDisplayName)

	span.SetTag("newChannelDisplayName", newChannelDisplayName)

	defer span.Finish()

	return s.app.PostUpdateChannelDisplayNameMessage(userId, channel, oldChannelDisplayName, newChannelDisplayName)
}

func (s *OpenTracingAppLayer) PostUpdateChannelHeaderMessage(userId string, channel *model.Channel, oldChannelHeader string, newChannelHeader string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostUpdateChannelHeaderMessage")

	span.SetTag("userId", userId)

	span.SetTag("channel", channel)

	span.SetTag("oldChannelHeader", oldChannelHeader)

	span.SetTag("newChannelHeader", newChannelHeader)

	defer span.Finish()

	return s.app.PostUpdateChannelHeaderMessage(userId, channel, oldChannelHeader, newChannelHeader)
}

func (s *OpenTracingAppLayer) PostUpdateChannelPurposeMessage(userId string, channel *model.Channel, oldChannelPurpose string, newChannelPurpose string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostUpdateChannelPurposeMessage")

	span.SetTag("userId", userId)

	span.SetTag("channel", channel)

	span.SetTag("oldChannelPurpose", oldChannelPurpose)

	span.SetTag("newChannelPurpose", newChannelPurpose)

	defer span.Finish()

	return s.app.PostUpdateChannelPurposeMessage(userId, channel, oldChannelPurpose, newChannelPurpose)
}

func (s *OpenTracingAppLayer) PostWithProxyAddedToImageURLs(post *model.Post) *model.Post {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostWithProxyAddedToImageURLs")

	span.SetTag("post", post)

	defer span.Finish()

	return s.app.PostWithProxyAddedToImageURLs(post)
}

func (s *OpenTracingAppLayer) PostWithProxyRemovedFromImageURLs(post *model.Post) *model.Post {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PostWithProxyRemovedFromImageURLs")

	span.SetTag("post", post)

	defer span.Finish()

	return s.app.PostWithProxyRemovedFromImageURLs(post)
}

func (s *OpenTracingAppLayer) PreparePostForClient(originalPost *model.Post, isNewPost bool, isEditPost bool) *model.Post {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PreparePostForClient")

	span.SetTag("originalPost", originalPost)

	span.SetTag("isNewPost", isNewPost)

	span.SetTag("isEditPost", isEditPost)

	defer span.Finish()

	return s.app.PreparePostForClient(originalPost, isNewPost, isEditPost)
}

func (s *OpenTracingAppLayer) PreparePostListForClient(originalList *model.PostList) *model.PostList {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PreparePostListForClient")

	span.SetTag("originalList", originalList)

	defer span.Finish()

	return s.app.PreparePostListForClient(originalList)
}

func (s *OpenTracingAppLayer) ProcessSlackAttachments(attachments []*model.SlackAttachment) []*model.SlackAttachment {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ProcessSlackAttachments")

	span.SetTag("attachments", attachments)

	defer span.Finish()

	return s.app.ProcessSlackAttachments(attachments)
}

func (s *OpenTracingAppLayer) ProcessSlackText(text string) string {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ProcessSlackText")

	span.SetTag("text", text)

	defer span.Finish()

	return s.app.ProcessSlackText(text)
}

func (s *OpenTracingAppLayer) PromoteGuestToUser(user *model.User, requestorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PromoteGuestToUser")

	span.SetTag("user", user)

	span.SetTag("requestorId", requestorId)

	defer span.Finish()

	return s.app.PromoteGuestToUser(user, requestorId)
}

func (s *OpenTracingAppLayer) Publish(message *model.WebSocketEvent) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.Publish")

	span.SetTag("message", message)

	defer span.Finish()

	s.app.Publish(message)
}

func (s *OpenTracingAppLayer) PublishSkipClusterSend(message *model.WebSocketEvent) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PublishSkipClusterSend")

	span.SetTag("message", message)

	defer span.Finish()

	s.app.PublishSkipClusterSend(message)
}

func (s *OpenTracingAppLayer) PurgeElasticsearchIndexes() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.PurgeElasticsearchIndexes")

	defer span.Finish()

	return s.app.PurgeElasticsearchIndexes()
}

func (s *OpenTracingAppLayer) ReadFile(path string) ([]byte, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ReadFile")

	span.SetTag("path", path)

	defer span.Finish()

	return s.app.ReadFile(path)
}

func (s *OpenTracingAppLayer) RecycleDatabaseConnection() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RecycleDatabaseConnection")

	defer span.Finish()

	s.app.RecycleDatabaseConnection()
}

func (s *OpenTracingAppLayer) RegenCommandToken(cmd *model.Command) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RegenCommandToken")

	span.SetTag("cmd", cmd)

	defer span.Finish()

	return s.app.RegenCommandToken(cmd)
}

func (s *OpenTracingAppLayer) RegenOutgoingWebhookToken(hook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RegenOutgoingWebhookToken")

	span.SetTag("hook", hook)

	defer span.Finish()

	return s.app.RegenOutgoingWebhookToken(hook)
}

func (s *OpenTracingAppLayer) RegenerateOAuthAppSecret(app *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RegenerateOAuthAppSecret")

	span.SetTag("app", app)

	defer span.Finish()

	return s.app.RegenerateOAuthAppSecret(app)
}

func (s *OpenTracingAppLayer) RegenerateTeamInviteId(teamId string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RegenerateTeamInviteId")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.RegenerateTeamInviteId(teamId)
}

func (s *OpenTracingAppLayer) RegisterPluginCommand(pluginId string, command *model.Command) error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RegisterPluginCommand")

	span.SetTag("pluginId", pluginId)

	span.SetTag("command", command)

	defer span.Finish()

	return s.app.RegisterPluginCommand(pluginId, command)
}

func (s *OpenTracingAppLayer) ReloadConfig() error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ReloadConfig")

	defer span.Finish()

	return s.app.ReloadConfig()
}

func (s *OpenTracingAppLayer) RemoveConfigListener(id string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveConfigListener")

	span.SetTag("id", id)

	defer span.Finish()

	s.app.RemoveConfigListener(id)
}

func (s *OpenTracingAppLayer) RemoveFile(path string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveFile")

	span.SetTag("path", path)

	defer span.Finish()

	return s.app.RemoveFile(path)
}

func (s *OpenTracingAppLayer) RemoveLicense() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveLicense")

	defer span.Finish()

	return s.app.RemoveLicense()
}

func (s *OpenTracingAppLayer) RemoveLicenseListener(id string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveLicenseListener")

	span.SetTag("id", id)

	defer span.Finish()

	s.app.RemoveLicenseListener(id)
}

func (s *OpenTracingAppLayer) RemovePlugin(id string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemovePlugin")

	span.SetTag("id", id)

	defer span.Finish()

	return s.app.RemovePlugin(id)
}

func (s *OpenTracingAppLayer) RemovePluginFromData(data model.PluginEventData) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemovePluginFromData")

	span.SetTag("data", data)

	defer span.Finish()

	s.app.RemovePluginFromData(data)
}

func (s *OpenTracingAppLayer) RemoveSamlIdpCertificate() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveSamlIdpCertificate")

	defer span.Finish()

	return s.app.RemoveSamlIdpCertificate()
}

func (s *OpenTracingAppLayer) RemoveSamlPrivateCertificate() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveSamlPrivateCertificate")

	defer span.Finish()

	return s.app.RemoveSamlPrivateCertificate()
}

func (s *OpenTracingAppLayer) RemoveSamlPublicCertificate() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveSamlPublicCertificate")

	defer span.Finish()

	return s.app.RemoveSamlPublicCertificate()
}

func (s *OpenTracingAppLayer) RemoveTeamIcon(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveTeamIcon")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.RemoveTeamIcon(teamId)
}

func (s *OpenTracingAppLayer) RemoveTeamMemberFromTeam(teamMember *model.TeamMember, requestorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveTeamMemberFromTeam")

	span.SetTag("teamMember", teamMember)

	span.SetTag("requestorId", requestorId)

	defer span.Finish()

	return s.app.RemoveTeamMemberFromTeam(teamMember, requestorId)
}

func (s *OpenTracingAppLayer) RemoveUserFromChannel(userIdToRemove string, removerUserId string, channel *model.Channel) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveUserFromChannel")

	span.SetTag("userIdToRemove", userIdToRemove)

	span.SetTag("removerUserId", removerUserId)

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.RemoveUserFromChannel(userIdToRemove, removerUserId, channel)
}

func (s *OpenTracingAppLayer) RemoveUserFromTeam(teamId string, userId string, requestorId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RemoveUserFromTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("requestorId", requestorId)

	defer span.Finish()

	return s.app.RemoveUserFromTeam(teamId, userId, requestorId)
}

func (s *OpenTracingAppLayer) RenameChannel(channel *model.Channel, newChannelName string, newDisplayName string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RenameChannel")

	span.SetTag("channel", channel)

	span.SetTag("newChannelName", newChannelName)

	span.SetTag("newDisplayName", newDisplayName)

	defer span.Finish()

	return s.app.RenameChannel(channel, newChannelName, newDisplayName)
}

func (s *OpenTracingAppLayer) RenameTeam(team *model.Team, newTeamName string, newDisplayName string) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RenameTeam")

	span.SetTag("team", team)

	span.SetTag("newTeamName", newTeamName)

	span.SetTag("newDisplayName", newDisplayName)

	defer span.Finish()

	return s.app.RenameTeam(team, newTeamName, newDisplayName)
}

func (s *OpenTracingAppLayer) ResetPasswordFromToken(userSuppliedTokenString string, newPassword string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ResetPasswordFromToken")

	span.SetTag("userSuppliedTokenString", userSuppliedTokenString)

	span.SetTag("newPassword", newPassword)

	defer span.Finish()

	return s.app.ResetPasswordFromToken(userSuppliedTokenString, newPassword)
}

func (s *OpenTracingAppLayer) ResetPermissionsSystem() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ResetPermissionsSystem")

	defer span.Finish()

	return s.app.ResetPermissionsSystem()
}

func (s *OpenTracingAppLayer) RestoreChannel(channel *model.Channel, userId string) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RestoreChannel")

	span.SetTag("channel", channel)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.RestoreChannel(channel, userId)
}

func (s *OpenTracingAppLayer) RestoreTeam(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RestoreTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.RestoreTeam(teamId)
}

func (s *OpenTracingAppLayer) RestrictUsersGetByPermissions(userId string, options *model.UserGetOptions) (*model.UserGetOptions, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RestrictUsersGetByPermissions")

	span.SetTag("userId", userId)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.RestrictUsersGetByPermissions(userId, options)
}

func (s *OpenTracingAppLayer) RestrictUsersSearchByPermissions(userId string, options *model.UserSearchOptions) (*model.UserSearchOptions, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RestrictUsersSearchByPermissions")

	span.SetTag("userId", userId)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.RestrictUsersSearchByPermissions(userId, options)
}

func (s *OpenTracingAppLayer) RevokeAccessToken(token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeAccessToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.RevokeAccessToken(token)
}

func (s *OpenTracingAppLayer) RevokeAllSessions(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeAllSessions")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.RevokeAllSessions(userId)
}

func (s *OpenTracingAppLayer) RevokeSession(session *model.Session) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeSession")

	span.SetTag("session", session)

	defer span.Finish()

	return s.app.RevokeSession(session)
}

func (s *OpenTracingAppLayer) RevokeSessionById(sessionId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeSessionById")

	span.SetTag("sessionId", sessionId)

	defer span.Finish()

	return s.app.RevokeSessionById(sessionId)
}

func (s *OpenTracingAppLayer) RevokeSessionsForDeviceId(userId string, deviceId string, currentSessionId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeSessionsForDeviceId")

	span.SetTag("userId", userId)

	span.SetTag("deviceId", deviceId)

	span.SetTag("currentSessionId", currentSessionId)

	defer span.Finish()

	return s.app.RevokeSessionsForDeviceId(userId, deviceId, currentSessionId)
}

func (s *OpenTracingAppLayer) RevokeSessionsFromAllUsers() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeSessionsFromAllUsers")

	defer span.Finish()

	return s.app.RevokeSessionsFromAllUsers()
}

func (s *OpenTracingAppLayer) RevokeUserAccessToken(token *model.UserAccessToken) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RevokeUserAccessToken")

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.RevokeUserAccessToken(token)
}

func (s *OpenTracingAppLayer) RolesGrantPermission(roleNames []string, permissionId string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.RolesGrantPermission")

	span.SetTag("roleNames", roleNames)

	span.SetTag("permissionId", permissionId)

	defer span.Finish()

	return s.app.RolesGrantPermission(roleNames, permissionId)
}

func (s *OpenTracingAppLayer) SanitizeProfile(user *model.User, asAdmin bool) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SanitizeProfile")

	span.SetTag("user", user)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	s.app.SanitizeProfile(user, asAdmin)
}

func (s *OpenTracingAppLayer) SanitizeTeam(session model.Session, team *model.Team) *model.Team {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SanitizeTeam")

	span.SetTag("session", session)

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.SanitizeTeam(session, team)
}

func (s *OpenTracingAppLayer) SanitizeTeams(session model.Session, teams []*model.Team) []*model.Team {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SanitizeTeams")

	span.SetTag("session", session)

	span.SetTag("teams", teams)

	defer span.Finish()

	return s.app.SanitizeTeams(session, teams)
}

func (s *OpenTracingAppLayer) SaveAndBroadcastStatus(status *model.Status) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveAndBroadcastStatus")

	span.SetTag("status", status)

	defer span.Finish()

	s.app.SaveAndBroadcastStatus(status)
}

func (s *OpenTracingAppLayer) SaveBrandImage(imageData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveBrandImage")

	span.SetTag("imageData", imageData)

	defer span.Finish()

	return s.app.SaveBrandImage(imageData)
}

func (s *OpenTracingAppLayer) SaveComplianceReport(job *model.Compliance) (*model.Compliance, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveComplianceReport")

	span.SetTag("job", job)

	defer span.Finish()

	return s.app.SaveComplianceReport(job)
}

func (s *OpenTracingAppLayer) SaveConfig(newCfg *model.Config, sendConfigChangeClusterMessage bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveConfig")

	span.SetTag("newCfg", newCfg)

	span.SetTag("sendConfigChangeClusterMessage", sendConfigChangeClusterMessage)

	defer span.Finish()

	return s.app.SaveConfig(newCfg, sendConfigChangeClusterMessage)
}

func (s *OpenTracingAppLayer) SaveLicense(licenseBytes []byte) (*model.License, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveLicense")

	span.SetTag("licenseBytes", licenseBytes)

	defer span.Finish()

	return s.app.SaveLicense(licenseBytes)
}

func (s *OpenTracingAppLayer) SaveReactionForPost(reaction *model.Reaction) (*model.Reaction, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveReactionForPost")

	span.SetTag("reaction", reaction)

	defer span.Finish()

	return s.app.SaveReactionForPost(reaction)
}

func (s *OpenTracingAppLayer) SaveUserTermsOfService(userId string, termsOfServiceId string, accepted bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SaveUserTermsOfService")

	span.SetTag("userId", userId)

	span.SetTag("termsOfServiceId", termsOfServiceId)

	span.SetTag("accepted", accepted)

	defer span.Finish()

	return s.app.SaveUserTermsOfService(userId, termsOfServiceId, accepted)
}

func (s *OpenTracingAppLayer) SchemesIterator(batchSize int) func() []*model.Scheme {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SchemesIterator")

	span.SetTag("batchSize", batchSize)

	defer span.Finish()

	return s.app.SchemesIterator(batchSize)
}

func (s *OpenTracingAppLayer) SearchAllChannels(term string, opts model.ChannelSearchOpts) (*model.ChannelListWithTeamData, int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchAllChannels")

	span.SetTag("term", term)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.SearchAllChannels(term, opts)
}

func (s *OpenTracingAppLayer) SearchAllTeams(searchOpts *model.TeamSearch) ([]*model.Team, int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchAllTeams")

	span.SetTag("searchOpts", searchOpts)

	defer span.Finish()

	return s.app.SearchAllTeams(searchOpts)
}

func (s *OpenTracingAppLayer) SearchArchivedChannels(teamId string, term string, userId string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchArchivedChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.SearchArchivedChannels(teamId, term, userId)
}

func (s *OpenTracingAppLayer) SearchChannels(teamId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchChannels(teamId, term)
}

func (s *OpenTracingAppLayer) SearchChannelsForUser(userId string, teamId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchChannelsForUser")

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchChannelsForUser(userId, teamId, term)
}

func (s *OpenTracingAppLayer) SearchChannelsUserNotIn(teamId string, userId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchChannelsUserNotIn")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchChannelsUserNotIn(teamId, userId, term)
}

func (s *OpenTracingAppLayer) SearchEmoji(name string, prefixOnly bool, limit int) ([]*model.Emoji, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchEmoji")

	span.SetTag("name", name)

	span.SetTag("prefixOnly", prefixOnly)

	span.SetTag("limit", limit)

	defer span.Finish()

	return s.app.SearchEmoji(name, prefixOnly, limit)
}

func (s *OpenTracingAppLayer) SearchGroupChannels(userId string, term string) (*model.ChannelList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchGroupChannels")

	span.SetTag("userId", userId)

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchGroupChannels(userId, term)
}

func (s *OpenTracingAppLayer) SearchPostsInTeam(teamId string, paramsList []*model.SearchParams) (*model.PostList, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchPostsInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("paramsList", paramsList)

	defer span.Finish()

	return s.app.SearchPostsInTeam(teamId, paramsList)
}

func (s *OpenTracingAppLayer) SearchPostsInTeamForUser(terms string, userId string, teamId string, isOrSearch bool, includeDeletedChannels bool, timeZoneOffset int, page int, perPage int) (*model.PostSearchResults, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchPostsInTeamForUser")

	span.SetTag("terms", terms)

	span.SetTag("userId", userId)

	span.SetTag("teamId", teamId)

	span.SetTag("isOrSearch", isOrSearch)

	span.SetTag("includeDeletedChannels", includeDeletedChannels)

	span.SetTag("timeZoneOffset", timeZoneOffset)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.SearchPostsInTeamForUser(terms, userId, teamId, isOrSearch, includeDeletedChannels, timeZoneOffset, page, perPage)
}

func (s *OpenTracingAppLayer) SearchPrivateTeams(term string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchPrivateTeams")

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchPrivateTeams(term)
}

func (s *OpenTracingAppLayer) SearchPublicTeams(term string) ([]*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchPublicTeams")

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchPublicTeams(term)
}

func (s *OpenTracingAppLayer) SearchUserAccessTokens(term string) ([]*model.UserAccessToken, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUserAccessTokens")

	span.SetTag("term", term)

	defer span.Finish()

	return s.app.SearchUserAccessTokens(term)
}

func (s *OpenTracingAppLayer) SearchUsers(props *model.UserSearch, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUsers")

	span.SetTag("props", props)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SearchUsers(props, options)
}

func (s *OpenTracingAppLayer) SearchUsersInChannel(channelId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUsersInChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SearchUsersInChannel(channelId, term, options)
}

func (s *OpenTracingAppLayer) SearchUsersInTeam(teamId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUsersInTeam")

	span.SetTag("teamId", teamId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SearchUsersInTeam(teamId, term, options)
}

func (s *OpenTracingAppLayer) SearchUsersNotInChannel(teamId string, channelId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUsersNotInChannel")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SearchUsersNotInChannel(teamId, channelId, term, options)
}

func (s *OpenTracingAppLayer) SearchUsersNotInTeam(notInTeamId string, term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUsersNotInTeam")

	span.SetTag("notInTeamId", notInTeamId)

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SearchUsersNotInTeam(notInTeamId, term, options)
}

func (s *OpenTracingAppLayer) SearchUsersWithoutTeam(term string, options *model.UserSearchOptions) ([]*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SearchUsersWithoutTeam")

	span.SetTag("term", term)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SearchUsersWithoutTeam(term, options)
}

func (s *OpenTracingAppLayer) SendAckToPushProxy(ack *model.PushNotificationAck) error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendAckToPushProxy")

	span.SetTag("ack", ack)

	defer span.Finish()

	return s.app.SendAckToPushProxy(ack)
}

func (s *OpenTracingAppLayer) SendAutoResponse(channel *model.Channel, receiver *model.User) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendAutoResponse")

	span.SetTag("channel", channel)

	span.SetTag("receiver", receiver)

	defer span.Finish()

	return s.app.SendAutoResponse(channel, receiver)
}

func (s *OpenTracingAppLayer) SendAutoResponseIfNecessary(channel *model.Channel, sender *model.User) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendAutoResponseIfNecessary")

	span.SetTag("channel", channel)

	span.SetTag("sender", sender)

	defer span.Finish()

	return s.app.SendAutoResponseIfNecessary(channel, sender)
}

func (s *OpenTracingAppLayer) SendChangeUsernameEmail(oldUsername string, newUsername string, email string, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendChangeUsernameEmail")

	span.SetTag("oldUsername", oldUsername)

	span.SetTag("newUsername", newUsername)

	span.SetTag("email", email)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendChangeUsernameEmail(oldUsername, newUsername, email, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendDailyDiagnostics() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendDailyDiagnostics")

	defer span.Finish()

	s.app.SendDailyDiagnostics()
}

func (s *OpenTracingAppLayer) SendDeactivateAccountEmail(email string, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendDeactivateAccountEmail")

	span.SetTag("email", email)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendDeactivateAccountEmail(email, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendDiagnostic(event string, properties map[string]interface{}) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendDiagnostic")

	span.SetTag("event", event)

	span.SetTag("properties", properties)

	defer span.Finish()

	s.app.SendDiagnostic(event, properties)
}

func (s *OpenTracingAppLayer) SendEmailChangeEmail(oldEmail string, newEmail string, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendEmailChangeEmail")

	span.SetTag("oldEmail", oldEmail)

	span.SetTag("newEmail", newEmail)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendEmailChangeEmail(oldEmail, newEmail, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendEmailChangeVerifyEmail(newUserEmail string, locale string, siteURL string, token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendEmailChangeVerifyEmail")

	span.SetTag("newUserEmail", newUserEmail)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.SendEmailChangeVerifyEmail(newUserEmail, locale, siteURL, token)
}

func (s *OpenTracingAppLayer) SendEmailVerification(user *model.User, newEmail string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendEmailVerification")

	span.SetTag("user", user)

	span.SetTag("newEmail", newEmail)

	defer span.Finish()

	return s.app.SendEmailVerification(user, newEmail)
}

func (s *OpenTracingAppLayer) SendEphemeralPost(userId string, post *model.Post) *model.Post {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendEphemeralPost")

	span.SetTag("userId", userId)

	span.SetTag("post", post)

	defer span.Finish()

	return s.app.SendEphemeralPost(userId, post)
}

func (s *OpenTracingAppLayer) SendGuestInviteEmails(team *model.Team, channels []*model.Channel, senderName string, senderUserId string, invites []string, siteURL string, message string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendGuestInviteEmails")

	span.SetTag("team", team)

	span.SetTag("channels", channels)

	span.SetTag("senderName", senderName)

	span.SetTag("senderUserId", senderUserId)

	span.SetTag("invites", invites)

	span.SetTag("siteURL", siteURL)

	span.SetTag("message", message)

	defer span.Finish()

	s.app.SendGuestInviteEmails(team, channels, senderName, senderUserId, invites, siteURL, message)
}

func (s *OpenTracingAppLayer) SendInviteEmails(team *model.Team, senderName string, senderUserId string, invites []string, siteURL string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendInviteEmails")

	span.SetTag("team", team)

	span.SetTag("senderName", senderName)

	span.SetTag("senderUserId", senderUserId)

	span.SetTag("invites", invites)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	s.app.SendInviteEmails(team, senderName, senderUserId, invites, siteURL)
}

func (s *OpenTracingAppLayer) SendMail(to string, subject string, htmlBody string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendMail")

	span.SetTag("to", to)

	span.SetTag("subject", subject)

	span.SetTag("htmlBody", htmlBody)

	defer span.Finish()

	return s.app.SendMail(to, subject, htmlBody)
}

func (s *OpenTracingAppLayer) SendMailWithEmbeddedFiles(to string, subject string, htmlBody string, embeddedFiles map[string]io.Reader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendMailWithEmbeddedFiles")

	span.SetTag("to", to)

	span.SetTag("subject", subject)

	span.SetTag("htmlBody", htmlBody)

	span.SetTag("embeddedFiles", embeddedFiles)

	defer span.Finish()

	return s.app.SendMailWithEmbeddedFiles(to, subject, htmlBody, embeddedFiles)
}

func (s *OpenTracingAppLayer) SendMfaChangeEmail(email string, activated bool, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendMfaChangeEmail")

	span.SetTag("email", email)

	span.SetTag("activated", activated)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendMfaChangeEmail(email, activated, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendNotificationMail(to string, subject string, htmlBody string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendNotificationMail")

	span.SetTag("to", to)

	span.SetTag("subject", subject)

	span.SetTag("htmlBody", htmlBody)

	defer span.Finish()

	return s.app.SendNotificationMail(to, subject, htmlBody)
}

func (s *OpenTracingAppLayer) SendNotifications(post *model.Post, team *model.Team, channel *model.Channel, sender *model.User, parentPostList *model.PostList) ([]string, error) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendNotifications")

	span.SetTag("post", post)

	span.SetTag("team", team)

	span.SetTag("channel", channel)

	span.SetTag("sender", sender)

	span.SetTag("parentPostList", parentPostList)

	defer span.Finish()

	return s.app.SendNotifications(post, team, channel, sender, parentPostList)
}

func (s *OpenTracingAppLayer) SendPasswordChangeEmail(email string, method string, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendPasswordChangeEmail")

	span.SetTag("email", email)

	span.SetTag("method", method)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendPasswordChangeEmail(email, method, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendPasswordReset(email string, siteURL string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendPasswordReset")

	span.SetTag("email", email)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendPasswordReset(email, siteURL)
}

func (s *OpenTracingAppLayer) SendPasswordResetEmail(email string, token *model.Token, locale string, siteURL string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendPasswordResetEmail")

	span.SetTag("email", email)

	span.SetTag("token", token)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendPasswordResetEmail(email, token, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendSignInChangeEmail(email string, method string, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendSignInChangeEmail")

	span.SetTag("email", email)

	span.SetTag("method", method)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendSignInChangeEmail(email, method, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendUserAccessTokenAddedEmail(email string, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendUserAccessTokenAddedEmail")

	span.SetTag("email", email)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendUserAccessTokenAddedEmail(email, locale, siteURL)
}

func (s *OpenTracingAppLayer) SendVerifyEmail(userEmail string, locale string, siteURL string, token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendVerifyEmail")

	span.SetTag("userEmail", userEmail)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.SendVerifyEmail(userEmail, locale, siteURL, token)
}

func (s *OpenTracingAppLayer) SendWelcomeEmail(userId string, email string, verified bool, locale string, siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SendWelcomeEmail")

	span.SetTag("userId", userId)

	span.SetTag("email", email)

	span.SetTag("verified", verified)

	span.SetTag("locale", locale)

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.SendWelcomeEmail(userId, email, verified, locale, siteURL)
}

func (s *OpenTracingAppLayer) ServeInterPluginRequest(w http.ResponseWriter, r *http.Request, sourcePluginId string, destinationPluginId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ServeInterPluginRequest")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("sourcePluginId", sourcePluginId)

	span.SetTag("destinationPluginId", destinationPluginId)

	defer span.Finish()

	s.app.ServeInterPluginRequest(w, r, sourcePluginId, destinationPluginId)
}

func (s *OpenTracingAppLayer) ServePluginPublicRequest(w http.ResponseWriter, r *http.Request) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ServePluginPublicRequest")

	span.SetTag("w", w)

	span.SetTag("r", r)

	defer span.Finish()

	s.app.ServePluginPublicRequest(w, r)
}

func (s *OpenTracingAppLayer) ServePluginRequest(w http.ResponseWriter, r *http.Request) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ServePluginRequest")

	span.SetTag("w", w)

	span.SetTag("r", r)

	defer span.Finish()

	s.app.ServePluginRequest(w, r)
}

func (s *OpenTracingAppLayer) ServerBusyStateChanged(sbs *model.ServerBusyState) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ServerBusyStateChanged")

	span.SetTag("sbs", sbs)

	defer span.Finish()

	s.app.ServerBusyStateChanged(sbs)
}

func (s *OpenTracingAppLayer) SessionCacheLength() int {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionCacheLength")

	defer span.Finish()

	return s.app.SessionCacheLength()
}

func (s *OpenTracingAppLayer) SessionHasPermissionTo(session model.Session, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionTo")

	span.SetTag("session", session)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.SessionHasPermissionTo(session, permission)
}

func (s *OpenTracingAppLayer) SessionHasPermissionToChannel(session model.Session, channelId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionToChannel")

	span.SetTag("session", session)

	span.SetTag("channelId", channelId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.SessionHasPermissionToChannel(session, channelId, permission)
}

func (s *OpenTracingAppLayer) SessionHasPermissionToChannelByPost(session model.Session, postId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionToChannelByPost")

	span.SetTag("session", session)

	span.SetTag("postId", postId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.SessionHasPermissionToChannelByPost(session, postId, permission)
}

func (s *OpenTracingAppLayer) SessionHasPermissionToManageBot(session model.Session, botUserId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionToManageBot")

	span.SetTag("session", session)

	span.SetTag("botUserId", botUserId)

	defer span.Finish()

	return s.app.SessionHasPermissionToManageBot(session, botUserId)
}

func (s *OpenTracingAppLayer) SessionHasPermissionToTeam(session model.Session, teamId string, permission *model.Permission) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionToTeam")

	span.SetTag("session", session)

	span.SetTag("teamId", teamId)

	span.SetTag("permission", permission)

	defer span.Finish()

	return s.app.SessionHasPermissionToTeam(session, teamId, permission)
}

func (s *OpenTracingAppLayer) SessionHasPermissionToUser(session model.Session, userId string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionToUser")

	span.SetTag("session", session)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.SessionHasPermissionToUser(session, userId)
}

func (s *OpenTracingAppLayer) SessionHasPermissionToUserOrBot(session model.Session, userId string) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SessionHasPermissionToUserOrBot")

	span.SetTag("session", session)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.SessionHasPermissionToUserOrBot(session, userId)
}

func (s *OpenTracingAppLayer) SetActiveChannel(userId string, channelId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetActiveChannel")

	span.SetTag("userId", userId)

	span.SetTag("channelId", channelId)

	defer span.Finish()

	return s.app.SetActiveChannel(userId, channelId)
}

func (s *OpenTracingAppLayer) SetAutoResponderStatus(user *model.User, oldNotifyProps model.StringMap) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetAutoResponderStatus")

	span.SetTag("user", user)

	span.SetTag("oldNotifyProps", oldNotifyProps)

	defer span.Finish()

	s.app.SetAutoResponderStatus(user, oldNotifyProps)
}

func (s *OpenTracingAppLayer) SetBotIconImage(botUserId string, file io.ReadSeeker) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetBotIconImage")

	span.SetTag("botUserId", botUserId)

	span.SetTag("file", file)

	defer span.Finish()

	return s.app.SetBotIconImage(botUserId, file)
}

func (s *OpenTracingAppLayer) SetBotIconImageFromMultiPartFile(botUserId string, imageData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetBotIconImageFromMultiPartFile")

	span.SetTag("botUserId", botUserId)

	span.SetTag("imageData", imageData)

	defer span.Finish()

	return s.app.SetBotIconImageFromMultiPartFile(botUserId, imageData)
}

func (s *OpenTracingAppLayer) SetClientLicense(m map[string]string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetClientLicense")

	span.SetTag("m", m)

	defer span.Finish()

	s.app.SetClientLicense(m)
}

func (s *OpenTracingAppLayer) SetDefaultProfileImage(user *model.User) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetDefaultProfileImage")

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.SetDefaultProfileImage(user)
}

func (s *OpenTracingAppLayer) SetDiagnosticId(id string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetDiagnosticId")

	span.SetTag("id", id)

	defer span.Finish()

	s.app.SetDiagnosticId(id)
}

func (s *OpenTracingAppLayer) SetLicense(license *model.License) bool {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetLicense")

	span.SetTag("license", license)

	defer span.Finish()

	return s.app.SetLicense(license)
}

func (s *OpenTracingAppLayer) SetPhase2PermissionsMigrationStatus(isComplete bool) error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetPhase2PermissionsMigrationStatus")

	span.SetTag("isComplete", isComplete)

	defer span.Finish()

	return s.app.SetPhase2PermissionsMigrationStatus(isComplete)
}

func (s *OpenTracingAppLayer) SetPluginKey(pluginId string, key string, value []byte) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetPluginKey")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	span.SetTag("value", value)

	defer span.Finish()

	return s.app.SetPluginKey(pluginId, key, value)
}

func (s *OpenTracingAppLayer) SetPluginKeyWithExpiry(pluginId string, key string, value []byte, expireInSeconds int64) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetPluginKeyWithExpiry")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	span.SetTag("value", value)

	span.SetTag("expireInSeconds", expireInSeconds)

	defer span.Finish()

	return s.app.SetPluginKeyWithExpiry(pluginId, key, value, expireInSeconds)
}

func (s *OpenTracingAppLayer) SetPluginKeyWithOptions(pluginId string, key string, value []byte, options model.PluginKVSetOptions) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetPluginKeyWithOptions")

	span.SetTag("pluginId", pluginId)

	span.SetTag("key", key)

	span.SetTag("value", value)

	span.SetTag("options", options)

	defer span.Finish()

	return s.app.SetPluginKeyWithOptions(pluginId, key, value, options)
}

func (s *OpenTracingAppLayer) SetPluginsEnvironment(pluginsEnvironment *plugin.Environment) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetPluginsEnvironment")

	span.SetTag("pluginsEnvironment", pluginsEnvironment)

	defer span.Finish()

	s.app.SetPluginsEnvironment(pluginsEnvironment)
}

func (s *OpenTracingAppLayer) SetProfileImage(userId string, imageData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetProfileImage")

	span.SetTag("userId", userId)

	span.SetTag("imageData", imageData)

	defer span.Finish()

	return s.app.SetProfileImage(userId, imageData)
}

func (s *OpenTracingAppLayer) SetProfileImageFromFile(userId string, file io.Reader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetProfileImageFromFile")

	span.SetTag("userId", userId)

	span.SetTag("file", file)

	defer span.Finish()

	return s.app.SetProfileImageFromFile(userId, file)
}

func (s *OpenTracingAppLayer) SetProfileImageFromMultiPartFile(userId string, file multipart.File) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetProfileImageFromMultiPartFile")

	span.SetTag("userId", userId)

	span.SetTag("file", file)

	defer span.Finish()

	return s.app.SetProfileImageFromMultiPartFile(userId, file)
}

func (s *OpenTracingAppLayer) SetSamlIdpCertificateFromMetadata(data []byte) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetSamlIdpCertificateFromMetadata")

	span.SetTag("data", data)

	defer span.Finish()

	return s.app.SetSamlIdpCertificateFromMetadata(data)
}

func (s *OpenTracingAppLayer) SetStatusAwayIfNeeded(userId string, manual bool) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetStatusAwayIfNeeded")

	span.SetTag("userId", userId)

	span.SetTag("manual", manual)

	defer span.Finish()

	s.app.SetStatusAwayIfNeeded(userId, manual)
}

func (s *OpenTracingAppLayer) SetStatusDoNotDisturb(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetStatusDoNotDisturb")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.SetStatusDoNotDisturb(userId)
}

func (s *OpenTracingAppLayer) SetStatusLastActivityAt(userId string, activityAt int64) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetStatusLastActivityAt")

	span.SetTag("userId", userId)

	span.SetTag("activityAt", activityAt)

	defer span.Finish()

	s.app.SetStatusLastActivityAt(userId, activityAt)
}

func (s *OpenTracingAppLayer) SetStatusOffline(userId string, manual bool) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetStatusOffline")

	span.SetTag("userId", userId)

	span.SetTag("manual", manual)

	defer span.Finish()

	s.app.SetStatusOffline(userId, manual)
}

func (s *OpenTracingAppLayer) SetStatusOnline(userId string, manual bool) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetStatusOnline")

	span.SetTag("userId", userId)

	span.SetTag("manual", manual)

	defer span.Finish()

	s.app.SetStatusOnline(userId, manual)
}

func (s *OpenTracingAppLayer) SetStatusOutOfOffice(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetStatusOutOfOffice")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.SetStatusOutOfOffice(userId)
}

func (s *OpenTracingAppLayer) SetTeamIcon(teamId string, imageData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetTeamIcon")

	span.SetTag("teamId", teamId)

	span.SetTag("imageData", imageData)

	defer span.Finish()

	return s.app.SetTeamIcon(teamId, imageData)
}

func (s *OpenTracingAppLayer) SetTeamIconFromFile(team *model.Team, file io.Reader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetTeamIconFromFile")

	span.SetTag("team", team)

	span.SetTag("file", file)

	defer span.Finish()

	return s.app.SetTeamIconFromFile(team, file)
}

func (s *OpenTracingAppLayer) SetTeamIconFromMultiPartFile(teamId string, file multipart.File) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetTeamIconFromMultiPartFile")

	span.SetTag("teamId", teamId)

	span.SetTag("file", file)

	defer span.Finish()

	return s.app.SetTeamIconFromMultiPartFile(teamId, file)
}

func (s *OpenTracingAppLayer) SetupInviteEmailRateLimiting() error {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SetupInviteEmailRateLimiting")

	defer span.Finish()

	return s.app.SetupInviteEmailRateLimiting()
}

func (s *OpenTracingAppLayer) ShutDownPlugins() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ShutDownPlugins")

	defer span.Finish()

	s.app.ShutDownPlugins()
}

func (s *OpenTracingAppLayer) Shutdown() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.Shutdown")

	defer span.Finish()

	s.app.Shutdown()
}

func (s *OpenTracingAppLayer) SlackAddBotUser(teamId string, log *bytes.Buffer) *model.User {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SlackAddBotUser")

	span.SetTag("teamId", teamId)

	span.SetTag("log", log)

	defer span.Finish()

	return s.app.SlackAddBotUser(teamId, log)
}

func (s *OpenTracingAppLayer) SlackAddChannels(teamId string, slackchannels []SlackChannel, posts map[string][]SlackPost, users map[string]*model.User, uploads map[string]*zip.File, botUser *model.User, importerLog *bytes.Buffer) map[string]*model.Channel {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SlackAddChannels")

	span.SetTag("teamId", teamId)

	span.SetTag("slackchannels", slackchannels)

	span.SetTag("posts", posts)

	span.SetTag("users", users)

	span.SetTag("uploads", uploads)

	span.SetTag("botUser", botUser)

	span.SetTag("importerLog", importerLog)

	defer span.Finish()

	return s.app.SlackAddChannels(teamId, slackchannels, posts, users, uploads, botUser, importerLog)
}

func (s *OpenTracingAppLayer) SlackAddPosts(teamId string, channel *model.Channel, posts []SlackPost, users map[string]*model.User, uploads map[string]*zip.File, botUser *model.User) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SlackAddPosts")

	span.SetTag("teamId", teamId)

	span.SetTag("channel", channel)

	span.SetTag("posts", posts)

	span.SetTag("users", users)

	span.SetTag("uploads", uploads)

	span.SetTag("botUser", botUser)

	defer span.Finish()

	s.app.SlackAddPosts(teamId, channel, posts, users, uploads, botUser)
}

func (s *OpenTracingAppLayer) SlackAddUsers(teamId string, slackusers []SlackUser, importerLog *bytes.Buffer) map[string]*model.User {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SlackAddUsers")

	span.SetTag("teamId", teamId)

	span.SetTag("slackusers", slackusers)

	span.SetTag("importerLog", importerLog)

	defer span.Finish()

	return s.app.SlackAddUsers(teamId, slackusers, importerLog)
}

func (s *OpenTracingAppLayer) SlackImport(fileData multipart.File, fileSize int64, teamID string) (*model.AppError, *bytes.Buffer) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SlackImport")

	span.SetTag("fileData", fileData)

	span.SetTag("fileSize", fileSize)

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.app.SlackImport(fileData, fileSize, teamID)
}

func (s *OpenTracingAppLayer) SlackUploadFile(slackPostFile *SlackFile, uploads map[string]*zip.File, teamId string, channelId string, userId string, slackTimestamp string) (*model.FileInfo, bool) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SlackUploadFile")

	span.SetTag("slackPostFile", slackPostFile)

	span.SetTag("uploads", uploads)

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("slackTimestamp", slackTimestamp)

	defer span.Finish()

	return s.app.SlackUploadFile(slackPostFile, uploads, teamId, channelId, userId, slackTimestamp)
}

func (s *OpenTracingAppLayer) SoftDeleteTeam(teamId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SoftDeleteTeam")

	span.SetTag("teamId", teamId)

	defer span.Finish()

	return s.app.SoftDeleteTeam(teamId)
}

func (s *OpenTracingAppLayer) StartPushNotificationsHubWorkers() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.StartPushNotificationsHubWorkers")

	defer span.Finish()

	s.app.StartPushNotificationsHubWorkers()
}

func (s *OpenTracingAppLayer) StopPushNotificationsHubWorkers() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.StopPushNotificationsHubWorkers")

	defer span.Finish()

	s.app.StopPushNotificationsHubWorkers()
}

func (s *OpenTracingAppLayer) SubmitInteractiveDialog(request model.SubmitDialogRequest) (*model.SubmitDialogResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SubmitInteractiveDialog")

	span.SetTag("request", request)

	defer span.Finish()

	return s.app.SubmitInteractiveDialog(request)
}

func (s *OpenTracingAppLayer) SwitchEmailToLdap(email string, password string, code string, ldapLoginId string, ldapPassword string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SwitchEmailToLdap")

	span.SetTag("email", email)

	span.SetTag("password", password)

	span.SetTag("code", code)

	span.SetTag("ldapLoginId", ldapLoginId)

	span.SetTag("ldapPassword", ldapPassword)

	defer span.Finish()

	return s.app.SwitchEmailToLdap(email, password, code, ldapLoginId, ldapPassword)
}

func (s *OpenTracingAppLayer) SwitchEmailToOAuth(w http.ResponseWriter, r *http.Request, email string, password string, code string, service string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SwitchEmailToOAuth")

	span.SetTag("w", w)

	span.SetTag("r", r)

	span.SetTag("email", email)

	span.SetTag("password", password)

	span.SetTag("code", code)

	span.SetTag("service", service)

	defer span.Finish()

	return s.app.SwitchEmailToOAuth(w, r, email, password, code, service)
}

func (s *OpenTracingAppLayer) SwitchLdapToEmail(ldapPassword string, code string, email string, newPassword string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SwitchLdapToEmail")

	span.SetTag("ldapPassword", ldapPassword)

	span.SetTag("code", code)

	span.SetTag("email", email)

	span.SetTag("newPassword", newPassword)

	defer span.Finish()

	return s.app.SwitchLdapToEmail(ldapPassword, code, email, newPassword)
}

func (s *OpenTracingAppLayer) SwitchOAuthToEmail(email string, password string, requesterId string) (string, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SwitchOAuthToEmail")

	span.SetTag("email", email)

	span.SetTag("password", password)

	span.SetTag("requesterId", requesterId)

	defer span.Finish()

	return s.app.SwitchOAuthToEmail(email, password, requesterId)
}

func (s *OpenTracingAppLayer) SyncLdap() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SyncLdap")

	defer span.Finish()

	s.app.SyncLdap()
}

func (s *OpenTracingAppLayer) SyncPlugins() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SyncPlugins")

	defer span.Finish()

	return s.app.SyncPlugins()
}

func (s *OpenTracingAppLayer) SyncPluginsActiveState() {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SyncPluginsActiveState")

	defer span.Finish()

	s.app.SyncPluginsActiveState()
}

func (s *OpenTracingAppLayer) SyncRolesAndMembership(syncableID string, syncableType model.GroupSyncableType) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SyncRolesAndMembership")

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	s.app.SyncRolesAndMembership(syncableID, syncableType)
}

func (s *OpenTracingAppLayer) SyncSyncableRoles(syncableID string, syncableType model.GroupSyncableType) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.SyncSyncableRoles")

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.app.SyncSyncableRoles(syncableID, syncableType)
}

func (s *OpenTracingAppLayer) TeamMembersMinusGroupMembers(teamID string, groupIDs []string, page int, perPage int) ([]*model.UserWithGroups, int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TeamMembersMinusGroupMembers")

	span.SetTag("teamID", teamID)

	span.SetTag("groupIDs", groupIDs)

	span.SetTag("page", page)

	span.SetTag("perPage", perPage)

	defer span.Finish()

	return s.app.TeamMembersMinusGroupMembers(teamID, groupIDs, page, perPage)
}

func (s *OpenTracingAppLayer) TeamMembersToAdd(since int64, teamID *string) ([]*model.UserTeamIDPair, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TeamMembersToAdd")

	span.SetTag("since", since)

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.app.TeamMembersToAdd(since, teamID)
}

func (s *OpenTracingAppLayer) TeamMembersToRemove(teamID *string) ([]*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TeamMembersToRemove")

	span.SetTag("teamID", teamID)

	defer span.Finish()

	return s.app.TeamMembersToRemove(teamID)
}

func (s *OpenTracingAppLayer) TestElasticsearch(cfg *model.Config) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TestElasticsearch")

	span.SetTag("cfg", cfg)

	defer span.Finish()

	return s.app.TestElasticsearch(cfg)
}

func (s *OpenTracingAppLayer) TestEmail(userId string, cfg *model.Config) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TestEmail")

	span.SetTag("userId", userId)

	span.SetTag("cfg", cfg)

	defer span.Finish()

	return s.app.TestEmail(userId, cfg)
}

func (s *OpenTracingAppLayer) TestLdap() *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TestLdap")

	defer span.Finish()

	return s.app.TestLdap()
}

func (s *OpenTracingAppLayer) TestSiteURL(siteURL string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TestSiteURL")

	span.SetTag("siteURL", siteURL)

	defer span.Finish()

	return s.app.TestSiteURL(siteURL)
}

func (s *OpenTracingAppLayer) ToggleMuteChannel(channelId string, userId string) *model.ChannelMember {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ToggleMuteChannel")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.ToggleMuteChannel(channelId, userId)
}

func (s *OpenTracingAppLayer) TotalWebsocketConnections() int {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TotalWebsocketConnections")

	defer span.Finish()

	return s.app.TotalWebsocketConnections()
}

func (s *OpenTracingAppLayer) TriggerWebhook(payload *model.OutgoingWebhookPayload, hook *model.OutgoingWebhook, post *model.Post, channel *model.Channel) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.TriggerWebhook")

	span.SetTag("payload", payload)

	span.SetTag("hook", hook)

	span.SetTag("post", post)

	span.SetTag("channel", channel)

	defer span.Finish()

	s.app.TriggerWebhook(payload, hook, post, channel)
}

func (s *OpenTracingAppLayer) UnregisterPluginCommand(pluginId string, teamId string, trigger string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UnregisterPluginCommand")

	span.SetTag("pluginId", pluginId)

	span.SetTag("teamId", teamId)

	span.SetTag("trigger", trigger)

	defer span.Finish()

	s.app.UnregisterPluginCommand(pluginId, teamId, trigger)
}

func (s *OpenTracingAppLayer) UnregisterPluginCommands(pluginId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UnregisterPluginCommands")

	span.SetTag("pluginId", pluginId)

	defer span.Finish()

	s.app.UnregisterPluginCommands(pluginId)
}

func (s *OpenTracingAppLayer) UpdateActive(user *model.User, active bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateActive")

	span.SetTag("user", user)

	span.SetTag("active", active)

	defer span.Finish()

	return s.app.UpdateActive(user, active)
}

func (s *OpenTracingAppLayer) UpdateBotActive(botUserId string, active bool) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateBotActive")

	span.SetTag("botUserId", botUserId)

	span.SetTag("active", active)

	defer span.Finish()

	return s.app.UpdateBotActive(botUserId, active)
}

func (s *OpenTracingAppLayer) UpdateBotOwner(botUserId string, newOwnerId string) (*model.Bot, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateBotOwner")

	span.SetTag("botUserId", botUserId)

	span.SetTag("newOwnerId", newOwnerId)

	defer span.Finish()

	return s.app.UpdateBotOwner(botUserId, newOwnerId)
}

func (s *OpenTracingAppLayer) UpdateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannel")

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.UpdateChannel(channel)
}

func (s *OpenTracingAppLayer) UpdateChannelLastViewedAt(channelIds []string, userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannelLastViewedAt")

	span.SetTag("channelIds", channelIds)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.UpdateChannelLastViewedAt(channelIds, userId)
}

func (s *OpenTracingAppLayer) UpdateChannelMemberNotifyProps(data map[string]string, channelId string, userId string) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannelMemberNotifyProps")

	span.SetTag("data", data)

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.UpdateChannelMemberNotifyProps(data, channelId, userId)
}

func (s *OpenTracingAppLayer) UpdateChannelMemberRoles(channelId string, userId string, newRoles string) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannelMemberRoles")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("newRoles", newRoles)

	defer span.Finish()

	return s.app.UpdateChannelMemberRoles(channelId, userId, newRoles)
}

func (s *OpenTracingAppLayer) UpdateChannelMemberSchemeRoles(channelId string, userId string, isSchemeGuest bool, isSchemeUser bool, isSchemeAdmin bool) (*model.ChannelMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannelMemberSchemeRoles")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("isSchemeGuest", isSchemeGuest)

	span.SetTag("isSchemeUser", isSchemeUser)

	span.SetTag("isSchemeAdmin", isSchemeAdmin)

	defer span.Finish()

	return s.app.UpdateChannelMemberSchemeRoles(channelId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)
}

func (s *OpenTracingAppLayer) UpdateChannelPrivacy(oldChannel *model.Channel, user *model.User) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannelPrivacy")

	span.SetTag("oldChannel", oldChannel)

	span.SetTag("user", user)

	defer span.Finish()

	return s.app.UpdateChannelPrivacy(oldChannel, user)
}

func (s *OpenTracingAppLayer) UpdateChannelScheme(channel *model.Channel) (*model.Channel, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateChannelScheme")

	span.SetTag("channel", channel)

	defer span.Finish()

	return s.app.UpdateChannelScheme(channel)
}

func (s *OpenTracingAppLayer) UpdateCommand(oldCmd *model.Command, updatedCmd *model.Command) (*model.Command, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateCommand")

	span.SetTag("oldCmd", oldCmd)

	span.SetTag("updatedCmd", updatedCmd)

	defer span.Finish()

	return s.app.UpdateCommand(oldCmd, updatedCmd)
}

func (s *OpenTracingAppLayer) UpdateConfig(f func(*model.Config)) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateConfig")

	span.SetTag("f", f)

	defer span.Finish()

	s.app.UpdateConfig(f)
}

func (s *OpenTracingAppLayer) UpdateEphemeralPost(userId string, post *model.Post) *model.Post {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateEphemeralPost")

	span.SetTag("userId", userId)

	span.SetTag("post", post)

	defer span.Finish()

	return s.app.UpdateEphemeralPost(userId, post)
}

func (s *OpenTracingAppLayer) UpdateGroup(group *model.Group) (*model.Group, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateGroup")

	span.SetTag("group", group)

	defer span.Finish()

	return s.app.UpdateGroup(group)
}

func (s *OpenTracingAppLayer) UpdateGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateGroupSyncable")

	span.SetTag("groupSyncable", groupSyncable)

	defer span.Finish()

	return s.app.UpdateGroupSyncable(groupSyncable)
}

func (s *OpenTracingAppLayer) UpdateIncomingWebhook(oldHook *model.IncomingWebhook, updatedHook *model.IncomingWebhook) (*model.IncomingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateIncomingWebhook")

	span.SetTag("oldHook", oldHook)

	span.SetTag("updatedHook", updatedHook)

	defer span.Finish()

	return s.app.UpdateIncomingWebhook(oldHook, updatedHook)
}

func (s *OpenTracingAppLayer) UpdateLastActivityAtIfNeeded(session model.Session) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateLastActivityAtIfNeeded")

	span.SetTag("session", session)

	defer span.Finish()

	s.app.UpdateLastActivityAtIfNeeded(session)
}

func (s *OpenTracingAppLayer) UpdateMfa(activate bool, userId string, token string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateMfa")

	span.SetTag("activate", activate)

	span.SetTag("userId", userId)

	span.SetTag("token", token)

	defer span.Finish()

	return s.app.UpdateMfa(activate, userId, token)
}

func (s *OpenTracingAppLayer) UpdateMobileAppBadge(userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateMobileAppBadge")

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.UpdateMobileAppBadge(userId)
}

func (s *OpenTracingAppLayer) UpdateMobileAppBadgeSync(userId string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateMobileAppBadgeSync")

	span.SetTag("userId", userId)

	defer span.Finish()

	return s.app.UpdateMobileAppBadgeSync(userId)
}

func (s *OpenTracingAppLayer) UpdateOAuthUserAttrs(userData io.Reader, user *model.User, provider einterfaces.OauthProvider, service string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateOAuthUserAttrs")

	span.SetTag("userData", userData)

	span.SetTag("user", user)

	span.SetTag("provider", provider)

	span.SetTag("service", service)

	defer span.Finish()

	return s.app.UpdateOAuthUserAttrs(userData, user, provider, service)
}

func (s *OpenTracingAppLayer) UpdateOauthApp(oldApp *model.OAuthApp, updatedApp *model.OAuthApp) (*model.OAuthApp, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateOauthApp")

	span.SetTag("oldApp", oldApp)

	span.SetTag("updatedApp", updatedApp)

	defer span.Finish()

	return s.app.UpdateOauthApp(oldApp, updatedApp)
}

func (s *OpenTracingAppLayer) UpdateOutgoingWebhook(oldHook *model.OutgoingWebhook, updatedHook *model.OutgoingWebhook) (*model.OutgoingWebhook, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateOutgoingWebhook")

	span.SetTag("oldHook", oldHook)

	span.SetTag("updatedHook", updatedHook)

	defer span.Finish()

	return s.app.UpdateOutgoingWebhook(oldHook, updatedHook)
}

func (s *OpenTracingAppLayer) UpdatePassword(user *model.User, newPassword string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdatePassword")

	span.SetTag("user", user)

	span.SetTag("newPassword", newPassword)

	defer span.Finish()

	return s.app.UpdatePassword(user, newPassword)
}

func (s *OpenTracingAppLayer) UpdatePasswordAsUser(userId string, currentPassword string, newPassword string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdatePasswordAsUser")

	span.SetTag("userId", userId)

	span.SetTag("currentPassword", currentPassword)

	span.SetTag("newPassword", newPassword)

	defer span.Finish()

	return s.app.UpdatePasswordAsUser(userId, currentPassword, newPassword)
}

func (s *OpenTracingAppLayer) UpdatePasswordByUserIdSendEmail(userId string, newPassword string, method string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdatePasswordByUserIdSendEmail")

	span.SetTag("userId", userId)

	span.SetTag("newPassword", newPassword)

	span.SetTag("method", method)

	defer span.Finish()

	return s.app.UpdatePasswordByUserIdSendEmail(userId, newPassword, method)
}

func (s *OpenTracingAppLayer) UpdatePasswordSendEmail(user *model.User, newPassword string, method string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdatePasswordSendEmail")

	span.SetTag("user", user)

	span.SetTag("newPassword", newPassword)

	span.SetTag("method", method)

	defer span.Finish()

	return s.app.UpdatePasswordSendEmail(user, newPassword, method)
}

func (s *OpenTracingAppLayer) UpdatePost(post *model.Post, safeUpdate bool) (*model.Post, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdatePost")

	span.SetTag("post", post)

	span.SetTag("safeUpdate", safeUpdate)

	defer span.Finish()

	return s.app.UpdatePost(post, safeUpdate)
}

func (s *OpenTracingAppLayer) UpdatePreferences(userId string, preferences model.Preferences) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdatePreferences")

	span.SetTag("userId", userId)

	span.SetTag("preferences", preferences)

	defer span.Finish()

	return s.app.UpdatePreferences(userId, preferences)
}

func (s *OpenTracingAppLayer) UpdateRole(role *model.Role) (*model.Role, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateRole")

	span.SetTag("role", role)

	defer span.Finish()

	return s.app.UpdateRole(role)
}

func (s *OpenTracingAppLayer) UpdateScheme(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateScheme")

	span.SetTag("scheme", scheme)

	defer span.Finish()

	return s.app.UpdateScheme(scheme)
}

func (s *OpenTracingAppLayer) UpdateSessionsIsGuest(userId string, isGuest bool) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateSessionsIsGuest")

	span.SetTag("userId", userId)

	span.SetTag("isGuest", isGuest)

	defer span.Finish()

	s.app.UpdateSessionsIsGuest(userId, isGuest)
}

func (s *OpenTracingAppLayer) UpdateTeam(team *model.Team) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateTeam")

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.UpdateTeam(team)
}

func (s *OpenTracingAppLayer) UpdateTeamMemberRoles(teamId string, userId string, newRoles string) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateTeamMemberRoles")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("newRoles", newRoles)

	defer span.Finish()

	return s.app.UpdateTeamMemberRoles(teamId, userId, newRoles)
}

func (s *OpenTracingAppLayer) UpdateTeamMemberSchemeRoles(teamId string, userId string, isSchemeGuest bool, isSchemeUser bool, isSchemeAdmin bool) (*model.TeamMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateTeamMemberSchemeRoles")

	span.SetTag("teamId", teamId)

	span.SetTag("userId", userId)

	span.SetTag("isSchemeGuest", isSchemeGuest)

	span.SetTag("isSchemeUser", isSchemeUser)

	span.SetTag("isSchemeAdmin", isSchemeAdmin)

	defer span.Finish()

	return s.app.UpdateTeamMemberSchemeRoles(teamId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)
}

func (s *OpenTracingAppLayer) UpdateTeamPrivacy(teamId string, teamType string, allowOpenInvite bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateTeamPrivacy")

	span.SetTag("teamId", teamId)

	span.SetTag("teamType", teamType)

	span.SetTag("allowOpenInvite", allowOpenInvite)

	defer span.Finish()

	return s.app.UpdateTeamPrivacy(teamId, teamType, allowOpenInvite)
}

func (s *OpenTracingAppLayer) UpdateTeamScheme(team *model.Team) (*model.Team, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateTeamScheme")

	span.SetTag("team", team)

	defer span.Finish()

	return s.app.UpdateTeamScheme(team)
}

func (s *OpenTracingAppLayer) UpdateUser(user *model.User, sendNotifications bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateUser")

	span.SetTag("user", user)

	span.SetTag("sendNotifications", sendNotifications)

	defer span.Finish()

	return s.app.UpdateUser(user, sendNotifications)
}

func (s *OpenTracingAppLayer) UpdateUserActive(userId string, active bool) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateUserActive")

	span.SetTag("userId", userId)

	span.SetTag("active", active)

	defer span.Finish()

	return s.app.UpdateUserActive(userId, active)
}

func (s *OpenTracingAppLayer) UpdateUserAsUser(user *model.User, asAdmin bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateUserAsUser")

	span.SetTag("user", user)

	span.SetTag("asAdmin", asAdmin)

	defer span.Finish()

	return s.app.UpdateUserAsUser(user, asAdmin)
}

func (s *OpenTracingAppLayer) UpdateUserAuth(userId string, userAuth *model.UserAuth) (*model.UserAuth, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateUserAuth")

	span.SetTag("userId", userId)

	span.SetTag("userAuth", userAuth)

	defer span.Finish()

	return s.app.UpdateUserAuth(userId, userAuth)
}

func (s *OpenTracingAppLayer) UpdateUserNotifyProps(userId string, props map[string]string) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateUserNotifyProps")

	span.SetTag("userId", userId)

	span.SetTag("props", props)

	defer span.Finish()

	return s.app.UpdateUserNotifyProps(userId, props)
}

func (s *OpenTracingAppLayer) UpdateUserRoles(userId string, newRoles string, sendWebSocketEvent bool) (*model.User, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateUserRoles")

	span.SetTag("userId", userId)

	span.SetTag("newRoles", newRoles)

	span.SetTag("sendWebSocketEvent", sendWebSocketEvent)

	defer span.Finish()

	return s.app.UpdateUserRoles(userId, newRoles, sendWebSocketEvent)
}

func (s *OpenTracingAppLayer) UpdateWebConnUserActivity(session model.Session, activityAt int64) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpdateWebConnUserActivity")

	span.SetTag("session", session)

	span.SetTag("activityAt", activityAt)

	defer span.Finish()

	s.app.UpdateWebConnUserActivity(session, activityAt)
}

func (s *OpenTracingAppLayer) UploadEmojiImage(id string, imageData *multipart.FileHeader) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UploadEmojiImage")

	span.SetTag("id", id)

	span.SetTag("imageData", imageData)

	defer span.Finish()

	return s.app.UploadEmojiImage(id, imageData)
}

func (s *OpenTracingAppLayer) UploadFile(data []byte, channelId string, filename string) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UploadFile")

	span.SetTag("data", data)

	span.SetTag("channelId", channelId)

	span.SetTag("filename", filename)

	defer span.Finish()

	return s.app.UploadFile(data, channelId, filename)
}

func (s *OpenTracingAppLayer) UploadFileX(channelId string, name string, input io.Reader, opts ...func(*UploadFileTask)) (*model.FileInfo, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UploadFileX")

	span.SetTag("channelId", channelId)

	span.SetTag("name", name)

	span.SetTag("input", input)

	span.SetTag("opts", opts)

	defer span.Finish()

	return s.app.UploadFileX(channelId, name, input, opts...)
}

func (s *OpenTracingAppLayer) UploadFiles(teamId string, channelId string, userId string, files []io.ReadCloser, filenames []string, clientIds []string, now time.Time) (*model.FileUploadResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UploadFiles")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("files", files)

	span.SetTag("filenames", filenames)

	span.SetTag("clientIds", clientIds)

	span.SetTag("now", now)

	defer span.Finish()

	return s.app.UploadFiles(teamId, channelId, userId, files, filenames, clientIds, now)
}

func (s *OpenTracingAppLayer) UploadMultipartFiles(teamId string, channelId string, userId string, fileHeaders []*multipart.FileHeader, clientIds []string, now time.Time) (*model.FileUploadResponse, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UploadMultipartFiles")

	span.SetTag("teamId", teamId)

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	span.SetTag("fileHeaders", fileHeaders)

	span.SetTag("clientIds", clientIds)

	span.SetTag("now", now)

	defer span.Finish()

	return s.app.UploadMultipartFiles(teamId, channelId, userId, fileHeaders, clientIds, now)
}

func (s *OpenTracingAppLayer) UpsertGroupMember(groupID string, userID string) (*model.GroupMember, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpsertGroupMember")

	span.SetTag("groupID", groupID)

	span.SetTag("userID", userID)

	defer span.Finish()

	return s.app.UpsertGroupMember(groupID, userID)
}

func (s *OpenTracingAppLayer) UpsertGroupSyncable(groupSyncable *model.GroupSyncable) (*model.GroupSyncable, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UpsertGroupSyncable")

	span.SetTag("groupSyncable", groupSyncable)

	defer span.Finish()

	return s.app.UpsertGroupSyncable(groupSyncable)
}

func (s *OpenTracingAppLayer) UserCanSeeOtherUser(userId string, otherUserId string) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UserCanSeeOtherUser")

	span.SetTag("userId", userId)

	span.SetTag("otherUserId", otherUserId)

	defer span.Finish()

	return s.app.UserCanSeeOtherUser(userId, otherUserId)
}

func (s *OpenTracingAppLayer) UserIsInAdminRoleGroup(userID string, syncableID string, syncableType model.GroupSyncableType) (bool, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.UserIsInAdminRoleGroup")

	span.SetTag("userID", userID)

	span.SetTag("syncableID", syncableID)

	span.SetTag("syncableType", syncableType)

	defer span.Finish()

	return s.app.UserIsInAdminRoleGroup(userID, syncableID, syncableType)
}

func (s *OpenTracingAppLayer) ValidateAndSetLicenseBytes(b []byte) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ValidateAndSetLicenseBytes")

	span.SetTag("b", b)

	defer span.Finish()

	s.app.ValidateAndSetLicenseBytes(b)
}

func (s *OpenTracingAppLayer) VerifyEmailFromToken(userSuppliedTokenString string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.VerifyEmailFromToken")

	span.SetTag("userSuppliedTokenString", userSuppliedTokenString)

	defer span.Finish()

	return s.app.VerifyEmailFromToken(userSuppliedTokenString)
}

func (s *OpenTracingAppLayer) VerifyPlugin(plugin io.ReadSeeker, signature io.ReadSeeker) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.VerifyPlugin")

	span.SetTag("plugin", plugin)

	span.SetTag("signature", signature)

	defer span.Finish()

	return s.app.VerifyPlugin(plugin, signature)
}

func (s *OpenTracingAppLayer) VerifyUserEmail(userId string, email string) *model.AppError {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.VerifyUserEmail")

	span.SetTag("userId", userId)

	span.SetTag("email", email)

	defer span.Finish()

	return s.app.VerifyUserEmail(userId, email)
}

func (s *OpenTracingAppLayer) ViewChannel(view *model.ChannelView, userId string, currentSessionId string) (map[string]int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.ViewChannel")

	span.SetTag("view", view)

	span.SetTag("userId", userId)

	span.SetTag("currentSessionId", currentSessionId)

	defer span.Finish()

	return s.app.ViewChannel(view, userId, currentSessionId)
}

func (s *OpenTracingAppLayer) WaitForChannelMembership(channelId string, userId string) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.WaitForChannelMembership")

	span.SetTag("channelId", channelId)

	span.SetTag("userId", userId)

	defer span.Finish()

	s.app.WaitForChannelMembership(channelId, userId)
}

func (s *OpenTracingAppLayer) WriteFile(fr io.Reader, path string) (int64, *model.AppError) {
	span, _ := tracing.StartSpanWithParentByContext(s.ctx, "app.WriteFile")

	span.SetTag("fr", fr)

	span.SetTag("path", path)

	defer span.Finish()

	return s.app.WriteFile(fr, path)
}

func NewOpenTracingAppLayer(childApp AppIface, ctx context.Context) *OpenTracingAppLayer {
	newStore := OpenTracingAppLayer{
		app: childApp,
		ctx: ctx,
	}

	newStore.srv = childApp.Srv()
	newStore.log = childApp.Log()
	newStore.notificationsLog = childApp.NotificationsLog()
	newStore.t = childApp.GetT()
	if childApp.Session() != nil {
		newStore.session = *childApp.Session()
	}
	newStore.requestId = childApp.RequestId()
	newStore.ipAddress = childApp.IpAddress()
	newStore.path = childApp.Path()
	newStore.userAgent = childApp.UserAgent()
	newStore.acceptLanguage = childApp.AcceptLanguage()
	newStore.accountMigration = childApp.AccountMigration()
	newStore.cluster = childApp.Cluster()
	newStore.compliance = childApp.Compliance()
	newStore.dataRetention = childApp.DataRetention()
	newStore.elasticsearch = childApp.Elasticsearch()
	newStore.ldap = childApp.Ldap()
	newStore.messageExport = childApp.MessageExport()
	newStore.metrics = childApp.Metrics()
	newStore.notification = childApp.Notification()
	newStore.saml = childApp.Saml()
	newStore.httpService = childApp.HTTPService()
	newStore.imageProxy = childApp.ImageProxy()
	newStore.timezones = childApp.Timezones()
	newStore.context = childApp.Context()
	newStore.store = childApp.Store()

	return &newStore
}

func (s *OpenTracingAppLayer) Srv() *Server {
	return s.srv
}
func (s *OpenTracingAppLayer) Log() *mlog.Logger {
	return s.log
}
func (s *OpenTracingAppLayer) NotificationsLog() *mlog.Logger {
	return s.notificationsLog
}
func (s *OpenTracingAppLayer) T(translationID string, args ...interface{}) string {
	return s.t(translationID, args...)
}
func (s *OpenTracingAppLayer) Session() *model.Session {
	return &s.session
}
func (s *OpenTracingAppLayer) RequestId() string {
	return s.requestId
}
func (s *OpenTracingAppLayer) IpAddress() string {
	return s.ipAddress
}
func (s *OpenTracingAppLayer) Path() string {
	return s.path
}
func (s *OpenTracingAppLayer) UserAgent() string {
	return s.userAgent
}
func (s *OpenTracingAppLayer) AcceptLanguage() string {
	return s.acceptLanguage
}
func (s *OpenTracingAppLayer) AccountMigration() einterfaces.AccountMigrationInterface {
	return s.accountMigration
}
func (s *OpenTracingAppLayer) Cluster() einterfaces.ClusterInterface {
	return s.cluster
}
func (s *OpenTracingAppLayer) Compliance() einterfaces.ComplianceInterface {
	return s.compliance
}
func (s *OpenTracingAppLayer) DataRetention() einterfaces.DataRetentionInterface {
	return s.dataRetention
}
func (s *OpenTracingAppLayer) Elasticsearch() einterfaces.ElasticsearchInterface {
	return s.elasticsearch
}
func (s *OpenTracingAppLayer) Ldap() einterfaces.LdapInterface {
	return s.ldap
}
func (s *OpenTracingAppLayer) MessageExport() einterfaces.MessageExportInterface {
	return s.messageExport
}
func (s *OpenTracingAppLayer) Metrics() einterfaces.MetricsInterface {
	return s.metrics
}
func (s *OpenTracingAppLayer) Notification() einterfaces.NotificationInterface {
	return s.notification
}
func (s *OpenTracingAppLayer) Saml() einterfaces.SamlInterface {
	return s.saml
}
func (s *OpenTracingAppLayer) HTTPService() httpservice.HTTPService {
	return s.httpService
}
func (s *OpenTracingAppLayer) ImageProxy() *imageproxy.ImageProxy {
	return s.imageProxy
}
func (s *OpenTracingAppLayer) Timezones() *timezones.Timezones {
	return s.timezones
}
func (s *OpenTracingAppLayer) Context() context.Context {
	return s.context
}
func (s *OpenTracingAppLayer) Store() store.Store {
	return s.store
}

func (s *OpenTracingAppLayer) SetSession(sess *model.Session) {
	s.session = *sess
}
func (s *OpenTracingAppLayer) SetStore(str store.Store) {
	s.store = str
}

func (s *OpenTracingAppLayer) SetT(t goi18n.TranslateFunc) {
	s.t = t
}
func (s *OpenTracingAppLayer) SetRequestId(str string) {
	s.requestId = str
}
func (s *OpenTracingAppLayer) SetIpAddress(str string) {
	s.ipAddress = str
}
func (s *OpenTracingAppLayer) SetUserAgent(str string) {
	s.userAgent = str
}
func (s *OpenTracingAppLayer) SetAcceptLanguage(str string) {
	s.acceptLanguage = str
}
func (s *OpenTracingAppLayer) SetPath(str string) {
	s.path = str
}
func (s *OpenTracingAppLayer) SetContext(c context.Context) {
	s.context = c
}
func (s *OpenTracingAppLayer) SetServer(srv *Server) {
	s.srv = srv
}
func (s *OpenTracingAppLayer) GetT() goi18n.TranslateFunc {
	return s.t
}
