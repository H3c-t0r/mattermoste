// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make importexport-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// ExporterAppIface is an autogenerated mock type for the ExporterAppIface type
type ExporterAppIface struct {
	mock.Mock
}

// GetEmojiList provides a mock function with given fields: page, perPage, sort
func (_m *ExporterAppIface) GetEmojiList(page int, perPage int, sort string) ([]*model.Emoji, *model.AppError) {
	ret := _m.Called(page, perPage, sort)

	var r0 []*model.Emoji
	if rf, ok := ret.Get(0).(func(int, int, string) []*model.Emoji); ok {
		r0 = rf(page, perPage, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Emoji)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(int, int, string) *model.AppError); ok {
		r1 = rf(page, perPage, sort)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetPreferenceByCategoryForUser provides a mock function with given fields: userId, category
func (_m *ExporterAppIface) GetPreferenceByCategoryForUser(userId string, category string) (model.Preferences, *model.AppError) {
	ret := _m.Called(userId, category)

	var r0 model.Preferences
	if rf, ok := ret.Get(0).(func(string, string) model.Preferences); ok {
		r0 = rf(userId, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Preferences)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(userId, category)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetPreferencesForUser provides a mock function with given fields: userId
func (_m *ExporterAppIface) GetPreferencesForUser(userId string) (model.Preferences, *model.AppError) {
	ret := _m.Called(userId)

	var r0 model.Preferences
	if rf, ok := ret.Get(0).(func(string) model.Preferences); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Preferences)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}
