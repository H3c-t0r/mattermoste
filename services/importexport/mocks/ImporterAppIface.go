// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make importexport-mocks`.

package mocks

import (
	io "io"

	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	time "time"
)

// ImporterAppIface is an autogenerated mock type for the ImporterAppIface type
type ImporterAppIface struct {
	mock.Mock
}

// CreateChannel provides a mock function with given fields: channel, addMember
func (_m *ImporterAppIface) CreateChannel(channel *model.Channel, addMember bool) (*model.Channel, *model.AppError) {
	ret := _m.Called(channel, addMember)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(*model.Channel, bool) *model.Channel); ok {
		r0 = rf(channel, addMember)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Channel, bool) *model.AppError); ok {
		r1 = rf(channel, addMember)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CreateGroupChannel provides a mock function with given fields: userIds, creatorId
func (_m *ImporterAppIface) CreateGroupChannel(userIds []string, creatorId string) (*model.Channel, *model.AppError) {
	ret := _m.Called(userIds, creatorId)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func([]string, string) *model.Channel); ok {
		r0 = rf(userIds, creatorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func([]string, string) *model.AppError); ok {
		r1 = rf(userIds, creatorId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: role
func (_m *ImporterAppIface) CreateRole(role *model.Role) (*model.Role, *model.AppError) {
	ret := _m.Called(role)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(*model.Role) *model.Role); ok {
		r0 = rf(role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Role) *model.AppError); ok {
		r1 = rf(role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CreateScheme provides a mock function with given fields: scheme
func (_m *ImporterAppIface) CreateScheme(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	ret := _m.Called(scheme)

	var r0 *model.Scheme
	if rf, ok := ret.Get(0).(func(*model.Scheme) *model.Scheme); ok {
		r0 = rf(scheme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Scheme)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Scheme) *model.AppError); ok {
		r1 = rf(scheme)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CreateTeam provides a mock function with given fields: team
func (_m *ImporterAppIface) CreateTeam(team *model.Team) (*model.Team, *model.AppError) {
	ret := _m.Called(team)

	var r0 *model.Team
	if rf, ok := ret.Get(0).(func(*model.Team) *model.Team); ok {
		r0 = rf(team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Team) *model.AppError); ok {
		r1 = rf(team)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *ImporterAppIface) CreateUser(user *model.User) (*model.User, *model.AppError) {
	ret := _m.Called(user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// DoUploadFile provides a mock function with given fields: now, rawTeamId, rawChannelId, rawUserId, rawFilename, data
func (_m *ImporterAppIface) DoUploadFile(now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*model.FileInfo, *model.AppError) {
	ret := _m.Called(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)

	var r0 *model.FileInfo
	if rf, ok := ret.Get(0).(func(time.Time, string, string, string, string, []byte) *model.FileInfo); ok {
		r0 = rf(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileInfo)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(time.Time, string, string, string, string, []byte) *model.AppError); ok {
		r1 = rf(now, rawTeamId, rawChannelId, rawUserId, rawFilename, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: fileId
func (_m *ImporterAppIface) GetFile(fileId string) ([]byte, *model.AppError) {
	ret := _m.Called(fileId)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(fileId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetFileInfosForPost provides a mock function with given fields: postId, fromMaster
func (_m *ImporterAppIface) GetFileInfosForPost(postId string, fromMaster bool) ([]*model.FileInfo, *model.AppError) {
	ret := _m.Called(postId, fromMaster)

	var r0 []*model.FileInfo
	if rf, ok := ret.Get(0).(func(string, bool) []*model.FileInfo); ok {
		r0 = rf(postId, fromMaster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FileInfo)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, bool) *model.AppError); ok {
		r1 = rf(postId, fromMaster)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetOrCreateDirectChannel provides a mock function with given fields: userId, otherUserId
func (_m *ImporterAppIface) GetOrCreateDirectChannel(userId string, otherUserId string) (*model.Channel, *model.AppError) {
	ret := _m.Called(userId, otherUserId)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(string, string) *model.Channel); ok {
		r0 = rf(userId, otherUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(userId, otherUserId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetRoleByName provides a mock function with given fields: name
func (_m *ImporterAppIface) GetRoleByName(name string) (*model.Role, *model.AppError) {
	ret := _m.Called(name)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(string) *model.Role); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetSchemeByName provides a mock function with given fields: name
func (_m *ImporterAppIface) GetSchemeByName(name string) (*model.Scheme, *model.AppError) {
	ret := _m.Called(name)

	var r0 *model.Scheme
	if rf, ok := ret.Get(0).(func(string) *model.Scheme); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Scheme)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// HandleImages provides a mock function with given fields: previewPathList, thumbnailPathList, fileData
func (_m *ImporterAppIface) HandleImages(previewPathList []string, thumbnailPathList []string, fileData [][]byte) {
	_m.Called(previewPathList, thumbnailPathList, fileData)
}

// MaxPostSize provides a mock function with given fields:
func (_m *ImporterAppIface) MaxPostSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SetProfileImageFromMultiPartFile provides a mock function with given fields: userId, file
func (_m *ImporterAppIface) SetProfileImageFromMultiPartFile(userId string, file multipart.File) *model.AppError {
	ret := _m.Called(userId, file)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, multipart.File) *model.AppError); ok {
		r0 = rf(userId, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// UpdateChannel provides a mock function with given fields: channel
func (_m *ImporterAppIface) UpdateChannel(channel *model.Channel) (*model.Channel, *model.AppError) {
	ret := _m.Called(channel)

	var r0 *model.Channel
	if rf, ok := ret.Get(0).(func(*model.Channel) *model.Channel); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Channel) *model.AppError); ok {
		r1 = rf(channel)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateChannelMemberRoles provides a mock function with given fields: channelId, userId, newRoles
func (_m *ImporterAppIface) UpdateChannelMemberRoles(channelId string, userId string, newRoles string) (*model.ChannelMember, *model.AppError) {
	ret := _m.Called(channelId, userId, newRoles)

	var r0 *model.ChannelMember
	if rf, ok := ret.Get(0).(func(string, string, string) *model.ChannelMember); ok {
		r0 = rf(channelId, userId, newRoles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelMember)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, string) *model.AppError); ok {
		r1 = rf(channelId, userId, newRoles)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateChannelMemberSchemeRoles provides a mock function with given fields: channelId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin
func (_m *ImporterAppIface) UpdateChannelMemberSchemeRoles(channelId string, userId string, isSchemeGuest bool, isSchemeUser bool, isSchemeAdmin bool) (*model.ChannelMember, *model.AppError) {
	ret := _m.Called(channelId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)

	var r0 *model.ChannelMember
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool) *model.ChannelMember); ok {
		r0 = rf(channelId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChannelMember)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool) *model.AppError); ok {
		r1 = rf(channelId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: user, newPassword
func (_m *ImporterAppIface) UpdatePassword(user *model.User, newPassword string) *model.AppError {
	ret := _m.Called(user, newPassword)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, string) *model.AppError); ok {
		r0 = rf(user, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// UpdateRole provides a mock function with given fields: role
func (_m *ImporterAppIface) UpdateRole(role *model.Role) (*model.Role, *model.AppError) {
	ret := _m.Called(role)

	var r0 *model.Role
	if rf, ok := ret.Get(0).(func(*model.Role) *model.Role); ok {
		r0 = rf(role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Role)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Role) *model.AppError); ok {
		r1 = rf(role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateScheme provides a mock function with given fields: scheme
func (_m *ImporterAppIface) UpdateScheme(scheme *model.Scheme) (*model.Scheme, *model.AppError) {
	ret := _m.Called(scheme)

	var r0 *model.Scheme
	if rf, ok := ret.Get(0).(func(*model.Scheme) *model.Scheme); ok {
		r0 = rf(scheme)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Scheme)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Scheme) *model.AppError); ok {
		r1 = rf(scheme)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateTeamMemberRoles provides a mock function with given fields: teamId, userId, newRoles
func (_m *ImporterAppIface) UpdateTeamMemberRoles(teamId string, userId string, newRoles string) (*model.TeamMember, *model.AppError) {
	ret := _m.Called(teamId, userId, newRoles)

	var r0 *model.TeamMember
	if rf, ok := ret.Get(0).(func(string, string, string) *model.TeamMember); ok {
		r0 = rf(teamId, userId, newRoles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamMember)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, string) *model.AppError); ok {
		r1 = rf(teamId, userId, newRoles)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateTeamMemberSchemeRoles provides a mock function with given fields: teamId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin
func (_m *ImporterAppIface) UpdateTeamMemberSchemeRoles(teamId string, userId string, isSchemeGuest bool, isSchemeUser bool, isSchemeAdmin bool) (*model.TeamMember, *model.AppError) {
	ret := _m.Called(teamId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)

	var r0 *model.TeamMember
	if rf, ok := ret.Get(0).(func(string, string, bool, bool, bool) *model.TeamMember); ok {
		r0 = rf(teamId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TeamMember)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, bool, bool, bool) *model.AppError); ok {
		r1 = rf(teamId, userId, isSchemeGuest, isSchemeUser, isSchemeAdmin)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateTeamUnsanitized provides a mock function with given fields: team
func (_m *ImporterAppIface) UpdateTeamUnsanitized(team *model.Team) (*model.Team, *model.AppError) {
	ret := _m.Called(team)

	var r0 *model.Team
	if rf, ok := ret.Get(0).(func(*model.Team) *model.Team); ok {
		r0 = rf(team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.Team) *model.AppError); ok {
		r1 = rf(team)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, sendNotifications
func (_m *ImporterAppIface) UpdateUser(user *model.User, sendNotifications bool) (*model.User, *model.AppError) {
	ret := _m.Called(user, sendNotifications)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*model.User, bool) *model.User); ok {
		r0 = rf(user, sendNotifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(*model.User, bool) *model.AppError); ok {
		r1 = rf(user, sendNotifications)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateUserNotifyProps provides a mock function with given fields: userId, props
func (_m *ImporterAppIface) UpdateUserNotifyProps(userId string, props map[string]string) (*model.User, *model.AppError) {
	ret := _m.Called(userId, props)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, map[string]string) *model.User); ok {
		r0 = rf(userId, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, map[string]string) *model.AppError); ok {
		r1 = rf(userId, props)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UpdateUserRoles provides a mock function with given fields: userId, newRoles, sendWebSocketEvent
func (_m *ImporterAppIface) UpdateUserRoles(userId string, newRoles string, sendWebSocketEvent bool) (*model.User, *model.AppError) {
	ret := _m.Called(userId, newRoles, sendWebSocketEvent)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string, bool) *model.User); ok {
		r0 = rf(userId, newRoles, sendWebSocketEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, bool) *model.AppError); ok {
		r1 = rf(userId, newRoles, sendWebSocketEvent)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// UserIsInAdminRoleGroup provides a mock function with given fields: userID, syncableID, syncableType
func (_m *ImporterAppIface) UserIsInAdminRoleGroup(userID string, syncableID string, syncableType model.GroupSyncableType) (bool, *model.AppError) {
	ret := _m.Called(userID, syncableID, syncableType)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, model.GroupSyncableType) bool); ok {
		r0 = rf(userID, syncableID, syncableType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(string, string, model.GroupSyncableType) *model.AppError); ok {
		r1 = rf(userID, syncableID, syncableType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// VerifyUserEmail provides a mock function with given fields: userId, email
func (_m *ImporterAppIface) VerifyUserEmail(userId string, email string) *model.AppError {
	ret := _m.Called(userId, email)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) *model.AppError); ok {
		r0 = rf(userId, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// WriteFile provides a mock function with given fields: fr, path
func (_m *ImporterAppIface) WriteFile(fr io.Reader, path string) (int64, *model.AppError) {
	ret := _m.Called(fr, path)

	var r0 int64
	if rf, ok := ret.Get(0).(func(io.Reader, string) int64); ok {
		r0 = rf(fr, path)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(io.Reader, string) *model.AppError); ok {
		r1 = rf(fr, path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}
